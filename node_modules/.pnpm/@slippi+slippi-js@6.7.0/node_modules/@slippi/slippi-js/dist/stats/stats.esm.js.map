{"version":3,"file":"stats.esm.js","sources":["../../src/stats/stats.ts"],"sourcesContent":["import { get } from \"lodash\";\n\nimport type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport { Frames } from \"../types\";\n\nexport interface StatComputer<T> {\n  setup(settings: GameStartType): void;\n  processFrame(newFrame: FrameEntryType, allFrames: FramesType): void;\n  fetch(): T;\n}\n\nexport interface StatOptions {\n  processOnTheFly: boolean;\n}\n\nconst defaultOptions: StatOptions = {\n  processOnTheFly: false,\n};\n\nexport class Stats {\n  private options: StatOptions;\n  private lastProcessedFrame: number | null = null;\n  private frames: FramesType = {};\n  private players: number[] = [];\n  private allComputers = new Array<StatComputer<unknown>>();\n\n  public constructor(options?: StatOptions) {\n    this.options = Object.assign({}, defaultOptions, options);\n  }\n\n  /**\n   * Should reset the frames to their default values.\n   */\n  public setup(settings: GameStartType): void {\n    // Reset the frames since it's a new game\n    this.frames = {};\n    this.players = settings.players.map((v) => v.playerIndex);\n\n    // Forward the settings on to the individual stat computer\n    this.allComputers.forEach((comp) => comp.setup(settings));\n  }\n\n  public register(...computer: StatComputer<unknown>[]): void {\n    this.allComputers.push(...computer);\n  }\n\n  public process(): void {\n    if (this.players.length === 0) {\n      return;\n    }\n\n    let i = this.lastProcessedFrame !== null ? this.lastProcessedFrame + 1 : Frames.FIRST;\n    while (this.frames[i]) {\n      const frame = this.frames[i];\n      // Don't attempt to compute stats on frames that have not been fully received\n      if (!isCompletedFrame(this.players, frame)) {\n        return;\n      }\n      this.allComputers.forEach((comp) => comp.processFrame(frame, this.frames));\n      this.lastProcessedFrame = i;\n      i++;\n    }\n  }\n\n  public addFrame(frame: FrameEntryType): void {\n    this.frames[frame.frame] = frame;\n\n    if (this.options.processOnTheFly) {\n      this.process();\n    }\n  }\n}\n\nfunction isCompletedFrame(players: number[], frame?: FrameEntryType): frame is FrameEntryType {\n  if (!frame) {\n    return false;\n  }\n\n  // This function checks whether we have successfully received an entire frame.\n  // It is not perfect because it does not wait for follower frames. Fortunately,\n  // follower frames are not used for any stat calculations so this doesn't matter\n  // for our purposes.\n  for (const player of players) {\n    const playerPostFrame = get(frame, [\"players\", player, \"post\"]);\n    if (!playerPostFrame) {\n      return false;\n    }\n  }\n\n  return true;\n}\n"],"names":["defaultOptions","processOnTheFly","Stats","constructor","options","lastProcessedFrame","frames","players","allComputers","Array","Object","assign","setup","settings","map","v","playerIndex","forEach","comp","register","computer","push","process","length","i","Frames","FIRST","frame","isCompletedFrame","processFrame","addFrame","player","playerPostFrame","get"],"mappings":";;;AAeA,MAAMA,cAAc,GAAgB;AAClCC,EAAAA,eAAe,EAAE;AADiB,CAApC;MAIaC;AAOXC,EAAAA,YAAmBC;SANXA;SACAC,qBAAoC;SACpCC,SAAqB;SACrBC,UAAoB;SACpBC,eAAe,IAAIC,KAAJ;AAGrB,SAAKL,OAAL,GAAeM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,cAAlB,EAAkCI,OAAlC,CAAf;AACD;AAED;;;;;AAGOQ,EAAAA,KAAK,CAACC,QAAD;AACV;AACA,SAAKP,MAAL,GAAc,EAAd;AACA,SAAKC,OAAL,GAAeM,QAAQ,CAACN,OAAT,CAAiBO,GAAjB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,WAA9B,CAAf;;AAGA,SAAKR,YAAL,CAAkBS,OAAlB,CAA2BC,IAAD,IAAUA,IAAI,CAACN,KAAL,CAAWC,QAAX,CAApC;AACD;;AAEMM,EAAAA,QAAQ,CAAC,GAAGC,QAAJ;AACb,SAAKZ,YAAL,CAAkBa,IAAlB,CAAuB,GAAGD,QAA1B;AACD;;AAEME,EAAAA,OAAO;AACZ,QAAI,KAAKf,OAAL,CAAagB,MAAb,KAAwB,CAA5B,EAA+B;AAC7B;AACD;;AAED,QAAIC,CAAC,GAAG,KAAKnB,kBAAL,KAA4B,IAA5B,GAAmC,KAAKA,kBAAL,GAA0B,CAA7D,GAAiEoB,MAAM,CAACC,KAAhF;;AACA,WAAO,KAAKpB,MAAL,CAAYkB,CAAZ,CAAP,EAAuB;AACrB,YAAMG,KAAK,GAAG,KAAKrB,MAAL,CAAYkB,CAAZ,CAAd,CADqB;;AAGrB,UAAI,CAACI,gBAAgB,CAAC,KAAKrB,OAAN,EAAeoB,KAAf,CAArB,EAA4C;AAC1C;AACD;;AACD,WAAKnB,YAAL,CAAkBS,OAAlB,CAA2BC,IAAD,IAAUA,IAAI,CAACW,YAAL,CAAkBF,KAAlB,EAAyB,KAAKrB,MAA9B,CAApC;AACA,WAAKD,kBAAL,GAA0BmB,CAA1B;AACAA,MAAAA,CAAC;AACF;AACF;;AAEMM,EAAAA,QAAQ,CAACH,KAAD;AACb,SAAKrB,MAAL,CAAYqB,KAAK,CAACA,KAAlB,IAA2BA,KAA3B;;AAEA,QAAI,KAAKvB,OAAL,CAAaH,eAAjB,EAAkC;AAChC,WAAKqB,OAAL;AACD;AACF;;;;AAGH,SAASM,gBAAT,CAA0BrB,OAA1B,EAA6CoB,KAA7C;AACE,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,KAAP;AACD;AAGD;AACA;AACA;;;AACA,OAAK,MAAMI,MAAX,IAAqBxB,OAArB,EAA8B;AAC5B,UAAMyB,eAAe,GAAGC,GAAG,CAACN,KAAD,EAAQ,CAAC,SAAD,EAAYI,MAAZ,EAAoB,MAApB,CAAR,CAA3B;;AACA,QAAI,CAACC,eAAL,EAAsB;AACpB,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;;;;"}