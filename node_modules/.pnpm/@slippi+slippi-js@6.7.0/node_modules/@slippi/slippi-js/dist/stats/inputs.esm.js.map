{"version":3,"file":"inputs.esm.js","sources":["../../src/stats/inputs.ts"],"sourcesContent":["import type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport { Frames } from \"../types\";\nimport type { PlayerIndexedType } from \"./common\";\nimport { getSinglesPlayerPermutationsFromSettings } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\nenum JoystickRegion {\n  DZ = 0,\n  NE = 1,\n  SE = 2,\n  SW = 3,\n  NW = 4,\n  N = 5,\n  E = 6,\n  S = 7,\n  W = 8,\n}\n\nexport interface PlayerInput {\n  playerIndex: number;\n  opponentIndex: number;\n  inputCount: number;\n  joystickInputCount: number;\n  cstickInputCount: number;\n  buttonInputCount: number;\n  triggerInputCount: number;\n}\n\nexport class InputComputer implements StatComputer<PlayerInput[]> {\n  private state = new Map<PlayerIndexedType, PlayerInput>();\n  private playerPermutations = new Array<PlayerIndexedType>();\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: PlayerInput = {\n        playerIndex: indices.playerIndex,\n        opponentIndex: indices.opponentIndex,\n        inputCount: 0,\n        joystickInputCount: 0,\n        cstickInputCount: 0,\n        buttonInputCount: 0,\n        triggerInputCount: 0,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleInputCompute(allFrames, state, indices, frame);\n      }\n    });\n  }\n\n  public fetch(): PlayerInput[] {\n    return Array.from(this.state.values());\n  }\n}\n\nfunction handleInputCompute(\n  frames: FramesType,\n  state: PlayerInput,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n): void {\n  const playerFrame = frame.players[indices.playerIndex]!.pre;\n  const currentFrameNumber = playerFrame.frame!;\n  const prevFrameNumber = currentFrameNumber - 1;\n  const prevPlayerFrame = frames[prevFrameNumber] ? frames[prevFrameNumber]!.players[indices.playerIndex]!.pre : null;\n\n  if (currentFrameNumber < Frames.FIRST_PLAYABLE || !prevPlayerFrame) {\n    // Don't count inputs until the game actually starts\n    return;\n  }\n\n  // First count the number of buttons that go from 0 to 1\n  // Increment action count by amount of button presses\n  const invertedPreviousButtons = ~prevPlayerFrame.physicalButtons!;\n  const currentButtons = playerFrame.physicalButtons!;\n  const buttonChanges = invertedPreviousButtons & currentButtons & 0xfff;\n  const newInputsPressed = countSetBits(buttonChanges);\n  state.inputCount += newInputsPressed;\n  state.buttonInputCount += newInputsPressed;\n\n  // Increment action count when sticks change from one region to another.\n  // Don't increment when stick returns to deadzone\n  const prevAnalogRegion = getJoystickRegion(prevPlayerFrame.joystickX!, prevPlayerFrame.joystickY!);\n  const currentAnalogRegion = getJoystickRegion(playerFrame.joystickX!, playerFrame.joystickY!);\n  if (prevAnalogRegion !== currentAnalogRegion && currentAnalogRegion !== JoystickRegion.DZ) {\n    state.inputCount += 1;\n    state.joystickInputCount += 1;\n  }\n\n  // Do the same for c-stick\n  const prevCstickRegion = getJoystickRegion(prevPlayerFrame.cStickX!, prevPlayerFrame.cStickY!);\n  const currentCstickRegion = getJoystickRegion(playerFrame.cStickX!, playerFrame.cStickY!);\n  if (prevCstickRegion !== currentCstickRegion && currentCstickRegion !== JoystickRegion.DZ) {\n    state.inputCount += 1;\n    state.cstickInputCount += 1;\n  }\n\n  // Increment action on analog trigger... I'm not sure when. This needs revision\n  // Currently will update input count when the button gets pressed past 0.3\n  // Changes from hard shield to light shield should probably count as inputs but\n  // are not counted here\n  if (prevPlayerFrame.physicalLTrigger! < 0.3 && playerFrame.physicalLTrigger! >= 0.3) {\n    state.inputCount += 1;\n    state.triggerInputCount += 1;\n  }\n  if (prevPlayerFrame.physicalRTrigger! < 0.3 && playerFrame.physicalRTrigger! >= 0.3) {\n    state.inputCount += 1;\n    state.triggerInputCount += 1;\n  }\n}\n\nfunction countSetBits(x: number): number {\n  // This function solves the Hamming Weight problem. Effectively it counts the number of\n  // bits in the input that are set to 1\n  // This implementation is supposedly very efficient when most bits are zero.\n  // Found: https://en.wikipedia.org/wiki/Hamming_weight#Efficient_implementation\n  let bits = x;\n\n  let count;\n  for (count = 0; bits; count += 1) {\n    bits &= bits - 1;\n  }\n  return count;\n}\n\nfunction getJoystickRegion(x: number, y: number): JoystickRegion {\n  let region = JoystickRegion.DZ;\n\n  if (x >= 0.2875 && y >= 0.2875) {\n    region = JoystickRegion.NE;\n  } else if (x >= 0.2875 && y <= -0.2875) {\n    region = JoystickRegion.SE;\n  } else if (x <= -0.2875 && y <= -0.2875) {\n    region = JoystickRegion.SW;\n  } else if (x <= -0.2875 && y >= 0.2875) {\n    region = JoystickRegion.NW;\n  } else if (y >= 0.2875) {\n    region = JoystickRegion.N;\n  } else if (x >= 0.2875) {\n    region = JoystickRegion.E;\n  } else if (y <= -0.2875) {\n    region = JoystickRegion.S;\n  } else if (x <= -0.2875) {\n    region = JoystickRegion.W;\n  }\n\n  return region;\n}\n"],"names":["JoystickRegion","InputComputer","state","Map","playerPermutations","Array","setup","settings","getSinglesPlayerPermutationsFromSettings","forEach","indices","playerState","playerIndex","opponentIndex","inputCount","joystickInputCount","cstickInputCount","buttonInputCount","triggerInputCount","set","processFrame","frame","allFrames","get","handleInputCompute","fetch","from","values","frames","playerFrame","players","pre","currentFrameNumber","prevFrameNumber","prevPlayerFrame","Frames","FIRST_PLAYABLE","invertedPreviousButtons","physicalButtons","currentButtons","buttonChanges","newInputsPressed","countSetBits","prevAnalogRegion","getJoystickRegion","joystickX","joystickY","currentAnalogRegion","DZ","prevCstickRegion","cStickX","cStickY","currentCstickRegion","physicalLTrigger","physicalRTrigger","x","bits","count","y","region","NE","SE","SW","NW","N","E","S","W"],"mappings":"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"}