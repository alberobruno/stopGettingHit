{"version":3,"file":"targets.esm.js","sources":["../../src/stats/targets.ts"],"sourcesContent":["import type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport { Frames, GameMode } from \"../types\";\nimport { exists } from \"../utils/exists\";\nimport type { TargetBreakType } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\n// The Target item's in-game ID\nconst TARGET_ITEM_TYPE_ID = 209;\n\nexport class TargetBreakComputer implements StatComputer<TargetBreakType[]> {\n  private targetBreaks = new Array<TargetBreakType>();\n  private isTargetTestGame = false;\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.targetBreaks = [];\n    this.isTargetTestGame = settings.gameMode === GameMode.TARGET_TEST;\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    if (!this.isTargetTestGame) {\n      return;\n    }\n\n    handleTargetBreak(allFrames, frame, this.targetBreaks);\n  }\n\n  public fetch(): TargetBreakType[] {\n    return this.targetBreaks;\n  }\n}\n\nfunction handleTargetBreak(frames: FramesType, frame: FrameEntryType, targetBreaks: TargetBreakType[]) {\n  const currentFrameNumber = frame.frame;\n  const prevFrameNumber = currentFrameNumber - 1;\n\n  // Add all targets on the first frame\n  if (currentFrameNumber === Frames.FIRST) {\n    const targets = frames[Frames.FIRST]?.items?.filter((item) => item.typeId === TARGET_ITEM_TYPE_ID) ?? [];\n\n    targets.forEach((target) => {\n      targetBreaks.push({\n        spawnId: target.spawnId as number,\n        frameDestroyed: null,\n        positionX: target.positionX as number,\n        positionY: target.positionY as number,\n      });\n    });\n  }\n\n  const currentTargets = frames[currentFrameNumber]?.items?.filter((item) => item.typeId === TARGET_ITEM_TYPE_ID) ?? [];\n  const previousTargets = frames[prevFrameNumber]?.items?.filter((item) => item.typeId === TARGET_ITEM_TYPE_ID) ?? [];\n\n  const currentTargetIds = currentTargets.map((item) => item.spawnId).filter(exists);\n  const previousTargetIds = previousTargets.map((item) => item.spawnId).filter(exists);\n\n  // Check if any targets were destroyed\n  const brokenTargetIds = previousTargetIds.filter((id) => !currentTargetIds.includes(id));\n  brokenTargetIds.forEach((id) => {\n    // Update the target break\n    const targetBreak = targetBreaks.find((targetBreak) => targetBreak.spawnId === id);\n    if (targetBreak) {\n      targetBreak.frameDestroyed = currentFrameNumber;\n    }\n  });\n}\n"],"names":["TARGET_ITEM_TYPE_ID","TargetBreakComputer","targetBreaks","Array","isTargetTestGame","setup","settings","gameMode","GameMode","TARGET_TEST","processFrame","frame","allFrames","handleTargetBreak","fetch","frames","currentFrameNumber","prevFrameNumber","Frames","FIRST","targets","items","filter","item","typeId","forEach","target","push","spawnId","frameDestroyed","positionX","positionY","currentTargets","previousTargets","currentTargetIds","map","exists","previousTargetIds","brokenTargetIds","id","includes","targetBreak","find"],"mappings":";;;AAOA,MAAMA,mBAAmB,GAAG,GAA5B;MAEaC;;SACHC,eAAe,IAAIC,KAAJ;SACfC,mBAAmB;;;AAEpBC,EAAAA,KAAK,CAACC,QAAD;AACV;AACA,SAAKJ,YAAL,GAAoB,EAApB;AACA,SAAKE,gBAAL,GAAwBE,QAAQ,CAACC,QAAT,KAAsBC,QAAQ,CAACC,WAAvD;AACD;;AAEMC,EAAAA,YAAY,CAACC,KAAD,EAAwBC,SAAxB;AACjB,QAAI,CAAC,KAAKR,gBAAV,EAA4B;AAC1B;AACD;;AAEDS,IAAAA,iBAAiB,CAACD,SAAD,EAAYD,KAAZ,EAAmB,KAAKT,YAAxB,CAAjB;AACD;;AAEMY,EAAAA,KAAK;AACV,WAAO,KAAKZ,YAAZ;AACD;;;;AAGH,SAASW,iBAAT,CAA2BE,MAA3B,EAA+CJ,KAA/C,EAAsET,YAAtE;;;AACE,QAAMc,kBAAkB,GAAGL,KAAK,CAACA,KAAjC;AACA,QAAMM,eAAe,GAAGD,kBAAkB,GAAG,CAA7C;;AAGA,MAAIA,kBAAkB,KAAKE,MAAM,CAACC,KAAlC,EAAyC;AAAA;;AACvC,UAAMC,OAAO,oDAAGL,MAAM,CAACG,MAAM,CAACC,KAAR,CAAT,+CAAG,qBAAsBE,KAAzB,qBAAG,uBAA6BC,MAA7B,CAAqCC,IAAD,IAAUA,IAAI,CAACC,MAAL,KAAgBxB,mBAA9D,CAAH,oCAAyF,EAAtG;AAEAoB,IAAAA,OAAO,CAACK,OAAR,CAAiBC,MAAD;AACdxB,MAAAA,YAAY,CAACyB,IAAb,CAAkB;AAChBC,QAAAA,OAAO,EAAEF,MAAM,CAACE,OADA;AAEhBC,QAAAA,cAAc,EAAE,IAFA;AAGhBC,QAAAA,SAAS,EAAEJ,MAAM,CAACI,SAHF;AAIhBC,QAAAA,SAAS,EAAEL,MAAM,CAACK;AAJF,OAAlB;AAMD,KAPD;AAQD;;AAED,QAAMC,cAAc,sDAAGjB,MAAM,CAACC,kBAAD,CAAT,+CAAG,uBAA4BK,KAA/B,qBAAG,uBAAmCC,MAAnC,CAA2CC,IAAD,IAAUA,IAAI,CAACC,MAAL,KAAgBxB,mBAApE,CAAH,oCAA+F,EAAnH;AACA,QAAMiC,eAAe,sDAAGlB,MAAM,CAACE,eAAD,CAAT,+CAAG,uBAAyBI,KAA5B,qBAAG,uBAAgCC,MAAhC,CAAwCC,IAAD,IAAUA,IAAI,CAACC,MAAL,KAAgBxB,mBAAjE,CAAH,oCAA4F,EAAjH;AAEA,QAAMkC,gBAAgB,GAAGF,cAAc,CAACG,GAAf,CAAoBZ,IAAD,IAAUA,IAAI,CAACK,OAAlC,EAA2CN,MAA3C,CAAkDc,MAAlD,CAAzB;AACA,QAAMC,iBAAiB,GAAGJ,eAAe,CAACE,GAAhB,CAAqBZ,IAAD,IAAUA,IAAI,CAACK,OAAnC,EAA4CN,MAA5C,CAAmDc,MAAnD,CAA1B;;AAGA,QAAME,eAAe,GAAGD,iBAAiB,CAACf,MAAlB,CAA0BiB,EAAD,IAAQ,CAACL,gBAAgB,CAACM,QAAjB,CAA0BD,EAA1B,CAAlC,CAAxB;AACAD,EAAAA,eAAe,CAACb,OAAhB,CAAyBc,EAAD;AACtB;AACA,UAAME,WAAW,GAAGvC,YAAY,CAACwC,IAAb,CAAmBD,WAAD,IAAiBA,WAAW,CAACb,OAAZ,KAAwBW,EAA3D,CAApB;;AACA,QAAIE,WAAJ,EAAiB;AACfA,MAAAA,WAAW,CAACZ,cAAZ,GAA6Bb,kBAA7B;AACD;AACF,GAND;AAOD;;;;"}