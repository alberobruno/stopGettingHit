{"version":3,"file":"actions.esm.js","sources":["../../src/stats/actions.ts"],"sourcesContent":["import { get, isEqual, keyBy, last, set, size } from \"lodash\";\n\nimport type { FrameEntryType, GameStartType } from \"../types\";\nimport type { ActionCountsType, PlayerIndexedType } from \"./common\";\nimport { getSinglesPlayerPermutationsFromSettings, State } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\n// Frame pattern that indicates a dash dance turn was executed\nconst dashDanceAnimations = [State.DASH, State.TURN, State.DASH];\n\ninterface PlayerActionState {\n  playerCounts: ActionCountsType;\n  animations: number[];\n  actionFrameCounters: number[];\n}\n\nexport class ActionsComputer implements StatComputer<ActionCountsType[]> {\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private state = new Map<PlayerIndexedType, PlayerActionState>();\n\n  public setup(settings: GameStartType): void {\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.playerPermutations.forEach((indices) => {\n      const playerCounts: ActionCountsType = {\n        playerIndex: indices.playerIndex,\n        wavedashCount: 0,\n        wavelandCount: 0,\n        airDodgeCount: 0,\n        dashDanceCount: 0,\n        spotDodgeCount: 0,\n        ledgegrabCount: 0,\n        rollCount: 0,\n        lCancelCount: {\n          success: 0,\n          fail: 0,\n        },\n        attackCount: {\n          jab1: 0,\n          jab2: 0,\n          jab3: 0,\n          jabm: 0,\n          dash: 0,\n          ftilt: 0,\n          utilt: 0,\n          dtilt: 0,\n          fsmash: 0,\n          usmash: 0,\n          dsmash: 0,\n          nair: 0,\n          fair: 0,\n          bair: 0,\n          uair: 0,\n          dair: 0,\n        },\n        grabCount: {\n          success: 0,\n          fail: 0,\n        },\n        throwCount: {\n          up: 0,\n          forward: 0,\n          back: 0,\n          down: 0,\n        },\n        groundTechCount: {\n          // tech away/in are in reference to the opponents position and not the stage\n          away: 0,\n          in: 0,\n          neutral: 0,\n          fail: 0,\n        },\n        wallTechCount: {\n          success: 0,\n          fail: 0,\n        },\n      };\n      const playerState: PlayerActionState = {\n        playerCounts: playerCounts,\n        animations: [],\n        actionFrameCounters: [],\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleActionCompute(state, indices, frame);\n      }\n    });\n  }\n\n  public fetch(): ActionCountsType[] {\n    return Array.from(this.state.values()).map((val) => val.playerCounts);\n  }\n}\n\nfunction isMissGroundTech(animation: State): boolean {\n  return animation === State.TECH_MISS_DOWN || animation === State.TECH_MISS_UP;\n}\n\nfunction isRolling(animation: State): boolean {\n  return animation === State.ROLL_BACKWARD || animation === State.ROLL_FORWARD;\n}\n\nfunction isGrabAction(animation: State): boolean {\n  // Includes Grab pull, wait, pummel, and throws\n  return animation > State.GRAB && animation <= State.THROW_DOWN && animation !== State.DASH_GRAB;\n}\n\nfunction isGrabbing(animation: State): boolean {\n  return animation === State.GRAB || animation === State.DASH_GRAB;\n}\n\nfunction isAerialAttack(animation: State): boolean {\n  return animation >= State.AERIAL_ATTACK_START && animation <= State.AERIAL_ATTACK_END;\n}\n\nfunction isForwardTilt(animation: State): boolean {\n  return animation >= State.ATTACK_FTILT_START && animation <= State.ATTACK_FTILT_END;\n}\n\nfunction isForwardSmash(animation: State): boolean {\n  return animation >= State.ATTACK_FSMASH_START && animation <= State.ATTACK_FSMASH_END;\n}\n\nfunction handleActionCompute(state: PlayerActionState, indices: PlayerIndexedType, frame: FrameEntryType): void {\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const opponentFrame = frame.players[indices.opponentIndex]!.post;\n  const incrementCount = (field: string, condition: boolean): void => {\n    if (!condition) {\n      return;\n    }\n\n    const current: number = get(state.playerCounts, field, 0);\n    set(state.playerCounts, field, current + 1);\n  };\n\n  // Manage animation state\n  const currentAnimation = playerFrame.actionStateId!;\n  state.animations.push(currentAnimation);\n  const currentFrameCounter = playerFrame.actionStateCounter!;\n  state.actionFrameCounters.push(currentFrameCounter);\n\n  // Grab last 3 frames\n  const last3Frames = state.animations.slice(-3);\n  const prevAnimation = last3Frames[last3Frames.length - 2] as number;\n  const prevFrameCounter = state.actionFrameCounters[state.actionFrameCounters.length - 2] as number;\n\n  // New action if new animation or frame counter goes back down (repeated action)\n  const isNewAction = currentAnimation !== prevAnimation || prevFrameCounter > currentFrameCounter;\n  if (!isNewAction) {\n    return;\n  }\n\n  // Increment counts based on conditions\n  const didDashDance = isEqual(last3Frames, dashDanceAnimations);\n  incrementCount(\"dashDanceCount\", didDashDance);\n\n  incrementCount(\"rollCount\", isRolling(currentAnimation));\n  incrementCount(\"spotDodgeCount\", currentAnimation === State.SPOT_DODGE);\n  incrementCount(\"airDodgeCount\", currentAnimation === State.AIR_DODGE);\n  incrementCount(\"ledgegrabCount\", currentAnimation === State.CLIFF_CATCH);\n\n  // Grabs\n  incrementCount(\"grabCount.success\", isGrabbing(prevAnimation) && isGrabAction(currentAnimation));\n  incrementCount(\"grabCount.fail\", isGrabbing(prevAnimation) && !isGrabAction(currentAnimation));\n  if (currentAnimation === State.DASH_GRAB && prevAnimation === State.ATTACK_DASH) {\n    state.playerCounts.attackCount.dash -= 1; // subtract from dash attack if boost grab\n  }\n\n  // Basic attacks\n  incrementCount(\"attackCount.jab1\", currentAnimation === State.ATTACK_JAB1);\n  incrementCount(\"attackCount.jab2\", currentAnimation === State.ATTACK_JAB2);\n  incrementCount(\"attackCount.jab3\", currentAnimation === State.ATTACK_JAB3);\n  incrementCount(\"attackCount.jabm\", currentAnimation === State.ATTACK_JABM);\n  incrementCount(\"attackCount.dash\", currentAnimation === State.ATTACK_DASH);\n  incrementCount(\"attackCount.ftilt\", isForwardTilt(currentAnimation));\n  incrementCount(\"attackCount.utilt\", currentAnimation === State.ATTACK_UTILT);\n  incrementCount(\"attackCount.dtilt\", currentAnimation === State.ATTACK_DTILT);\n  incrementCount(\"attackCount.fsmash\", isForwardSmash(currentAnimation));\n  incrementCount(\"attackCount.usmash\", currentAnimation === State.ATTACK_USMASH);\n  incrementCount(\"attackCount.dsmash\", currentAnimation === State.ATTACK_DSMASH);\n  incrementCount(\"attackCount.nair\", currentAnimation === State.AERIAL_NAIR);\n  incrementCount(\"attackCount.fair\", currentAnimation === State.AERIAL_FAIR);\n  incrementCount(\"attackCount.bair\", currentAnimation === State.AERIAL_BAIR);\n  incrementCount(\"attackCount.uair\", currentAnimation === State.AERIAL_UAIR);\n  incrementCount(\"attackCount.dair\", currentAnimation === State.AERIAL_DAIR);\n\n  // GnW is weird and has unique IDs for some moves\n  if (playerFrame.internalCharacterId === 0x18) {\n    incrementCount(\"attackCount.jab1\", currentAnimation === State.GNW_JAB1);\n    incrementCount(\"attackCount.jabm\", currentAnimation === State.GNW_JABM);\n    incrementCount(\"attackCount.dtilt\", currentAnimation === State.GNW_DTILT);\n    incrementCount(\"attackCount.fsmash\", currentAnimation === State.GNW_FSMASH);\n    incrementCount(\"attackCount.nair\", currentAnimation === State.GNW_NAIR);\n    incrementCount(\"attackCount.bair\", currentAnimation === State.GNW_BAIR);\n    incrementCount(\"attackCount.uair\", currentAnimation === State.GNW_UAIR);\n  }\n\n  // Peach is also weird and has a unique ID for her fsmash\n  // FSMASH1 = Golf Club, FSMASH2 = Frying Pan, FSMASH3 = Tennis Racket\n  if (playerFrame.internalCharacterId === 0x09) {\n    incrementCount(\"attackCount.fsmash\", currentAnimation === State.PEACH_FSMASH1);\n    incrementCount(\"attackCount.fsmash\", currentAnimation === State.PEACH_FSMASH2);\n    incrementCount(\"attackCount.fsmash\", currentAnimation === State.PEACH_FSMASH3);\n  }\n\n  // Throws\n  incrementCount(\"throwCount.up\", currentAnimation === State.THROW_UP);\n  incrementCount(\"throwCount.forward\", currentAnimation === State.THROW_FORWARD);\n  incrementCount(\"throwCount.down\", currentAnimation === State.THROW_DOWN);\n  incrementCount(\"throwCount.back\", currentAnimation === State.THROW_BACK);\n\n  // Techs\n  const opponentDir = playerFrame.positionX! > opponentFrame.positionX! ? -1 : 1;\n  const facingOpponent = playerFrame.facingDirection === opponentDir;\n\n  incrementCount(\"groundTechCount.fail\", isMissGroundTech(currentAnimation));\n  incrementCount(\"groundTechCount.in\", currentAnimation === State.FORWARD_TECH && facingOpponent);\n  incrementCount(\"groundTechCount.in\", currentAnimation === State.BACKWARD_TECH && !facingOpponent);\n  incrementCount(\"groundTechCount.neutral\", currentAnimation === State.NEUTRAL_TECH);\n  incrementCount(\"groundTechCount.away\", currentAnimation === State.BACKWARD_TECH && facingOpponent);\n  incrementCount(\"groundTechCount.away\", currentAnimation === State.FORWARD_TECH && !facingOpponent);\n  incrementCount(\"wallTechCount.success\", currentAnimation === State.WALL_TECH);\n  incrementCount(\"wallTechCount.fail\", currentAnimation === State.MISSED_WALL_TECH);\n\n  if (isAerialAttack(currentAnimation)) {\n    incrementCount(\"lCancelCount.success\", playerFrame.lCancelStatus === 1);\n    incrementCount(\"lCancelCount.fail\", playerFrame.lCancelStatus === 2);\n  }\n\n  // Handles wavedash detection (and waveland)\n  handleActionWavedash(state.playerCounts, state.animations);\n}\n\nfunction handleActionWavedash(counts: ActionCountsType, animations: State[]): void {\n  const currentAnimation = last(animations);\n  const prevAnimation = animations[animations.length - 2] as number;\n\n  const isSpecialLanding = currentAnimation === State.LANDING_FALL_SPECIAL;\n  const isAcceptablePrevious = isWavedashInitiationAnimation(prevAnimation);\n  const isPossibleWavedash = isSpecialLanding && isAcceptablePrevious;\n\n  if (!isPossibleWavedash) {\n    return;\n  }\n\n  // Here we special landed, it might be a wavedash, let's check\n  // We grab the last 8 frames here because that should be enough time to execute a\n  // wavedash. This number could be tweaked if we find false negatives\n  const recentFrames = animations.slice(-8);\n  const recentAnimations = keyBy(recentFrames, (animation) => animation);\n\n  if (size(recentAnimations) === 2 && recentAnimations[State.AIR_DODGE]) {\n    // If the only other animation is air dodge, this might be really late to the point\n    // where it was actually an air dodge. Air dodge animation is really long\n    return;\n  }\n\n  if (recentAnimations[State.AIR_DODGE]) {\n    // If one of the recent animations was an air dodge, let's remove that from the\n    // air dodge counter, we don't want to count air dodges used to wavedash/land\n    counts.airDodgeCount -= 1;\n  }\n\n  if (recentAnimations[State.ACTION_KNEE_BEND]) {\n    // If a jump was started recently, we will consider this a wavedash\n    counts.wavedashCount += 1;\n  } else {\n    // If there was no jump recently, this is a waveland\n    counts.wavelandCount += 1;\n  }\n}\n\nfunction isWavedashInitiationAnimation(animation: State): boolean {\n  if (animation === State.AIR_DODGE) {\n    return true;\n  }\n\n  const isAboveMin = animation >= State.CONTROLLED_JUMP_START;\n  const isBelowMax = animation <= State.CONTROLLED_JUMP_END;\n  return isAboveMin && isBelowMax;\n}\n"],"names":["dashDanceAnimations","State","DASH","TURN","ActionsComputer","playerPermutations","Array","state","Map","setup","settings","getSinglesPlayerPermutationsFromSettings","forEach","indices","playerCounts","playerIndex","wavedashCount","wavelandCount","airDodgeCount","dashDanceCount","spotDodgeCount","ledgegrabCount","rollCount","lCancelCount","success","fail","attackCount","jab1","jab2","jab3","jabm","dash","ftilt","utilt","dtilt","fsmash","usmash","dsmash","nair","fair","bair","uair","dair","grabCount","throwCount","up","forward","back","down","groundTechCount","away","in","neutral","wallTechCount","playerState","animations","actionFrameCounters","set","processFrame","frame","get","handleActionCompute","fetch","from","values","map","val","isMissGroundTech","animation","TECH_MISS_DOWN","TECH_MISS_UP","isRolling","ROLL_BACKWARD","ROLL_FORWARD","isGrabAction","GRAB","THROW_DOWN","DASH_GRAB","isGrabbing","isAerialAttack","AERIAL_ATTACK_START","AERIAL_ATTACK_END","isForwardTilt","ATTACK_FTILT_START","ATTACK_FTILT_END","isForwardSmash","ATTACK_FSMASH_START","ATTACK_FSMASH_END","playerFrame","players","post","opponentFrame","opponentIndex","incrementCount","field","condition","current","currentAnimation","actionStateId","push","currentFrameCounter","actionStateCounter","last3Frames","slice","prevAnimation","length","prevFrameCounter","isNewAction","didDashDance","isEqual","SPOT_DODGE","AIR_DODGE","CLIFF_CATCH","ATTACK_DASH","ATTACK_JAB1","ATTACK_JAB2","ATTACK_JAB3","ATTACK_JABM","ATTACK_UTILT","ATTACK_DTILT","ATTACK_USMASH","ATTACK_DSMASH","AERIAL_NAIR","AERIAL_FAIR","AERIAL_BAIR","AERIAL_UAIR","AERIAL_DAIR","internalCharacterId","GNW_JAB1","GNW_JABM","GNW_DTILT","GNW_FSMASH","GNW_NAIR","GNW_BAIR","GNW_UAIR","PEACH_FSMASH1","PEACH_FSMASH2","PEACH_FSMASH3","THROW_UP","THROW_FORWARD","THROW_BACK","opponentDir","positionX","facingOpponent","facingDirection","FORWARD_TECH","BACKWARD_TECH","NEUTRAL_TECH","WALL_TECH","MISSED_WALL_TECH","lCancelStatus","handleActionWavedash","counts","last","isSpecialLanding","LANDING_FALL_SPECIAL","isAcceptablePrevious","isWavedashInitiationAnimation","isPossibleWavedash","recentFrames","recentAnimations","keyBy","size","ACTION_KNEE_BEND","isAboveMin","CONTROLLED_JUMP_START","isBelowMax","CONTROLLED_JUMP_END"],"mappings":"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"}