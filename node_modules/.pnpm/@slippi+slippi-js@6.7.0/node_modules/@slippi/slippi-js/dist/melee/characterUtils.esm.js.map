{"version":3,"file":"characterUtils.esm.js","sources":["../../src/melee/characterUtils.ts"],"sourcesContent":["import characters from \"./characters.json\";\n\nexport type CharacterColor = string;\nconst DEFAULT_COLOR: CharacterColor = \"Default\";\n\nexport interface CharacterInfo {\n  id: number;\n  name: string;\n  shortName: string;\n  colors: CharacterColor[];\n}\n\nexport const UnknownCharacter: CharacterInfo = {\n  id: -1,\n  name: \"Unknown Character\",\n  shortName: \"Unknown\",\n  colors: [DEFAULT_COLOR],\n};\n\ntype CharacterId = keyof typeof characters;\n\nfunction generateCharacterInfo(\n  id: number,\n  info?: {\n    name: string;\n    shortName?: string;\n    colors?: CharacterColor[];\n  },\n): CharacterInfo {\n  if (!info) {\n    return UnknownCharacter;\n  }\n\n  return {\n    id,\n    name: info.name,\n    shortName: info.shortName ?? info.name,\n    colors: [DEFAULT_COLOR, ...(info.colors ?? [])],\n  };\n}\n\nexport function getAllCharacters(): CharacterInfo[] {\n  return Object.entries(characters)\n    .map(([id, data]) => generateCharacterInfo(parseInt(id, 10), data))\n    .sort((a, b) => a.id - b.id);\n}\n\nexport function getCharacterInfo(externalCharacterId: number): CharacterInfo {\n  const data = characters[externalCharacterId.toString() as CharacterId];\n  return generateCharacterInfo(externalCharacterId, data);\n}\n\nexport function getCharacterShortName(externalCharacterId: number): string {\n  const character = getCharacterInfo(externalCharacterId);\n  return character.shortName;\n}\n\nexport function getCharacterName(externalCharacterId: number): string {\n  const character = getCharacterInfo(externalCharacterId);\n  return character.name;\n}\n\n// Return a human-readable color from a characterCode.\nexport function getCharacterColorName(externalCharacterId: number, characterColor: number): CharacterColor {\n  const character = getCharacterInfo(externalCharacterId);\n  const color = character.colors[characterColor];\n  if (color) {\n    return color;\n  }\n  return DEFAULT_COLOR;\n}\n"],"names":["DEFAULT_COLOR","UnknownCharacter","id","name","shortName","colors","generateCharacterInfo","info","getAllCharacters","Object","entries","characters","map","data","parseInt","sort","a","b","getCharacterInfo","externalCharacterId","toString","getCharacterShortName","character","getCharacterName","getCharacterColorName","characterColor","color"],"mappings":";;AAGA,MAAMA,aAAa,GAAmB,SAAtC;MASaC,gBAAgB,GAAkB;AAC7CC,EAAAA,EAAE,EAAE,CAAC,CADwC;AAE7CC,EAAAA,IAAI,EAAE,mBAFuC;AAG7CC,EAAAA,SAAS,EAAE,SAHkC;AAI7CC,EAAAA,MAAM,EAAE,CAACL,aAAD;AAJqC;;AAS/C,SAASM,qBAAT,CACEJ,EADF,EAEEK,IAFF;;;AAQE,MAAI,CAACA,IAAL,EAAW;AACT,WAAON,gBAAP;AACD;;AAED,SAAO;AACLC,IAAAA,EADK;AAELC,IAAAA,IAAI,EAAEI,IAAI,CAACJ,IAFN;AAGLC,IAAAA,SAAS,qBAAEG,IAAI,CAACH,SAAP,8BAAoBG,IAAI,CAACJ,IAH7B;AAILE,IAAAA,MAAM,EAAE,CAACL,aAAD,EAAgB,oBAAIO,IAAI,CAACF,MAAT,2BAAmB,EAAnB,CAAhB;AAJH,GAAP;AAMD;;SAEeG;AACd,SAAOC,MAAM,CAACC,OAAP,CAAeC,UAAf,EACJC,GADI,CACA,CAAC,CAACV,EAAD,EAAKW,IAAL,CAAD,KAAgBP,qBAAqB,CAACQ,QAAQ,CAACZ,EAAD,EAAK,EAAL,CAAT,EAAmBW,IAAnB,CADrC,EAEJE,IAFI,CAEC,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACd,EAAF,GAAOe,CAAC,CAACf,EAFpB,CAAP;AAGD;SAEegB,iBAAiBC;AAC/B,QAAMN,IAAI,GAAGF,UAAU,CAACQ,mBAAmB,CAACC,QAApB,EAAD,CAAvB;AACA,SAAOd,qBAAqB,CAACa,mBAAD,EAAsBN,IAAtB,CAA5B;AACD;SAEeQ,sBAAsBF;AACpC,QAAMG,SAAS,GAAGJ,gBAAgB,CAACC,mBAAD,CAAlC;AACA,SAAOG,SAAS,CAAClB,SAAjB;AACD;SAEemB,iBAAiBJ;AAC/B,QAAMG,SAAS,GAAGJ,gBAAgB,CAACC,mBAAD,CAAlC;AACA,SAAOG,SAAS,CAACnB,IAAjB;AACD;;SAGeqB,sBAAsBL,qBAA6BM;AACjE,QAAMH,SAAS,GAAGJ,gBAAgB,CAACC,mBAAD,CAAlC;AACA,QAAMO,KAAK,GAAGJ,SAAS,CAACjB,MAAV,CAAiBoB,cAAjB,CAAd;;AACA,MAAIC,KAAJ,EAAW;AACT,WAAOA,KAAP;AACD;;AACD,SAAO1B,aAAP;AACD;;;;"}