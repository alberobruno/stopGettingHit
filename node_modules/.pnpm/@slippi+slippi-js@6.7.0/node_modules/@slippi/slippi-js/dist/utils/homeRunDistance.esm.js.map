{"version":3,"file":"homeRunDistance.esm.js","sources":["../../src/utils/homeRunDistance.ts"],"sourcesContent":["import type { FrameEntryType, GameStartType } from \"../types\";\nimport { Language } from \"../types\";\nimport { exists } from \"./exists\";\n\nconst SANDBAG_INTERNAL_ID = 32;\n\nconst FEET_CONVERSION_FACTOR = 0.952462;\nconst METERS_CONVERSION_FACTOR = 1.04167;\n\ntype HomeRunDistanceUnits = \"feet\" | \"meters\";\n\nexport function positionToHomeRunDistance(distance: number, units: HomeRunDistanceUnits = \"feet\"): number {\n  let score = 0;\n  switch (units) {\n    case \"feet\":\n      score = 10 * Math.floor(distance - 70 * FEET_CONVERSION_FACTOR);\n      // convert to float32\n      score = Math.fround(score);\n      score = Math.floor((score / 30.4788) * 10) / 10;\n      break;\n    case \"meters\":\n      score = 10 * Math.floor(distance - 70 * METERS_CONVERSION_FACTOR);\n      // convert to float32\n      score = Math.fround(score);\n      score = Math.floor((score / 100) * 10) / 10;\n      break;\n    default:\n      throw new Error(`Unsupported units: ${units}`);\n  }\n\n  // round to 1 decimal\n  score = Math.round(score * 10) / 10;\n  return Math.max(0, score);\n}\n\nexport function extractDistanceInfoFromFrame(\n  settings: Pick<GameStartType, \"language\">,\n  lastFrame: Pick<FrameEntryType, \"players\">,\n): { distance: number; units: HomeRunDistanceUnits } | null {\n  const sandbagLastFrame = Object.values(lastFrame.players)\n    .filter(exists)\n    .find((playerFrame) => playerFrame.post.internalCharacterId === SANDBAG_INTERNAL_ID);\n\n  if (!sandbagLastFrame) {\n    return null;\n  }\n\n  // Only return the distance in meters if it's a Japanese replay.\n  // Technically we should check if the replay is PAL but we don't yet support\n  // stadium replays in PAL.\n  const units: HomeRunDistanceUnits = settings.language === Language.JAPANESE ? \"meters\" : \"feet\";\n  const distance = positionToHomeRunDistance(sandbagLastFrame.post.positionX ?? 0, units);\n  return {\n    distance,\n    units,\n  };\n}\n"],"names":["SANDBAG_INTERNAL_ID","FEET_CONVERSION_FACTOR","METERS_CONVERSION_FACTOR","positionToHomeRunDistance","distance","units","score","Math","floor","fround","Error","round","max","extractDistanceInfoFromFrame","settings","lastFrame","sandbagLastFrame","Object","values","players","filter","exists","find","playerFrame","post","internalCharacterId","language","Language","JAPANESE","positionX"],"mappings":";;;AAIA,MAAMA,mBAAmB,GAAG,EAA5B;AAEA,MAAMC,sBAAsB,GAAG,QAA/B;AACA,MAAMC,wBAAwB,GAAG,OAAjC;SAIgBC,0BAA0BC,UAAkBC,QAA8B;AACxF,MAAIC,KAAK,GAAG,CAAZ;;AACA,UAAQD,KAAR;AACE,SAAK,MAAL;AACEC,MAAAA,KAAK,GAAG,KAAKC,IAAI,CAACC,KAAL,CAAWJ,QAAQ,GAAG,KAAKH,sBAA3B,CAAb,CADF;;AAGEK,MAAAA,KAAK,GAAGC,IAAI,CAACE,MAAL,CAAYH,KAAZ,CAAR;AACAA,MAAAA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAYF,KAAK,GAAG,OAAT,GAAoB,EAA/B,IAAqC,EAA7C;AACA;;AACF,SAAK,QAAL;AACEA,MAAAA,KAAK,GAAG,KAAKC,IAAI,CAACC,KAAL,CAAWJ,QAAQ,GAAG,KAAKF,wBAA3B,CAAb,CADF;;AAGEI,MAAAA,KAAK,GAAGC,IAAI,CAACE,MAAL,CAAYH,KAAZ,CAAR;AACAA,MAAAA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAYF,KAAK,GAAG,GAAT,GAAgB,EAA3B,IAAiC,EAAzC;AACA;;AACF;AACE,YAAM,IAAII,KAAJ,uBAAgCL,OAAhC,CAAN;AAdJ;;;AAkBAC,EAAAA,KAAK,GAAGC,IAAI,CAACI,KAAL,CAAWL,KAAK,GAAG,EAAnB,IAAyB,EAAjC;AACA,SAAOC,IAAI,CAACK,GAAL,CAAS,CAAT,EAAYN,KAAZ,CAAP;AACD;SAEeO,6BACdC,UACAC;;;AAEA,QAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAcH,SAAS,CAACI,OAAxB,EACtBC,MADsB,CACfC,MADe,EAEtBC,IAFsB,CAEhBC,WAAD,IAAiBA,WAAW,CAACC,IAAZ,CAAiBC,mBAAjB,KAAyCzB,mBAFzC,CAAzB;;AAIA,MAAI,CAACgB,gBAAL,EAAuB;AACrB,WAAO,IAAP;AACD;AAGD;AACA;;;AACA,QAAMX,KAAK,GAAyBS,QAAQ,CAACY,QAAT,KAAsBC,QAAQ,CAACC,QAA/B,GAA0C,QAA1C,GAAqD,MAAzF;AACA,QAAMxB,QAAQ,GAAGD,yBAAyB,0BAACa,gBAAgB,CAACQ,IAAjB,CAAsBK,SAAvB,oCAAoC,CAApC,EAAuCxB,KAAvC,CAA1C;AACA,SAAO;AACLD,IAAAA,QADK;AAELC,IAAAA;AAFK,GAAP;AAID;;;;"}