{"version":3,"file":"getWinners.esm.js","sources":["../../src/utils/getWinners.ts"],"sourcesContent":["import type { GameEndType, GameStartType, PlacementType, PostFrameUpdateType } from \"../types\";\nimport { GameEndMethod } from \"../types\";\nimport { exists } from \"./exists\";\n\nexport function getWinners(\n  gameEnd: GameEndType,\n  settings: Pick<GameStartType, \"players\" | \"isTeams\">,\n  finalPostFrameUpdates: PostFrameUpdateType[],\n): PlacementType[] {\n  const { placements, gameEndMethod, lrasInitiatorIndex } = gameEnd;\n  const { players, isTeams } = settings;\n\n  if (gameEndMethod === GameEndMethod.NO_CONTEST || gameEndMethod === GameEndMethod.UNRESOLVED) {\n    // The winner is the person who didn't LRAS\n    if (exists(lrasInitiatorIndex) && players.length === 2) {\n      const winnerIndex = players.find(({ playerIndex }) => playerIndex !== lrasInitiatorIndex)?.playerIndex;\n      if (exists(winnerIndex)) {\n        return [\n          {\n            playerIndex: winnerIndex,\n            position: 0,\n          },\n        ];\n      }\n    }\n\n    return [];\n  }\n\n  if (gameEndMethod === GameEndMethod.TIME && players.length === 2) {\n    const nonFollowerUpdates = finalPostFrameUpdates.filter((pfu) => !pfu.isFollower);\n    if (nonFollowerUpdates.length !== players.length) {\n      return [];\n    }\n\n    const p1 = nonFollowerUpdates[0]!;\n    const p2 = nonFollowerUpdates[1]!;\n    if (p1.stocksRemaining! > p2.stocksRemaining!) {\n      return [{ playerIndex: p1.playerIndex!, position: 0 }];\n    } else if (p2.stocksRemaining! > p1.stocksRemaining!) {\n      return [{ playerIndex: p2.playerIndex!, position: 0 }];\n    }\n\n    const p1Health = Math.trunc(p1.percent!);\n    const p2Health = Math.trunc(p2.percent!);\n    if (p1Health < p2Health) {\n      return [{ playerIndex: p1.playerIndex!, position: 0 }];\n    } else if (p2Health < p1Health) {\n      return [{ playerIndex: p2.playerIndex!, position: 0 }];\n    }\n\n    // If stocks and percents were tied, no winner\n    return [];\n  }\n\n  const firstPosition = placements.find((placement) => placement.position === 0);\n  if (!firstPosition) {\n    return [];\n  }\n\n  const winningTeam = players.find(({ playerIndex }) => playerIndex === firstPosition.playerIndex)?.teamId ?? null;\n  if (isTeams && exists(winningTeam)) {\n    return placements.filter((placement) => {\n      const teamId = players.find(({ playerIndex }) => playerIndex === placement.playerIndex)?.teamId ?? null;\n      return teamId === winningTeam;\n    });\n  }\n\n  return [firstPosition];\n}\n"],"names":["getWinners","gameEnd","settings","finalPostFrameUpdates","placements","gameEndMethod","lrasInitiatorIndex","players","isTeams","GameEndMethod","NO_CONTEST","UNRESOLVED","exists","length","winnerIndex","find","playerIndex","position","TIME","nonFollowerUpdates","filter","pfu","isFollower","p1","p2","stocksRemaining","p1Health","Math","trunc","percent","p2Health","firstPosition","placement","winningTeam","teamId"],"mappings":"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"}