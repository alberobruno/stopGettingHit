{"version":3,"file":"slpFileWriter.esm.js","sources":["../../src/utils/slpFileWriter.ts"],"sourcesContent":["import { format } from \"date-fns\";\nimport path from \"path\";\nimport type { WritableOptions } from \"stream\";\n\nimport { Command } from \"../types\";\nimport { SlpFile } from \"./slpFile\";\nimport type { SlpRawEventPayload, SlpStreamSettings } from \"./slpStream\";\nimport { SlpStream, SlpStreamEvent } from \"./slpStream\";\n\n/**\n * The default function to use for generating new SLP files.\n */\nfunction getNewFilePath(folder: string, date: Date): string {\n  return path.join(folder, `Game_${format(date, \"yyyyMMdd\")}T${format(date, \"HHmmss\")}.slp`);\n}\n\nexport interface SlpFileWriterOptions extends Partial<SlpStreamSettings> {\n  outputFiles: boolean;\n  folderPath: string;\n  consoleNickname: string;\n  newFilename: (folder: string, startTime: Date) => string;\n}\n\nconst defaultSettings: SlpFileWriterOptions = {\n  outputFiles: true,\n  folderPath: \".\",\n  consoleNickname: \"unknown\",\n  newFilename: getNewFilePath,\n};\n\nexport enum SlpFileWriterEvent {\n  NEW_FILE = \"new-file\",\n  FILE_COMPLETE = \"file-complete\",\n}\n\n/**\n * SlpFileWriter lets us not only emit events as an SlpStream but also\n * writes the data that is being passed in to an SLP file. Use this if\n * you want to process Slippi data in real time but also want to be able\n * to write out the data to an SLP file.\n *\n * @export\n * @class SlpFileWriter\n * @extends {SlpStream}\n */\nexport class SlpFileWriter extends SlpStream {\n  private currentFile: SlpFile | null = null;\n  private options: SlpFileWriterOptions;\n\n  /**\n   * Creates an instance of SlpFileWriter.\n   */\n  public constructor(options?: Partial<SlpFileWriterOptions>, opts?: WritableOptions) {\n    super(options, opts);\n    this.options = Object.assign({}, defaultSettings, options);\n    this._setupListeners();\n  }\n\n  private _writePayload(payload: Buffer): void {\n    // Write data to the current file\n    if (this.currentFile) {\n      this.currentFile.write(payload);\n    }\n  }\n\n  private _setupListeners(): void {\n    this.on(SlpStreamEvent.RAW, (data: SlpRawEventPayload) => {\n      const { command, payload } = data;\n      switch (command) {\n        case Command.MESSAGE_SIZES:\n          // Create the new game first before writing the payload\n          this._handleNewGame();\n          this._writePayload(payload);\n          break;\n        case Command.GAME_END:\n          // Write payload first before ending the game\n          this._writePayload(payload);\n          this._handleEndGame();\n          break;\n        default:\n          this._writePayload(payload);\n          break;\n      }\n    });\n  }\n\n  /**\n   * Return the name of the SLP file currently being written or null if\n   * no file is being written to currently.\n   *\n   * @returns {(string | null)}\n   * @memberof SlpFileWriter\n   */\n  public getCurrentFilename(): string | null {\n    if (this.currentFile !== null) {\n      return path.resolve(this.currentFile.path());\n    }\n    return null;\n  }\n\n  /**\n   * Ends the current file being written to.\n   *\n   * @returns {(string | null)}\n   * @memberof SlpFileWriter\n   */\n  public endCurrentFile(): void {\n    this._handleEndGame();\n  }\n\n  /**\n   * Updates the settings to be the desired ones passed in.\n   *\n   * @param {Partial<SlpFileWriterOptions>} settings\n   * @memberof SlpFileWriter\n   */\n  public updateSettings(settings: Partial<SlpFileWriterOptions>): void {\n    this.options = Object.assign({}, this.options, settings);\n  }\n\n  private _handleNewGame(): void {\n    // Only create a new file if we're outputting files\n    if (this.options.outputFiles) {\n      const filePath = this.options.newFilename(this.options.folderPath, new Date());\n      this.currentFile = new SlpFile(filePath, this);\n      // console.log(`Creating new file at: ${filePath}`);\n      this.emit(SlpFileWriterEvent.NEW_FILE, filePath);\n    }\n  }\n\n  private _handleEndGame(): void {\n    // End the stream\n    if (this.currentFile) {\n      // Set the console nickname\n      this.currentFile.setMetadata({\n        consoleNickname: this.options.consoleNickname,\n      });\n      this.currentFile.end();\n\n      // console.log(`Finished writing file: ${this.currentFile.path()}`);\n      this.emit(SlpFileWriterEvent.FILE_COMPLETE, this.currentFile.path());\n\n      // Clear current file\n      this.currentFile = null;\n    }\n  }\n}\n"],"names":["getNewFilePath","folder","date","path","join","format","defaultSettings","outputFiles","folderPath","consoleNickname","newFilename","SlpFileWriterEvent","SlpFileWriter","SlpStream","constructor","options","opts","currentFile","Object","assign","_setupListeners","_writePayload","payload","write","on","SlpStreamEvent","RAW","data","command","Command","MESSAGE_SIZES","_handleNewGame","GAME_END","_handleEndGame","getCurrentFilename","resolve","endCurrentFile","updateSettings","settings","filePath","Date","SlpFile","emit","NEW_FILE","setMetadata","end","FILE_COMPLETE"],"mappings":"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"}