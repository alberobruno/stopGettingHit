{"version":3,"file":"rollbackCounter.esm.js","sources":["../../src/utils/rollbackCounter.ts"],"sourcesContent":["import type { FrameEntryType, RollbackFramesType } from \"../types\";\n\nexport class RollbackCounter {\n  private rollbackFrames: RollbackFramesType = {};\n  private rollbackFrameCount = 0;\n  private rollbackPlayerIdx: number | null = null; // for keeping track of rollbacks by following a single player\n  private lastFrameWasRollback = false;\n  private currentRollbackLength = 0;\n  private rollbackLengths: number[] = [];\n\n  public checkIfRollbackFrame(currentFrame: FrameEntryType | undefined, playerIdx: number) {\n    if (this.rollbackPlayerIdx === null) {\n      // we only want to follow a single player to avoid double counting. So we use whoever is on first.\n      this.rollbackPlayerIdx = playerIdx;\n    } else if (this.rollbackPlayerIdx !== playerIdx) {\n      return;\n    }\n\n    if (currentFrame && currentFrame.players) {\n      // frame already exists for currentFrameNumber so we must be rolling back\n      // Note: We detect during PreFrameUpdate, but new versions have a\n      // FrameStart command that has already initialized the frame, so we must\n      // check for player data too.\n      if (this.rollbackFrames[currentFrame.frame]) {\n        this.rollbackFrames[currentFrame.frame]!.push(currentFrame);\n      } else {\n        this.rollbackFrames[currentFrame.frame] = [currentFrame];\n      }\n      this.rollbackFrameCount++;\n      this.currentRollbackLength++;\n      this.lastFrameWasRollback = true;\n    } else if (this.lastFrameWasRollback) {\n      this.rollbackLengths.push(this.currentRollbackLength);\n      this.currentRollbackLength = 0;\n      this.lastFrameWasRollback = false;\n    }\n    return this.lastFrameWasRollback;\n  }\n\n  public getFrames() {\n    return this.rollbackFrames;\n  }\n\n  public getCount() {\n    return this.rollbackFrameCount;\n  }\n\n  public getLengths() {\n    return this.rollbackLengths;\n  }\n}\n"],"names":["RollbackCounter","rollbackFrames","rollbackFrameCount","rollbackPlayerIdx","lastFrameWasRollback","currentRollbackLength","rollbackLengths","checkIfRollbackFrame","currentFrame","playerIdx","players","frame","push","getFrames","getCount","getLengths"],"mappings":"MAEaA;;SACHC,iBAAqC;SACrCC,qBAAqB;SACrBC,oBAAmC;SACnCC,uBAAuB;SACvBC,wBAAwB;SACxBC,kBAA4B;;;AAE7BC,EAAAA,oBAAoB,CAACC,YAAD,EAA2CC,SAA3C;AACzB,QAAI,KAAKN,iBAAL,KAA2B,IAA/B,EAAqC;AACnC;AACA,WAAKA,iBAAL,GAAyBM,SAAzB;AACD,KAHD,MAGO,IAAI,KAAKN,iBAAL,KAA2BM,SAA/B,EAA0C;AAC/C;AACD;;AAED,QAAID,YAAY,IAAIA,YAAY,CAACE,OAAjC,EAA0C;AACxC;AACA;AACA;AACA;AACA,UAAI,KAAKT,cAAL,CAAoBO,YAAY,CAACG,KAAjC,CAAJ,EAA6C;AAC3C,aAAKV,cAAL,CAAoBO,YAAY,CAACG,KAAjC,EAAyCC,IAAzC,CAA8CJ,YAA9C;AACD,OAFD,MAEO;AACL,aAAKP,cAAL,CAAoBO,YAAY,CAACG,KAAjC,IAA0C,CAACH,YAAD,CAA1C;AACD;;AACD,WAAKN,kBAAL;AACA,WAAKG,qBAAL;AACA,WAAKD,oBAAL,GAA4B,IAA5B;AACD,KAbD,MAaO,IAAI,KAAKA,oBAAT,EAA+B;AACpC,WAAKE,eAAL,CAAqBM,IAArB,CAA0B,KAAKP,qBAA/B;AACA,WAAKA,qBAAL,GAA6B,CAA7B;AACA,WAAKD,oBAAL,GAA4B,KAA5B;AACD;;AACD,WAAO,KAAKA,oBAAZ;AACD;;AAEMS,EAAAA,SAAS;AACd,WAAO,KAAKZ,cAAZ;AACD;;AAEMa,EAAAA,QAAQ;AACb,WAAO,KAAKZ,kBAAZ;AACD;;AAEMa,EAAAA,UAAU;AACf,WAAO,KAAKT,eAAZ;AACD;;;;;;"}