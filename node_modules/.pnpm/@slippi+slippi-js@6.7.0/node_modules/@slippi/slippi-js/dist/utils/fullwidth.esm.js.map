{"version":3,"file":"fullwidth.esm.js","sources":["../../src/utils/fullwidth.ts"],"sourcesContent":["import { map } from \"lodash\";\n\nexport function toHalfwidth(str: string): string {\n  // Converts a fullwidth character to halfwidth\n  const convertChar = (charCode: number): number => {\n    /**\n     * Standard full width encodings\n     * https://en.wikipedia.org/wiki/Halfwidth_and_Fullwidth_Forms_(Unicode_block)\n     */\n    if (charCode > 0xff00 && charCode < 0xff5f) {\n      return 0x0020 + (charCode - 0xff00);\n    }\n\n    // space:\n    if (charCode === 0x3000) {\n      return 0x0020;\n    }\n\n    /**\n     * Exceptions found in Melee/Japanese keyboards\n     */\n    // single quote: '\n    if (charCode === 0x2019) {\n      return 0x0027;\n    }\n\n    // double quote: \"\n    if (charCode === 0x201d) {\n      return 0x0022;\n    }\n\n    return charCode;\n  };\n\n  const ret = map(str, (char) => convertChar(char.charCodeAt(0)));\n\n  return String.fromCharCode(...ret);\n}\n"],"names":["toHalfwidth","str","convertChar","charCode","ret","map","char","charCodeAt","String","fromCharCode"],"mappings":";;SAEgBA,YAAYC;AAC1B;AACA,QAAMC,WAAW,GAAIC,QAAD;AAClB;;;;AAIA,QAAIA,QAAQ,GAAG,MAAX,IAAqBA,QAAQ,GAAG,MAApC,EAA4C;AAC1C,aAAO,UAAUA,QAAQ,GAAG,MAArB,CAAP;AACD;;;AAGD,QAAIA,QAAQ,KAAK,MAAjB,EAAyB;AACvB,aAAO,MAAP;AACD;AAED;;;AAGA;;;AACA,QAAIA,QAAQ,KAAK,MAAjB,EAAyB;AACvB,aAAO,MAAP;AACD;;;AAGD,QAAIA,QAAQ,KAAK,MAAjB,EAAyB;AACvB,aAAO,MAAP;AACD;;AAED,WAAOA,QAAP;AACD,GA5BD;;AA8BA,QAAMC,GAAG,GAAGC,GAAG,CAACJ,GAAD,EAAOK,IAAD,IAAUJ,WAAW,CAACI,IAAI,CAACC,UAAL,CAAgB,CAAhB,CAAD,CAA3B,CAAf;AAEA,SAAOC,MAAM,CAACC,YAAP,CAAoB,GAAGL,GAAvB,CAAP;AACD;;;;"}