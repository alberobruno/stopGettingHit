/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var iconsReact = require('@carbon/icons-react');
var cx = require('classnames');
var PropTypes = require('prop-types');
var React = require('react');
var usePrefix = require('../../internal/usePrefix.js');
require('../FluidForm/FluidForm.js');
var FormContext = require('../FluidForm/FormContext.js');
var setupGetInstanceId = require('../../tools/setupGetInstanceId.js');
require('../Text/index.js');
var Text = require('../Text/Text.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const getInstanceId = setupGetInstanceId["default"]();
const DatePickerInput = /*#__PURE__*/React__default["default"].forwardRef(function DatePickerInput(props, ref) {
  const {
    datePickerType,
    disabled = false,
    helperText,
    hideLabel,
    id,
    invalid = false,
    invalidText,
    labelText,
    onClick = () => {},
    onChange = () => {},
    pattern = '\\d{1,2}\\/\\d{1,2}\\/\\d{4}',
    placeholder,
    size = 'md',
    type = 'text',
    warn,
    warnText,
    ...rest
  } = props;
  const prefix = usePrefix.usePrefix();
  const {
    isFluid
  } = React.useContext(FormContext.FormContext);
  const datePickerInputInstanceId = getInstanceId();
  const datePickerInputProps = {
    id,
    onChange: event => {
      if (!disabled) {
        onChange(event);
      }
    },
    onClick: event => {
      if (!disabled) {
        onClick(event);
      }
    },
    pattern,
    placeholder,
    type
  };
  const wrapperClasses = cx__default["default"](`${prefix}--date-picker-input__wrapper`, {
    [`${prefix}--date-picker-input__wrapper--invalid`]: invalid,
    [`${prefix}--date-picker-input__wrapper--warn`]: warn
  });
  const labelClasses = cx__default["default"](`${prefix}--label`, {
    [`${prefix}--visually-hidden`]: hideLabel,
    [`${prefix}--label--disabled`]: disabled,
    [`${prefix}--label--readonly`]: rest.readOnly
  });
  const helperTextClasses = cx__default["default"](`${prefix}--form__helper-text`, {
    [`${prefix}--form__helper-text--disabled`]: disabled
  });
  const inputClasses = cx__default["default"](`${prefix}--date-picker__input`, {
    [`${prefix}--date-picker__input--${size}`]: size,
    [`${prefix}--date-picker__input--invalid`]: invalid,
    [`${prefix}--date-picker__input--warn`]: warn
  });
  const containerClasses = cx__default["default"](`${prefix}--date-picker-container`, {
    [`${prefix}--date-picker--nolabel`]: !labelText,
    [`${prefix}--date-picker--fluid--invalid`]: isFluid && invalid,
    [`${prefix}--date-picker--fluid--warn`]: isFluid && warn
  });
  const datePickerInputHelperId = !helperText ? undefined : `detepicker-input-helper-text-${datePickerInputInstanceId}`;
  const inputProps = {
    ...rest,
    ...datePickerInputProps,
    className: inputClasses,
    disabled,
    ref,
    ['aria-describedby']: helperText ? datePickerInputHelperId : undefined
  };
  if (invalid) {
    inputProps['data-invalid'] = true;
  }
  const input = /*#__PURE__*/React__default["default"].createElement("input", inputProps);
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: containerClasses
  }, labelText && /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    as: "label",
    htmlFor: id,
    className: labelClasses
  }, labelText), /*#__PURE__*/React__default["default"].createElement("div", {
    className: wrapperClasses
  }, /*#__PURE__*/React__default["default"].createElement("span", null, input, isFluid && /*#__PURE__*/React__default["default"].createElement(DatePickerIcon, {
    datePickerType: datePickerType
  }), /*#__PURE__*/React__default["default"].createElement(DatePickerIcon, {
    datePickerType: datePickerType,
    invalid: invalid,
    warn: warn
  }))), invalid && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, isFluid && /*#__PURE__*/React__default["default"].createElement("hr", {
    className: `${prefix}--date-picker__divider`
  }), /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    as: "div",
    className: `${prefix}--form-requirement`
  }, invalidText)), warn && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, isFluid && /*#__PURE__*/React__default["default"].createElement("hr", {
    className: `${prefix}--date-picker__divider`
  }), /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    as: "div",
    className: `${prefix}--form-requirement`
  }, warnText)), helperText && !invalid && /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    as: "div",
    id: datePickerInputHelperId,
    className: helperTextClasses
  }, helperText));
});
DatePickerInput.propTypes = {
  /**
   * The type of the date picker:
   *
   * * `simple` - Without calendar dropdown.
   * * `single` - With calendar dropdown and single date.
   * * `range` - With calendar dropdown and a date range.
   */
  datePickerType: PropTypes__default["default"].oneOf(['simple', 'single', 'range']),
  /**
   * Specify whether or not the input should be disabled
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * Provide text that is used alongside the control label for additional help
   */
  helperText: PropTypes__default["default"].node,
  /**
   * Specify if the label should be hidden
   */
  hideLabel: PropTypes__default["default"].bool,
  /**
   * Specify an id that uniquely identifies the `<input>`
   */
  id: PropTypes__default["default"].string.isRequired,
  /**
   * Specify whether or not the input should be invalid
   */
  invalid: PropTypes__default["default"].bool,
  /**
   * Specify the text to be rendered when the input is invalid
   */
  invalidText: PropTypes__default["default"].node,
  /**
   * Provide the text that will be read by a screen reader when visiting this
   * control
   */
  labelText: PropTypes__default["default"].node.isRequired,
  /**
   * Specify an `onChange` handler that is called whenever a change in the
   * input field has occurred
   */
  onChange: PropTypes__default["default"].func,
  /**
   * Provide a function to be called when the input field is clicked
   */
  onClick: PropTypes__default["default"].func,
  /**
   * Provide a regular expression that the input value must match
   */
  pattern: (props, propName, componentName) => {
    if (props[propName] === undefined) {
      return;
    }
    try {
      new RegExp(props[propName]);
    } catch (e) {
      return new Error(`Invalid value of prop '${propName}' supplied to '${componentName}', it should be a valid regular expression`);
    }
  },
  /**
   * Specify the placeholder text
   */
  placeholder: PropTypes__default["default"].string,
  /**
   * whether the DatePicker is to be readOnly
   */
  readOnly: PropTypes__default["default"].bool,
  /**
   * Specify the size of the Date Picker Input. Currently supports either `sm`, `md`, or `lg` as an option.
   */
  size: PropTypes__default["default"].oneOf(['sm', 'md', 'lg']),
  /**
   * Specify the type of the `<input>`
   */
  type: PropTypes__default["default"].string,
  /**
   * Specify whether the control is currently in warning state
   */
  warn: PropTypes__default["default"].bool,
  /**
   * Provide the text that is displayed when the control is in warning state
   */
  warnText: PropTypes__default["default"].node
};
function DatePickerIcon(_ref) {
  let {
    datePickerType,
    invalid,
    warn
  } = _ref;
  const prefix = usePrefix.usePrefix();
  const {
    isFluid
  } = React.useContext(FormContext.FormContext);
  if (datePickerType === 'simple' && !invalid && !warn) {
    if (!isFluid) {
      return null;
    }
  }
  if (invalid) {
    return /*#__PURE__*/React__default["default"].createElement(iconsReact.WarningFilled, {
      className: `${prefix}--date-picker__icon ${prefix}--date-picker__icon--invalid`
    });
  }
  if (!invalid && warn) {
    return /*#__PURE__*/React__default["default"].createElement(iconsReact.WarningAltFilled, {
      className: `${prefix}--date-picker__icon ${prefix}--date-picker__icon--warn`
    });
  }
  return /*#__PURE__*/React__default["default"].createElement(iconsReact.Calendar, {
    className: `${prefix}--date-picker__icon`,
    role: "img",
    "aria-hidden": "true"
  });
}
DatePickerIcon.propTypes = {
  /**
   * The type of the date picker:
   *
   * * `simple` - Without calendar dropdown.
   * * `single` - With calendar dropdown and single date.
   * * `range` - With calendar dropdown and a date range.
   */
  datePickerType: PropTypes__default["default"].oneOf(['simple', 'single', 'range']),
  /**
   * Specify whether or not the input should be invalid
   */
  invalid: PropTypes__default["default"].bool,
  /**
   * Specify whether the control is currently in warning state
   */
  warn: PropTypes__default["default"].bool
};

exports["default"] = DatePickerInput;
