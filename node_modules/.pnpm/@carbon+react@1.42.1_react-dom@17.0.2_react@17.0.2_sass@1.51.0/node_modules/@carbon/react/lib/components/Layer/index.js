/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var PropTypes = require('prop-types');
var cx = require('classnames');
var usePrefix = require('../../internal/usePrefix.js');
var LayerContext = require('./LayerContext.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

const levels = ['one', 'two', 'three'];
const MAX_LEVEL = levels.length - 1;

/**
 * A custom hook that will return information about the current layer. A common
 * field to pull from this is the `level` for the layer that the component that
 * calls this hook is currently in
 */
function useLayer() {
  const level = React__default["default"].useContext(LayerContext.LayerContext);
  return {
    level
  };
}
const Layer = /*#__PURE__*/React__default["default"].forwardRef(function Layer(_ref, ref) {
  let {
    as: BaseComponent = 'div',
    className: customClassName,
    children,
    level: overrideLevel,
    ...rest
  } = _ref;
  const contextLevel = React__default["default"].useContext(LayerContext.LayerContext);
  const level = overrideLevel ?? contextLevel;
  const prefix = usePrefix.usePrefix();
  const className = cx__default["default"](`${prefix}--layer-${levels[level]}`, customClassName);
  // The level should be between 0 and MAX_LEVEL
  const value = Math.max(0, Math.min(level + 1, MAX_LEVEL));
  return /*#__PURE__*/React__default["default"].createElement(LayerContext.LayerContext.Provider, {
    value: value
  }, /*#__PURE__*/React__default["default"].createElement(BaseComponent, _rollupPluginBabelHelpers["extends"]({
    ref: ref
  }, rest, {
    className: className
  }), children));
});
Layer.propTypes = {
  /**
   * Specify a custom component or element to be rendered as the top-level
   * element in the component
   */
  as: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].string, PropTypes__default["default"].elementType]),
  /**
   * Provide child elements to be rendered inside of `Theme`
   */
  children: PropTypes__default["default"].node,
  /**
   * Provide a custom class name to be used on the outermost element rendered by
   * the component
   */
  className: PropTypes__default["default"].string,
  /**
   * Specify the layer level and override any existing levels based on hierarchy
   */
  level: PropTypes__default["default"].oneOf([0, 1, 2])
};

exports.Layer = Layer;
exports.useLayer = useLayer;
