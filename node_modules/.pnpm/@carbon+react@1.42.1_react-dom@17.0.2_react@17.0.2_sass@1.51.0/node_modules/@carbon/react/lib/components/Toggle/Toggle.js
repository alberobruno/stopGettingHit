/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var PropTypes = require('prop-types');
var cx = require('classnames');
var useControllableState = require('../../internal/useControllableState.js');
var usePrefix = require('../../internal/usePrefix.js');
require('../Text/index.js');
var Text = require('../Text/Text.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var _path;
function Toggle(_ref) {
  let {
    'aria-labelledby': ariaLabelledby,
    className,
    defaultToggled = false,
    disabled = false,
    hideLabel = false,
    id,
    labelA = 'Off',
    labelB = 'On',
    labelText,
    onClick,
    onToggle,
    readOnly,
    size = 'md',
    toggled,
    ...other
  } = _ref;
  const prefix = usePrefix.usePrefix();
  const buttonElement = React.useRef(null);
  const [checked, setChecked] = useControllableState.useControllableState({
    value: toggled,
    onChange: onToggle,
    defaultValue: defaultToggled
  });
  function handleClick(e) {
    if (!readOnly) {
      setChecked(!checked);
    }
    if (onClick) {
      onClick(e);
    }
  }
  const isSm = size === 'sm';
  const sideLabel = hideLabel ? labelText : checked ? labelB : labelA;
  const renderSideLabel = !(hideLabel && !labelText);
  const LabelComponent = labelText ? 'label' : 'div';
  const wrapperClasses = cx__default["default"](`${prefix}--toggle`, {
    [`${prefix}--toggle--disabled`]: disabled,
    [`${prefix}--toggle--readonly`]: readOnly
  }, className);
  const labelTextClasses = cx__default["default"](`${prefix}--toggle__label-text`, {
    [`${prefix}--visually-hidden`]: hideLabel
  });
  const appearanceClasses = cx__default["default"](`${prefix}--toggle__appearance`, {
    [`${prefix}--toggle__appearance--sm`]: isSm
  });
  const switchClasses = cx__default["default"](`${prefix}--toggle__switch`, {
    [`${prefix}--toggle__switch--checked`]: checked
  });
  return (
    /*#__PURE__*/
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions
    React__default["default"].createElement("div", {
      className: wrapperClasses,
      onClick: !labelText ? e => {
        // the underlying <button> can only be activated by keyboard as it is visually hidden;
        // therefore, if this event's target is the <button>, it had to be triggered by
        // the keyboard event which already calls handleClick. if we wouldn't catch this, the
        // onClick and onToggle functions would be called twice whenever the user activates the
        // toggle by keyboard and props['aria-labelledby'] is passed.
        if (buttonElement.current && e.target !== buttonElement.current && !disabled) {
          handleClick(e);
          buttonElement.current.focus();
        }
      } : undefined
    }, /*#__PURE__*/React__default["default"].createElement("button", _rollupPluginBabelHelpers["extends"]({}, other, {
      ref: buttonElement,
      id: id,
      className: `${prefix}--toggle__button`,
      role: "switch",
      type: "button",
      "aria-checked": checked,
      "aria-labelledby": id,
      disabled: disabled,
      onClick: handleClick
    })), /*#__PURE__*/React__default["default"].createElement(LabelComponent, {
      htmlFor: ariaLabelledby ? undefined : id,
      className: `${prefix}--toggle__label`
    }, labelText && /*#__PURE__*/React__default["default"].createElement(Text.Text, {
      className: labelTextClasses
    }, labelText), /*#__PURE__*/React__default["default"].createElement("div", {
      className: appearanceClasses
    }, /*#__PURE__*/React__default["default"].createElement("div", {
      className: switchClasses
    }, isSm && /*#__PURE__*/React__default["default"].createElement("svg", {
      className: `${prefix}--toggle__check`,
      width: "6px",
      height: "5px",
      viewBox: "0 0 6 5"
    }, _path || (_path = /*#__PURE__*/React__default["default"].createElement("path", {
      d: "M2.2 2.7L5 0 6 1 2.2 5 0 2.7 1 1.5z"
    })))), renderSideLabel && /*#__PURE__*/React__default["default"].createElement(Text.Text, {
      className: `${prefix}--toggle__text`,
      "aria-hidden": "true"
    }, sideLabel))))
  );
}
Toggle.propTypes = {
  /**
   * Specify another element's id to be used as the label for this toggle
   */
  'aria-labelledby': PropTypes__default["default"].string,
  /**
   * Specify a custom className to apply to the form-item node
   */
  className: PropTypes__default["default"].string,
  /**
   * Specify whether the toggle should be on by default
   */
  defaultToggled: PropTypes__default["default"].bool,
  /**
   * Whether this control should be disabled
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * If true, the side labels (props.labelA and props.labelB) will be replaced by
   * props.labelText (if passed), so that the toggle doesn't render a top label.
   */
  hideLabel: PropTypes__default["default"].bool,
  /**
   * Provide an id that unique represents the underlying `<button>`
   */
  id: PropTypes__default["default"].string.isRequired,
  /**
   * Specify the label for the "off" position
   */
  labelA: PropTypes__default["default"].node,
  /**
   * Specify the label for the "on" position
   */
  labelB: PropTypes__default["default"].node,
  /**
   * Provide the text that will be read by a screen reader when visiting this
   * control. This should be provided unless 'aria-labelledby' is set instead
   * or you use an external <label> element with its "for" attribute set to the
   * toggle's id.
   */
  labelText: PropTypes__default["default"].string,
  /**
   * Provide an event listener that is called when the control is clicked
   */
  onClick: PropTypes__default["default"].func,
  /**
   * Provide an event listener that is called when the control is toggled
   */
  onToggle: PropTypes__default["default"].func,
  /**
   * Whether the toggle should be read-only
   */
  readOnly: PropTypes__default["default"].bool,
  /**
   * Specify the size of the Toggle. Currently only supports 'sm' or 'md' (default)
   */
  size: PropTypes__default["default"].oneOf(['sm', 'md']),
  /**
   * Specify whether the control is toggled
   */
  toggled: PropTypes__default["default"].bool
};

exports.Toggle = Toggle;
exports["default"] = Toggle;
