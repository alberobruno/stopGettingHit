/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import { type ComponentProps } from 'react';
import PropTypes from 'prop-types';
type HeaderMenuButtonBaseProps = Omit<ComponentProps<'button'>, 'title' | 'type'>;
export interface HeaderMenuButtonProps extends HeaderMenuButtonBaseProps {
    'aria-label'?: string;
    'aria-labelledby'?: string;
    className?: string;
    renderMenuIcon?: JSX.Element;
    renderCloseIcon?: JSX.Element;
    isActive?: boolean;
    isCollapsible?: boolean;
}
declare function HeaderMenuButton({ 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledBy, className: customClassName, renderMenuIcon, renderCloseIcon, isActive, isCollapsible, ...rest }: HeaderMenuButtonProps): JSX.Element;
declare namespace HeaderMenuButton {
    var propTypes: {
        /**
         * Optionally provide a custom class name that is applied to the underlying
         * button
         */
        className: PropTypes.Requireable<string>;
        /**
         * Specify whether the menu button is "active".
         */
        isActive: PropTypes.Requireable<boolean>;
        /**
         * Specify whether the menu button is collapsible.
         */
        isCollapsible: PropTypes.Requireable<boolean>;
        /**
         * Optionally provide an onClick handler that is called when the underlying
         * button fires it's onclick event
         */
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        0: string;
        length: 1;
        toString(): string;
        toLocaleString(): string;
        pop(): string | undefined;
        push(...items: string[]): number;
        concat(...items: ConcatArray<string>[]): string[];
        concat(...items: (string | ConcatArray<string>)[]): string[];
        join(separator?: string | undefined): string;
        reverse(): string[];
        shift(): string | undefined;
        slice(start?: number | undefined, end?: number | undefined): string[];
        sort(compareFn?: ((a: string, b: string) => number) | undefined): [key: string];
        splice(start: number, deleteCount?: number | undefined): string[];
        splice(start: number, deleteCount: number, ...items: string[]): string[];
        unshift(...items: string[]): number;
        indexOf(searchElement: string, fromIndex?: number | undefined): number;
        lastIndexOf(searchElement: string, fromIndex?: number | undefined): number;
        every<S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any): U[];
        filter<S_1 extends string>(predicate: (value: string, index: number, array: string[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[];
        reduce(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string;
        reduce(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string;
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: string, currentIndex: number, array: string[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string;
        reduceRight(callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string;
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: string, currentIndex: number, array: string[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends string>(predicate: (this: void, value: string, index: number, obj: string[]) => value is S_2, thisArg?: any): S_2 | undefined;
        find(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string | undefined;
        findIndex(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): number;
        fill(value: string, start?: number | undefined, end?: number | undefined): [key: string];
        copyWithin(target: number, start: number, end?: number | undefined): [key: string];
        entries(): IterableIterator<[number, string]>;
        keys(): IterableIterator<number>; /**
         * Specify whether the menu button is collapsible.
         */
        values(): IterableIterator<string>;
        includes(searchElement: string, fromIndex?: number | undefined): boolean;
        flatMap<U_3, This = undefined>(callback: (this: This, value: string, index: number, array: string[]) => U_3 | readonly U_3[], thisArg?: This | undefined): U_3[];
        flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
        at(index: number): string | undefined;
        [Symbol.iterator](): IterableIterator<string>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
    };
}
export default HeaderMenuButton;
