/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import PropTypes from 'prop-types';
import React, { FocusEvent, ReactNode } from 'react';
export interface TableToolbarSearchProps {
    children?: ReactNode;
    /**
     * Provide an optional class name for the search container
     */
    className?: string;
    /**
     * Specifies if the search should initially render in an expanded state
     */
    defaultExpanded?: boolean;
    /**
     * Provide an optional default value for the Search component
     */
    defaultValue?: string;
    /**
     * Specifies if the search should be disabled
     */
    disabled?: boolean;
    /**
     * Specifies if the search should expand
     */
    expanded?: boolean;
    /**
     * Provide an optional id for the search container
     */
    id?: string;
    /**
     * Provide an optional label text for the Search component icon
     */
    labelText?: string;
    /**
     * Provide an optional function to be called when the search input loses focus, this will be
     * passed the event as the first parameter and a function to handle the expanding of the search
     * input as the second
     */
    onBlur?: (event: FocusEvent<HTMLInputElement>, handleExpand: (event: FocusEvent<HTMLInputElement>, value: boolean) => void) => void;
    /**
     * Provide an optional hook that is called each time the input is updated
     */
    onChange?: (event: '' | Partial<React.ChangeEventHandler<HTMLInputElement>>, value?: string) => void;
    /**
     * Optional callback called when the search value is cleared.
     */
    onClear?: () => void;
    /**
     * Provide an optional hook that is called each time the input is expanded
     */
    onExpand?: (event: FocusEvent<HTMLInputElement>, value: boolean) => void;
    /**
     * Provide an optional function to be called when the search input gains focus, this will be
     * passed the event as the first parameter and a function to handle the expanding of the search
     * input as the second.
     */
    onFocus?: (event: FocusEvent<HTMLInputElement>, handleExpand: (event: FocusEvent<HTMLInputElement>, value: boolean) => void) => void;
    /**
     * Whether the search should be allowed to expand
     */
    persistent?: boolean;
    /**
     * Provide an optional placeholder text for the Search component
     */
    placeholder?: string;
    /**
     * Provide an optional className for the overall container of the Search
     */
    searchContainerClass?: string;
    /**
     * Specify the size of the Search
     */
    size?: 'sm' | 'md' | 'lg';
    /**
     * Optional prop to specify the tabIndex of the <Search> (in expanded state) or the container (in collapsed state)
     */
    tabIndex?: number | string;
    /**
     * Provide custom text for the component for each translation id
     */
    translateWithId?: (id: string) => string;
}
declare const TableToolbarSearch: {
    ({ className, searchContainerClass, onChange: onChangeProp, onClear, translateWithId: t, placeholder, labelText, expanded: expandedProp, defaultExpanded, defaultValue, disabled, onExpand, persistent, id, onBlur, onFocus, size, tabIndex, ...rest }: TableToolbarSearchProps): JSX.Element;
    propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        /**
         * Provide an optional class name for the search container
         */
        className: PropTypes.Requireable<string>;
        /**
         * Specifies if the search should initially render in an expanded state
         */
        defaultExpanded: PropTypes.Requireable<boolean>;
        /**
         * Provide an optional default value for the Search component
         */
        defaultValue: PropTypes.Requireable<string>;
        /**
         * Specifies if the search should be disabled
         */
        disabled: PropTypes.Requireable<boolean>;
        /**
         * Specifies if the search should expand
         */
        expanded: PropTypes.Requireable<boolean>;
        /**
         * Provide an optional id for the search container
         */
        id: PropTypes.Requireable<string>;
        /**
         * Provide an optional label text for the Search component icon
         */
        labelText: PropTypes.Requireable<string>;
        /**
         * Provide an optional function to be called when the search input loses focus, this will be
         * passed the event as the first parameter and a function to handle the expanding of the search
         * input as the second
         */
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Provide an optional hook that is called each time the input is updated
         */
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Optional callback called when the search value is cleared.
         */
        onClear: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Provide an optional hook that is called each time the input is expanded
         */
        onExpand: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Provide an optional function to be called when the search input gains focus, this will be
         * passed the event as the first parameter and a function to handle the expanding of the search
         * input as the second.
         */
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Whether the search should be allowed to expand
         */
        persistent: PropTypes.Requireable<boolean>;
        /**
         * Provide an optional placeholder text for the Search component
         */
        placeholder: PropTypes.Requireable<string>;
        /**
         * Provide an optional className for the overall container of the Search
         */
        searchContainerClass: PropTypes.Requireable<string>;
        /**
         * Specify the size of the Search
         */
        size: PropTypes.Requireable<string>;
        /**
         * Optional prop to specify the tabIndex of the <Search> (in expanded state) or the container (in collapsed state)
         */
        tabIndex: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
        /**
         * Provide custom text for the component for each translation id
         */
        translateWithId: PropTypes.Requireable<(...args: any[]) => any>;
    };
};
export default TableToolbarSearch;
