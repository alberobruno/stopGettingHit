/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import PropTypes from 'prop-types';
import React__default from 'react';
import cx from 'classnames';
import { usePrefix } from '../../internal/usePrefix.js';
import { WarningFilled, WarningAltFilled } from '@carbon/icons-react';
import setupGetInstanceId from '../../tools/setupGetInstanceId.js';

const getInstanceId = setupGetInstanceId();
function CheckboxGroup(_ref) {
  let {
    children,
    className,
    helperText,
    invalid,
    invalidText,
    legendId,
    legendText,
    readOnly,
    warn,
    warnText,
    ...rest
  } = _ref;
  const prefix = usePrefix();
  const showWarning = !readOnly && !invalid && warn;
  const showHelper = !invalid && !warn;
  const checkboxGroupInstanceId = getInstanceId();
  const helperId = !helperText ? undefined : `checkbox-group-helper-text-${checkboxGroupInstanceId}`;
  const helper = helperText ? /*#__PURE__*/React__default.createElement("div", {
    id: helperId,
    className: `${prefix}--form__helper-text`
  }, helperText) : null;
  const fieldsetClasses = cx(`${prefix}--checkbox-group`, className, {
    [`${prefix}--checkbox-group--readonly`]: readOnly,
    [`${prefix}--checkbox-group--invalid`]: !readOnly && invalid,
    [`${prefix}--checkbox-group--warning`]: showWarning
  });
  return /*#__PURE__*/React__default.createElement("fieldset", _extends({
    className: fieldsetClasses,
    "data-invalid": invalid ? true : undefined,
    "aria-labelledby": rest['aria-labelledby'] || legendId,
    "aria-readonly": readOnly,
    "aria-describedby": !invalid && !warn && helper ? helperId : undefined
  }, rest), /*#__PURE__*/React__default.createElement("legend", {
    className: `${prefix}--label`,
    id: legendId || rest['aria-labelledby']
  }, legendText), children, /*#__PURE__*/React__default.createElement("div", {
    className: `${prefix}--checkbox-group__validation-msg`
  }, !readOnly && invalid && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(WarningFilled, {
    className: `${prefix}--checkbox__invalid-icon`
  }), /*#__PURE__*/React__default.createElement("div", {
    className: `${prefix}--form-requirement`
  }, invalidText)), showWarning && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(WarningAltFilled, {
    className: `${prefix}--checkbox__invalid-icon ${prefix}--checkbox__invalid-icon--warning`
  }), /*#__PURE__*/React__default.createElement("div", {
    className: `${prefix}--form-requirement`
  }, warnText))), showHelper && helper);
}
CheckboxGroup.propTypes = {
  /**
   * Provide the children form elements to be rendered inside of the <fieldset>
   */
  children: PropTypes.node,
  /**
   * Provide a custom className to be applied to the containing <fieldset> node
   */
  className: PropTypes.string,
  /**
   * Provide text for the form group for additional help
   */
  helperText: PropTypes.node,
  /**
   * Specify whether the form group is currently invalid
   */
  invalid: PropTypes.bool,
  /**
   * Provide the text that is displayed when the form group is in an invalid state
   */
  invalidText: PropTypes.node,
  /**
   * Provide id for the fieldset <legend> which corresponds to the fieldset
   * `aria-labelledby`
   */
  legendId: PropTypes.node,
  /**
   * Provide the text to be rendered inside of the fieldset <legend>
   */
  legendText: PropTypes.node.isRequired,
  /**
   * Whether the CheckboxGroup should be read-only
   */
  readOnly: PropTypes.bool,
  /**
   * Specify whether the form group is currently in warning state
   */
  warn: PropTypes.bool,
  /**
   * Provide the text that is displayed when the form group is in warning state
   */
  warnText: PropTypes.node
};

export { CheckboxGroup as default };
