/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import PropTypes from 'prop-types';
import React__default, { useContext } from 'react';
import { TextDirectionContext } from './TextDirectionContext.js';

function Text(_ref) {
  let {
    as,
    children,
    dir = 'auto',
    ...rest
  } = _ref;
  // TODO: Update with context typing once its been converted to TS
  const context = useContext(TextDirectionContext);
  const textProps = {};
  const BaseComponent = as ?? 'span';
  const value = {
    ...context
  };
  if (!context) {
    textProps.dir = dir;
    value.direction = dir;
  } else {
    const {
      direction: parentDirection,
      getTextDirection
    } = context;
    if (getTextDirection && getTextDirection.current) {
      const text = getTextFromChildren(children);
      const override = getTextDirection.current(text);
      if (parentDirection !== override) {
        textProps.dir = override;
        value.direction = override;
      } else if (parentDirection === 'auto') {
        textProps.dir = override;
      }
    } else if (parentDirection !== dir) {
      textProps.dir = dir;
      value.direction = dir;
    } else if (parentDirection === 'auto') {
      textProps.dir = dir;
    }
  }
  return /*#__PURE__*/React__default.createElement(TextDirectionContext.Provider, {
    value: value
  }, /*#__PURE__*/React__default.createElement(BaseComponent, _extends({}, rest, textProps), children));
}
Text.propTypes = {
  /**
   * Provide a custom element type used to render the outermost node
   */
  as: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.elementType]),
  /**
   * Provide child elements or text to be rendered inside of this component
   */
  children: PropTypes.node.isRequired,
  /**
   * Specify the text direction to be used for this component and any of its
   * children
   */
  dir: PropTypes.oneOf(['ltr', 'rtl', 'auto'])
};
function getTextFromChildren(children) {
  if (typeof children === 'string') {
    return children;
  }
  const text = React__default.Children.map(children, child => {
    if (typeof child === 'string') {
      return child;
    }
    return null;
  })?.filter(text => {
    return text !== null;
  });
  if (text?.length === 1) {
    return text[0];
  }
  return text;
}

export { Text };
