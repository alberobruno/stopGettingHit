/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import PropTypes from 'prop-types';
import React__default from 'react';
import cx from 'classnames';
import { Close } from '@carbon/icons-react';
import setupGetInstanceId from '../../tools/setupGetInstanceId.js';
import { usePrefix } from '../../internal/usePrefix.js';

var _Close;

var _excluded = ["children", "className", "id", "type", "filter", "renderIcon", "title", "disabled", "onClose", "size"];
var getInstanceId = setupGetInstanceId();
var TYPES = {
  red: 'Red',
  magenta: 'Magenta',
  purple: 'Purple',
  blue: 'Blue',
  cyan: 'Cyan',
  teal: 'Teal',
  green: 'Green',
  gray: 'Gray',
  'cool-gray': 'Cool-Gray',
  'warm-gray': 'Warm-Gray',
  'high-contrast': 'High-Contrast',
  outline: 'Outline'
};

var Tag = function Tag(_ref) {
  var _classNames;

  var children = _ref.children,
      className = _ref.className,
      id = _ref.id,
      type = _ref.type,
      filter = _ref.filter,
      CustomIconElement = _ref.renderIcon,
      title = _ref.title,
      disabled = _ref.disabled,
      onClose = _ref.onClose,
      size = _ref.size,
      other = _objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix();
  var tagId = id || "tag-".concat(getInstanceId());
  var tagClasses = cx("".concat(prefix, "--tag"), className, (_classNames = {}, _defineProperty(_classNames, "".concat(prefix, "--tag--disabled"), disabled), _defineProperty(_classNames, "".concat(prefix, "--tag--filter"), filter), _defineProperty(_classNames, "".concat(prefix, "--tag--").concat(size), size), _defineProperty(_classNames, "".concat(prefix, "--tag--").concat(type), type), _defineProperty(_classNames, "".concat(prefix, "--tag--interactive"), other.onClick && !filter), _classNames));

  var handleClose = function handleClose(event) {
    if (onClose) {
      event.stopPropagation();
      onClose(event);
    }
  };

  if (filter) {
    return /*#__PURE__*/React__default.createElement("div", _extends({
      className: tagClasses,
      "aria-label": title !== undefined ? "".concat(title, " ").concat(children) : "Clear filter ".concat(children),
      id: tagId
    }, other), /*#__PURE__*/React__default.createElement("span", {
      className: "".concat(prefix, "--tag__label"),
      title: typeof children === 'string' ? children : null
    }, children !== null && children !== undefined ? children : TYPES[type]), /*#__PURE__*/React__default.createElement("button", {
      type: "button",
      className: "".concat(prefix, "--tag__close-icon"),
      onClick: handleClose,
      disabled: disabled,
      "aria-labelledby": tagId,
      title: title
    }, _Close || (_Close = /*#__PURE__*/React__default.createElement(Close, null))));
  }

  var ComponentTag = other.onClick ? 'button' : 'div';
  return /*#__PURE__*/React__default.createElement(ComponentTag, _extends({
    disabled: ComponentTag === 'button' ? disabled : null,
    className: tagClasses,
    id: tagId
  }, other), CustomIconElement ? /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--tag__custom-icon")
  }, /*#__PURE__*/React__default.createElement(CustomIconElement, null)) : '', /*#__PURE__*/React__default.createElement("span", {
    title: typeof children === 'string' ? children : null
  }, children !== null && children !== undefined ? children : TYPES[type]));
};

Tag.propTypes = {
  /**
   * Provide content to be rendered inside of a <Tag>
   */
  children: PropTypes.node,

  /**
   * Provide a custom className that is applied to the containing <span>
   */
  className: PropTypes.string,

  /**
   * Specify if the <Tag> is disabled
   */
  disabled: PropTypes.bool,

  /**
   * Determine if <Tag> is a filter/chip
   */
  filter: PropTypes.bool,

  /**
   * Specify the id for the tag.
   */
  id: PropTypes.string,

  /**
   * Click handler for filter tag close button.
   */
  onClose: PropTypes.func,

  /**
   * Optional prop to render a custom icon.
   * Can be a React component class
   */
  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),

  /**
   * Specify the size of the Tag. Currently supports either `sm` or
   * 'md' (default) sizes.
   */
  size: PropTypes.oneOf(['sm', 'md']),

  /**
   * Text to show on clear filters
   */
  title: PropTypes.string,

  /**
   * Specify the type of the <Tag>
   */
  type: PropTypes.oneOf(Object.keys(TYPES))
};
var Tag$1 = Tag;

export { Tag$1 as default };
