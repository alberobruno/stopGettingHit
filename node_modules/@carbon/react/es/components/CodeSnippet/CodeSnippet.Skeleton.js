/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React__default from 'react';
import { usePrefix } from '../../internal/usePrefix.js';

var _span, _span2, _span3, _span4;

var _excluded = ["className", "type"];

function CodeSnippetSkeleton(_ref) {
  var _cx;

  var containerClassName = _ref.className,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'single' : _ref$type,
      rest = _objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix();
  var className = cx(containerClassName, (_cx = {}, _defineProperty(_cx, "".concat(prefix, "--snippet"), true), _defineProperty(_cx, "".concat(prefix, "--skeleton"), true), _defineProperty(_cx, "".concat(prefix, "--snippet--single"), type === 'single'), _defineProperty(_cx, "".concat(prefix, "--snippet--multi"), type === 'multi'), _cx));

  if (type === 'single') {
    return /*#__PURE__*/React__default.createElement("div", _extends({
      className: className
    }, rest), /*#__PURE__*/React__default.createElement("div", {
      className: "".concat(prefix, "--snippet-container")
    }, _span || (_span = /*#__PURE__*/React__default.createElement("span", null))));
  }

  if (type === 'multi') {
    return /*#__PURE__*/React__default.createElement("div", _extends({
      className: className
    }, rest), /*#__PURE__*/React__default.createElement("div", {
      className: "".concat(prefix, "--snippet-container")
    }, _span2 || (_span2 = /*#__PURE__*/React__default.createElement("span", null)), _span3 || (_span3 = /*#__PURE__*/React__default.createElement("span", null)), _span4 || (_span4 = /*#__PURE__*/React__default.createElement("span", null))));
  }
}

CodeSnippetSkeleton.propTypes = {
  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes.string,

  /**
   * The type of the code snippet, including single or multi
   */
  type: PropTypes.oneOf(['single', 'multi'])
};

export { CodeSnippetSkeleton as default };
