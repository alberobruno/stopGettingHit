/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React__default, { useState } from 'react';
import { Popover, PopoverContent } from '../../Popover/index.js';
import { useFallbackId } from '../../../internal/useId.js';
import { usePrefix } from '../../../internal/usePrefix.js';
import deprecate from '../../../prop-types/deprecate.js';
import { match } from '../../../internal/keyboard/match.js';
import { Escape } from '../../../internal/keyboard/keys.js';

var _excluded = ["align", "className", "children", "definition", "defaultOpen", "id", "tooltipText", "triggerClassName"];

function DefinitionTooltip(_ref) {
  var _ref$align = _ref.align,
      align = _ref$align === void 0 ? 'bottom-left' : _ref$align,
      className = _ref.className,
      children = _ref.children,
      definition = _ref.definition,
      _ref$defaultOpen = _ref.defaultOpen,
      defaultOpen = _ref$defaultOpen === void 0 ? false : _ref$defaultOpen,
      id = _ref.id,
      tooltipText = _ref.tooltipText,
      triggerClassName = _ref.triggerClassName,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(defaultOpen),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setOpen = _useState2[1];

  var prefix = usePrefix();
  var tooltipId = useFallbackId(id);

  function onKeyDown(event) {
    if (isOpen && match(event, Escape)) {
      event.stopPropagation();
      setOpen(false);
    }
  }

  return /*#__PURE__*/React__default.createElement(Popover, {
    align: align,
    className: className,
    dropShadow: false,
    highContrast: true,
    onMouseLeave: function onMouseLeave() {
      setOpen(false);
    },
    open: isOpen
  }, /*#__PURE__*/React__default.createElement("button", _extends({}, rest, {
    className: cx("".concat(prefix, "--definition-term"), triggerClassName),
    "aria-controls": tooltipId,
    "aria-expanded": isOpen,
    onBlur: function onBlur() {
      setOpen(false);
    },
    onClick: function onClick() {
      setOpen(!isOpen);
    },
    onKeyDown: onKeyDown,
    type: "button"
  }), children), /*#__PURE__*/React__default.createElement(PopoverContent, {
    className: "".concat(prefix, "--definition-tooltip"),
    id: tooltipId
  }, tooltipText !== null && tooltipText !== void 0 ? tooltipText : definition));
}

DefinitionTooltip.propTypes = {
  /**
   * Specify how the trigger should align with the tooltip
   */
  align: PropTypes.oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right']),

  /**
   * The `children` prop will be used as the value that is being defined
   */
  children: PropTypes.node.isRequired,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes.string,

  /**
   * Specify whether the tooltip should be open when it first renders
   */
  defaultOpen: PropTypes.bool,

  /**
   * The `definition` prop is used as the content inside of the tooltip that
   * appears when a user interacts with the element rendered by the `children`
   * prop
   */
  definition: PropTypes.node.isRequired,

  /**
   * Provide a value that will be assigned as the id of the tooltip
   */
  id: PropTypes.string,

  /**
   * [Deprecated in v11] Please use the `definition` prop instead.
   *
   * Provide the text that will be displayed in the tooltip when it is rendered.
   */
  tooltipText: deprecate(PropTypes.node, 'The tooltipText prop has been deprecated. Please use the `definition` prop instead.'),

  /**
   * The CSS class name of the trigger element
   */
  triggerClassName: PropTypes.string
};

export { DefinitionTooltip };
