/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React__default from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { ErrorFilled, CheckmarkFilled } from '@carbon/icons-react';
import Loading from '../Loading/Loading.js';
import { usePrefix } from '../../internal/usePrefix.js';

var _excluded = ["className", "status", "iconDescription", "description", "onSuccess", "successDelay"];
function InlineLoading(_ref) {
  var _title, _title2;

  var className = _ref.className,
      _ref$status = _ref.status,
      status = _ref$status === void 0 ? 'active' : _ref$status,
      iconDescription = _ref.iconDescription,
      description = _ref.description,
      onSuccess = _ref.onSuccess,
      successDelay = _ref.successDelay,
      other = _objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix();
  var loadingClasses = cx("".concat(prefix, "--inline-loading"), className);

  var getLoading = function getLoading() {
    if (status === 'error') {
      return /*#__PURE__*/React__default.createElement(ErrorFilled, {
        className: "".concat(prefix, "--inline-loading--error")
      }, _title || (_title = /*#__PURE__*/React__default.createElement("title", null, iconDescription)));
    }

    if (status === 'finished') {
      setTimeout(function () {
        if (onSuccess) {
          onSuccess();
        }
      }, successDelay);
      return /*#__PURE__*/React__default.createElement(CheckmarkFilled, {
        className: "".concat(prefix, "--inline-loading__checkmark-container")
      }, _title2 || (_title2 = /*#__PURE__*/React__default.createElement("title", null, iconDescription)));
    }

    if (status === 'inactive' || status === 'active') {
      return /*#__PURE__*/React__default.createElement(Loading, {
        small: true,
        description: iconDescription,
        withOverlay: false,
        active: status === 'active'
      });
    }

    return undefined;
  };

  var loadingText = /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--inline-loading__text")
  }, description);
  var loading = getLoading();
  var loadingAnimation = loading && /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--inline-loading__animation")
  }, loading);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: loadingClasses
  }, other, {
    "aria-live": 'assertive' 
  }), loadingAnimation, description && loadingText);
}
InlineLoading.propTypes = {
  /**
   * Specify a custom className to be applied to the container node
   */
  className: PropTypes.string,

  /**
   * Specify the description for the inline loading text
   */
  description: PropTypes.node,

  /**
   * Specify the description for the inline loading text
   */
  iconDescription: PropTypes.string,

  /**
   * Provide an optional handler to be invoked when <InlineLoading> is
   * successful
   */
  onSuccess: PropTypes.func,

  /**
   * Specify the loading status
   */
  status: PropTypes.oneOf(['inactive', 'active', 'finished', 'error']),

  /**
   * Provide a delay for the `setTimeout` for success
   */
  successDelay: PropTypes.number
};
InlineLoading.defaultProps = {
  successDelay: 1500
};

export { InlineLoading as default };
