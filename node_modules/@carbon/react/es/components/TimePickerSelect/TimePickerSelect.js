/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { inherits as _inherits, createSuper as _createSuper, classCallCheck as _classCallCheck, createClass as _createClass, objectWithoutProperties as _objectWithoutProperties, defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import PropTypes from 'prop-types';
import React__default, { Component } from 'react';
import cx from 'classnames';
import { ChevronDown } from '@carbon/icons-react';
import deprecate from '../../prop-types/deprecate.js';
import { PrefixContext } from '../../internal/usePrefix.js';

var _defineProperty2;

var _excluded = ["aria-label", "children", "className", "disabled", "hideLabel", "id", "iconDescription", "labelText"];

var TimePickerSelect = /*#__PURE__*/function (_Component) {
  _inherits(TimePickerSelect, _Component);

  var _super = _createSuper(TimePickerSelect);

  function TimePickerSelect() {
    _classCallCheck(this, TimePickerSelect);

    return _super.apply(this, arguments);
  }

  _createClass(TimePickerSelect, [{
    key: "render",
    value: function render() {
      var _classNames;

      var prefix = this.context;

      var _this$props = this.props,
          _this$props$ariaLabe = _this$props['aria-label'],
          ariaLabel = _this$props$ariaLabe === void 0 ? 'open list of options' : _this$props$ariaLabe,
          children = _this$props.children,
          className = _this$props.className,
          disabled = _this$props.disabled,
          _this$props$hideLabel = _this$props.hideLabel,
          hideLabel = _this$props$hideLabel === void 0 ? true : _this$props$hideLabel,
          id = _this$props.id,
          iconDescription = _this$props.iconDescription,
          labelText = _this$props.labelText,
          rest = _objectWithoutProperties(_this$props, _excluded);

      var selectClasses = cx((_classNames = {}, _defineProperty(_classNames, "".concat(prefix, "--select"), true), _defineProperty(_classNames, "".concat(prefix, "--time-picker__select"), true), _defineProperty(_classNames, className, className), _classNames));
      var labelClasses = cx("".concat(prefix, "--label"), _defineProperty({}, "".concat(prefix, "--visually-hidden"), hideLabel));
      var label = labelText ? /*#__PURE__*/React__default.createElement("label", {
        htmlFor: id,
        className: labelClasses
      }, labelText) : null;
      return /*#__PURE__*/React__default.createElement("div", {
        className: selectClasses
      }, label, /*#__PURE__*/React__default.createElement("select", _extends({
        className: "".concat(prefix, "--select-input"),
        disabled: disabled,
        id: id,
        "aria-label": ariaLabel
      }, rest), children), /*#__PURE__*/React__default.createElement(ChevronDown, {
        className: "".concat(prefix, "--select__arrow"),
        "aria-label": ariaLabel ? ariaLabel : iconDescription
      }));
    }
  }]);

  return TimePickerSelect;
}(Component);

_defineProperty(TimePickerSelect, "contextType", PrefixContext);

_defineProperty(TimePickerSelect, "propTypes", (_defineProperty2 = {}, _defineProperty(_defineProperty2, 'aria-label', PropTypes.string), _defineProperty(_defineProperty2, "children", PropTypes.node), _defineProperty(_defineProperty2, "className", PropTypes.string), _defineProperty(_defineProperty2, "defaultValue", PropTypes.any), _defineProperty(_defineProperty2, "disabled", PropTypes.bool), _defineProperty(_defineProperty2, "hideLabel", deprecate(PropTypes.bool, 'The `hideLabel` prop for `TimePickerSelect` is no longer needed and has ' + 'been deprecated. It will be removed in the next major release.')), _defineProperty(_defineProperty2, "iconDescription", deprecate(PropTypes.string, 'The `iconDescription` prop for `TimePickerSelect` is no longer needed and has ' + 'been deprecated. It will be removed in the next major release. Use `aria-label` instead.')), _defineProperty(_defineProperty2, "id", PropTypes.string.isRequired), _defineProperty(_defineProperty2, "labelText", PropTypes.node.isRequired), _defineProperty2));

_defineProperty(TimePickerSelect, "defaultProps", {
  disabled: false
});

export { TimePickerSelect as default };
