/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import PropTypes from 'prop-types';
import React__default from 'react';
import cx from 'classnames';
import { Copy as Copy$1 } from '@carbon/icons-react';
import Copy from '../Copy/Copy.js';
import { LayoutConstraint } from '../Layout/index.js';
import { usePrefix } from '../../internal/usePrefix.js';
import { noopFn } from '../../internal/noopFn.js';

function CopyButton(_ref) {
  let {
    align = 'bottom',
    feedback = 'Copied!',
    feedbackTimeout = 2000,
    iconDescription = 'Copy to clipboard',
    className,
    onClick = noopFn,
    ...other
  } = _ref;
  const prefix = usePrefix();
  return /*#__PURE__*/React__default.createElement(LayoutConstraint, {
    size: {
      default: 'md',
      max: 'lg'
    }
  }, /*#__PURE__*/React__default.createElement(Copy, _extends({
    feedback: feedback,
    feedbackTimeout: feedbackTimeout,
    onClick: onClick,
    align: align,
    className: cx(className, `${prefix}--copy-btn`),
    "aria-label": iconDescription
  }, other), /*#__PURE__*/React__default.createElement(Copy$1, {
    className: `${prefix}--snippet__icon`
  })));
}
CopyButton.propTypes = {
  /**
   * Specify how the trigger should align with the tooltip
   */
  align: PropTypes.oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'right']),
  /**
   * Specify an optional className to be applied to the underlying `<button>`
   */
  className: PropTypes.string,
  /**
   * Specify the string that is displayed when the button is clicked and the
   * content is copied
   */
  feedback: PropTypes.string,
  /**
   * Specify the time it takes for the feedback message to timeout
   */
  feedbackTimeout: PropTypes.number,
  /**
   * Provide a description for the icon representing the copy action that can
   * be read by screen readers
   */
  iconDescription: PropTypes.string,
  /**
   * Specify an optional `onClick` handler that is called when the underlying
   * `<button>` is clicked
   */
  onClick: PropTypes.func
};

export { CopyButton as default };
