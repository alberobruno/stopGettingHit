/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, defineProperty as _defineProperty, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React__default, { useState } from 'react';
import { usePrefix } from '../../../internal/usePrefix.js';

var _excluded = ["children", "className", "currentIndex", "onChange", "spaceEqually", "vertical"];

function ProgressIndicator(_ref) {
  var _cx;

  var children = _ref.children,
      customClassName = _ref.className,
      _ref$currentIndex = _ref.currentIndex,
      controlledIndex = _ref$currentIndex === void 0 ? 0 : _ref$currentIndex,
      onChange = _ref.onChange,
      spaceEqually = _ref.spaceEqually,
      vertical = _ref.vertical,
      rest = _objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix();

  var _useState = useState(controlledIndex),
      _useState2 = _slicedToArray(_useState, 2),
      currentIndex = _useState2[0],
      setCurrentIndex = _useState2[1];

  var _useState3 = useState(controlledIndex),
      _useState4 = _slicedToArray(_useState3, 2),
      prevControlledIndex = _useState4[0],
      setPrevControlledIndex = _useState4[1];

  var className = cx((_cx = {}, _defineProperty(_cx, "".concat(prefix, "--progress"), true), _defineProperty(_cx, "".concat(prefix, "--progress--vertical"), vertical), _defineProperty(_cx, "".concat(prefix, "--progress--space-equal"), spaceEqually && !vertical), _defineProperty(_cx, customClassName, customClassName), _cx));

  if (controlledIndex !== prevControlledIndex) {
    setCurrentIndex(controlledIndex);
    setPrevControlledIndex(controlledIndex);
  }

  return /*#__PURE__*/React__default.createElement("ul", _extends({
    className: className
  }, rest), React__default.Children.map(children, function (child, index) {
    // only setup click handlers if onChange event is passed
    var onClick = onChange ? function () {
      return onChange(index);
    } : undefined;

    if (index === currentIndex) {
      return /*#__PURE__*/React__default.cloneElement(child, {
        complete: child.props.complete,
        current: child.props.complete ? false : true,
        index: index,
        onClick: onClick
      });
    }

    if (index < currentIndex) {
      return /*#__PURE__*/React__default.cloneElement(child, {
        complete: true,
        index: index,
        onClick: onClick
      });
    }

    if (index > currentIndex) {
      return /*#__PURE__*/React__default.cloneElement(child, {
        complete: child.props.complete || false,
        index: index,
        onClick: onClick
      });
    }

    return null;
  }));
}

ProgressIndicator.propTypes = {
  /**
   * Provide `<ProgressStep>` components to be rendered in the
   * `<ProgressIndicator>`
   */
  children: PropTypes.node,

  /**
   * Provide an optional className to be applied to the containing node
   */
  className: PropTypes.string,

  /**
   * Optionally specify the current step array index
   */
  currentIndex: PropTypes.number,

  /**
   * Optional callback called if a ProgressStep is clicked on.  Returns the index of the step.
   */
  onChange: PropTypes.func,

  /**
   * Specify whether the progress steps should be split equally in size in the div
   */
  spaceEqually: PropTypes.bool,

  /**
   * Determines whether or not the ProgressIndicator should be rendered vertically.
   */
  vertical: PropTypes.bool
};

export { ProgressIndicator };
