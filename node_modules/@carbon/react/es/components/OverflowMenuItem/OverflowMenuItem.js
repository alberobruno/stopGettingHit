/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { inherits as _inherits, createSuper as _createSuper, classCallCheck as _classCallCheck, defineProperty as _defineProperty, assertThisInitialized as _assertThisInitialized, createClass as _createClass, objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React__default from 'react';
import { warning } from '../../internal/warning.js';
import * as FeatureFlags from '@carbon/feature-flags';
import { PrefixContext } from '../../internal/usePrefix.js';
import { match } from '../../internal/keyboard/match.js';
import { ArrowDown, ArrowUp } from '../../internal/keyboard/keys.js';

var _excluded = ["href", "className", "itemText", "hasDivider", "isDelete", "disabled", "closeMenu", "onClick", "handleOverflowMenuItemFocus", "onKeyDown", "wrapperClassName", "requireTitle", "index", "title"];

var OverflowMenuItem = /*#__PURE__*/function (_React$Component) {
  _inherits(OverflowMenuItem, _React$Component);

  var _super = _createSuper(OverflowMenuItem);

  function OverflowMenuItem() {
    var _this;

    _classCallCheck(this, OverflowMenuItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "overflowMenuItem", /*#__PURE__*/React__default.createRef());

    _defineProperty(_assertThisInitialized(_this), "setTabFocus", function (evt) {
      if (match(evt, ArrowDown)) {
        _this.props.handleOverflowMenuItemFocus({
          currentIndex: _this.props.index,
          direction: 1
        });
      }

      if (match(evt, ArrowUp)) {
        _this.props.handleOverflowMenuItemFocus({
          currentIndex: _this.props.index,
          direction: -1
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (evt) {
      var _this$props = _this.props,
          onClick = _this$props.onClick,
          closeMenu = _this$props.closeMenu;
      onClick(evt);

      if (closeMenu) {
        closeMenu();
      }
    });

    return _this;
  }

  _createClass(OverflowMenuItem, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          href = _this$props2.href,
          className = _this$props2.className,
          itemText = _this$props2.itemText,
          hasDivider = _this$props2.hasDivider,
          isDelete = _this$props2.isDelete,
          disabled = _this$props2.disabled,
          closeMenu = _this$props2.closeMenu;
          _this$props2.onClick;
          _this$props2.handleOverflowMenuItemFocus;
          var _onKeyDown = _this$props2.onKeyDown,
          wrapperClassName = _this$props2.wrapperClassName,
          requireTitle = _this$props2.requireTitle,
          index = _this$props2.index,
          title = _this$props2.title,
          other = _objectWithoutProperties(_this$props2, _excluded);

      if (process.env.NODE_ENV !== "production") {
        process.env.NODE_ENV !== "production" ? warning(closeMenu, '`<OverflowMenuItem>` detected missing `closeMenu` prop. ' + '`closeMenu` is required to let `<OverflowMenu>` close the menu upon actions on `<OverflowMenuItem>`. ' + 'Please make sure `<OverflowMenuItem>` is a direct child of `<OverflowMenu>.') : void 0;
      }

      return /*#__PURE__*/React__default.createElement(PrefixContext.Consumer, null, function (prefix) {
        var _classNames;

        var overflowMenuBtnClasses = cx("".concat(prefix, "--overflow-menu-options__btn"), className);
        var overflowMenuItemClasses = cx("".concat(prefix, "--overflow-menu-options__option"), (_classNames = {}, _defineProperty(_classNames, "".concat(prefix, "--overflow-menu--divider"), hasDivider), _defineProperty(_classNames, "".concat(prefix, "--overflow-menu-options__option--danger"), isDelete), _defineProperty(_classNames, "".concat(prefix, "--overflow-menu-options__option--disabled"), disabled), _classNames), wrapperClassName);
        var TagToUse = href ? 'a' : 'button';

        var OverflowMenuItemContent = function () {
          if (typeof itemText !== 'string') {
            return itemText;
          }

          return /*#__PURE__*/React__default.createElement("div", {
            className: "".concat(prefix, "--overflow-menu-options__option-content")
          }, itemText);
        }();

        return /*#__PURE__*/React__default.createElement("li", {
          className: overflowMenuItemClasses,
          role: "none"
        }, /*#__PURE__*/React__default.createElement(TagToUse, _extends({}, other, {
          role: "menuitem",
          href: href,
          className: overflowMenuBtnClasses,
          disabled: disabled,
          onClick: _this2.handleClick,
          onKeyDown: function onKeyDown(evt) {
            _this2.setTabFocus(evt);

            _onKeyDown(evt);
          },
          ref: _this2.overflowMenuItem,
          title: requireTitle ? title || itemText : null,
          tabIndex: "-1",
          index: index
        }), OverflowMenuItemContent));
      });
    }
  }]);

  return OverflowMenuItem;
}(React__default.Component);

_defineProperty(OverflowMenuItem, "propTypes", {
  /**
   * The CSS class name to be placed on the button element
   */
  className: PropTypes.string,

  /**
   * A callback to tell the parent menu component that the menu should be closed.
   */
  closeMenu: PropTypes.func,

  /**
   * `true` to make this menu item disabled.
   */
  disabled: PropTypes.bool,
  handleOverflowMenuItemFocus: PropTypes.func,

  /**
   * `true` to make this menu item a divider.
   */
  hasDivider: PropTypes.bool,

  /**
   * If given, overflow item will render as a link with the given href
   */
  href: PropTypes.string,
  index: PropTypes.number,

  /**
   * `true` to make this menu item a "danger button".
   */
  isDelete: PropTypes.bool,

  /**
   * The text in the menu item.
   */
  itemText: PropTypes.node.isRequired,

  /**
   * event handlers
   */
  onBlur: PropTypes.func,
  onClick: PropTypes.func,
  onFocus: PropTypes.func,
  onKeyDown: PropTypes.func,
  onKeyUp: PropTypes.func,
  onMouseDown: PropTypes.func,
  onMouseEnter: PropTypes.func,
  onMouseLeave: PropTypes.func,
  onMouseUp: PropTypes.func,

  /**
   * `true` if this menu item has long text and requires a browser tooltip
   */
  requireTitle: PropTypes.bool,

  /**
   * Specify a title for the OverflowMenuItem
   */
  title: PropTypes.string,

  /**
   * The CSS class name to be placed on the wrapper list item element
   */
  wrapperClassName: PropTypes.string
});

_defineProperty(OverflowMenuItem, "defaultProps", {
  hasDivider: false,
  isDelete: false,
  disabled: false,
  itemText: FeatureFlags.enabled('enable-v11-release') ? null : 'Provide itemText',
  onClick: function onClick() {},
  onKeyDown: function onKeyDown() {}
});

export { OverflowMenuItem as default };
