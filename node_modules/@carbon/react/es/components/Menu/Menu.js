/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, defineProperty as _defineProperty, objectSpread2 as _objectSpread2, typeof as _typeof } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React__default, { useRef, useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import cx from 'classnames';
import PropTypes from 'prop-types';
import { usePrefix } from '../../internal/usePrefix.js';
import { getParentMenu, getNextNode, getParentNode, getValidNodes, clickedElementHasSubnodes, capWithinRange, getPosition, resetFocus, focusNode } from './_utils.js';
import MenuGroup from './MenuGroup.js';
import MenuRadioGroup from './MenuRadioGroup.js';
import MenuRadioGroupOptions from './MenuRadioGroupOptions.js';
import MenuSelectableItem from './MenuSelectableItem.js';
import { match } from '../../internal/keyboard/match.js';
import { Tab, Enter, Space, Escape, ArrowLeft, ArrowUp, ArrowDown } from '../../internal/keyboard/keys.js';

var _excluded = ["children", "className", "id", "level", "open", "size", "target", "x", "y", "onClose"];
var margin = 16; // distance to keep to body edges, in px

var defaultSize = 'sm';

var Menu = function Menu(_ref) {
  var _classnames;

  var children = _ref.children,
      className = _ref.className,
      id = _ref.id,
      _ref$level = _ref.level,
      level = _ref$level === void 0 ? 1 : _ref$level,
      open = _ref.open,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? defaultSize : _ref$size,
      _ref$target = _ref.target,
      target = _ref$target === void 0 ? document.body : _ref$target,
      _ref$x = _ref.x,
      x = _ref$x === void 0 ? 0 : _ref$x,
      _ref$y = _ref.y,
      y = _ref$y === void 0 ? 0 : _ref$y,
      _ref$onClose = _ref.onClose,
      onClose = _ref$onClose === void 0 ? function () {} : _ref$onClose,
      rest = _objectWithoutProperties(_ref, _excluded);

  var rootRef = useRef(null);

  var _useState = useState(1),
      _useState2 = _slicedToArray(_useState, 2),
      direction = _useState2[0],
      setDirection = _useState2[1]; // 1 = to right, -1 = to left


  var _useState3 = useState([x, y]),
      _useState4 = _slicedToArray(_useState3, 2),
      position = _useState4[0],
      setPosition = _useState4[1];

  var isRootMenu = level === 1;
  var focusReturn = useRef(null);
  var prefix = usePrefix();

  function returnFocus() {
    if (focusReturn.current) {
      focusReturn.current.focus();
    }
  }

  function close(eventType) {
    var isKeyboardEvent = /^key/.test(eventType);

    if (isKeyboardEvent) {
      window.addEventListener('keyup', returnFocus, {
        once: true
      });
    } else {
      window.addEventListener('mouseup', returnFocus, {
        once: true
      });
    }

    onClose();
  }

  function getContainerBoundaries() {
    var _document$body = document.body,
        bodyWidth = _document$body.clientWidth,
        bodyHeight = _document$body.clientHeight;
    return [margin, margin, bodyWidth - margin, bodyHeight - margin];
  }

  function getTargetBoundaries() {
    var xIsRange = _typeof(x) === 'object' && x.length === 2;
    var yIsRange = _typeof(y) === 'object' && y.length === 2;
    var targetBoundaries = [xIsRange ? x[0] : x, yIsRange ? y[0] : y, xIsRange ? x[1] : x, yIsRange ? y[1] : y];

    if (!isRootMenu) {
      var _getParentMenu;

      var _getParentMenu$getBou = (_getParentMenu = getParentMenu(rootRef.current)) === null || _getParentMenu === void 0 ? void 0 : _getParentMenu.getBoundingClientRect(),
          parentWidth = _getParentMenu$getBou.width;

      targetBoundaries[2] -= parentWidth;
    }

    var containerBoundaries = getContainerBoundaries();
    return [capWithinRange(targetBoundaries[0], containerBoundaries[0], containerBoundaries[2]), capWithinRange(targetBoundaries[1], containerBoundaries[1], containerBoundaries[3]), capWithinRange(targetBoundaries[2], containerBoundaries[0], containerBoundaries[2]), capWithinRange(targetBoundaries[3], containerBoundaries[1], containerBoundaries[3])];
  }

  function focusNode$1(node) {
    if (node) {
      resetFocus(rootRef.current);
      focusNode(node);
    }
  }

  function handleKeyDown(event) {
    if (match(event, Tab)) {
      event.preventDefault();
      close(event.type);
    }

    if (event.target.tagName === 'LI' && (match(event, Enter) || match(event, Space))) {
      handleClick(event);
    } else {
      event.stopPropagation();
    }

    if (match(event, Escape) || !isRootMenu && match(event, ArrowLeft)) {
      close(event.type);
    }

    var nodeToFocus;

    if (event.target.tagName === 'LI') {
      var currentNode = event.target;

      if (match(event, ArrowUp)) {
        nodeToFocus = getNextNode(currentNode, -1);
      } else if (match(event, ArrowDown)) {
        nodeToFocus = getNextNode(currentNode, 1);
      } else if (match(event, ArrowLeft)) {
        nodeToFocus = getParentNode(currentNode);
      }
    } else if (event.target.tagName === 'UL') {
      var validNodes = getValidNodes(event.target);

      if (validNodes.length > 0 && match(event, ArrowUp)) {
        nodeToFocus = validNodes[validNodes.length - 1];
      } else if (validNodes.length > 0 && match(event, ArrowDown)) {
        nodeToFocus = validNodes[0];
      }
    }

    focusNode$1(nodeToFocus);

    if (rest.onKeyDown) {
      rest.onKeyDown(event);
    }
  }

  function handleClick(event) {
    if (!clickedElementHasSubnodes(event) && event.target.tagName !== 'UL') {
      close(event.type);
    } else {
      event.stopPropagation();
    }
  }

  function getCorrectedPosition(preferredDirection) {
    var _rootRef$current;

    var elementRect = (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.getBoundingClientRect();
    var elementDimensions = [elementRect.width, elementRect.height];
    var targetBoundaries = getTargetBoundaries();
    var containerBoundaries = getContainerBoundaries();

    var _getPosition = getPosition(elementDimensions, targetBoundaries, containerBoundaries, preferredDirection, isRootMenu, rootRef.current),
        correctedPosition = _getPosition.position,
        correctedDirection = _getPosition.direction;

    setDirection(correctedDirection);
    return correctedPosition;
  }

  function handleBlur(event) {
    var _rootRef$current2;

    if (isRootMenu && !((_rootRef$current2 = rootRef.current) !== null && _rootRef$current2 !== void 0 && _rootRef$current2.contains(event.relatedTarget))) {
      close(event.type);
    }
  }

  useEffect(function () {
    if (open) {
      focusReturn.current = document.activeElement;
      var localDirection = 1;

      if (isRootMenu) {
        var _rootRef$current3;

        (_rootRef$current3 = rootRef.current) === null || _rootRef$current3 === void 0 ? void 0 : _rootRef$current3.focus();
      } else {
        var parentMenu = getParentMenu(rootRef.current);

        if (parentMenu) {
          localDirection = Number(parentMenu.dataset.direction);
        }
      }

      var correctedPosition = getCorrectedPosition(localDirection);
      setPosition(correctedPosition);
    } else {
      setPosition([0, 0]);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [open, x, y]);
  var someNodesHaveIcons = React__default.Children.toArray(children).some(function (node) {
    return node.type === MenuSelectableItem || node.type === MenuRadioGroup;
  });
  var options = React__default.Children.map(children, function (node) {
    if ( /*#__PURE__*/React__default.isValidElement(node)) {
      return /*#__PURE__*/React__default.cloneElement(node, {
        indented: someNodesHaveIcons,
        level: level
      });
    }
  });
  var classes = cx("".concat(prefix, "--menu"), (_classnames = {}, _defineProperty(_classnames, "".concat(prefix, "--menu--open"), open), _defineProperty(_classnames, "".concat(prefix, "--menu--invisible"), open && position[0] === 0 && position[1] === 0), _defineProperty(_classnames, "".concat(prefix, "--menu--root"), isRootMenu), _classnames), size !== defaultSize && "".concat(prefix, "--menu--").concat(size), className);

  var ulAttributes = _objectSpread2(_objectSpread2({}, rest), {}, {
    id: id,
    ref: rootRef,
    className: classes,
    onKeyDown: handleKeyDown,
    onClick: handleClick,
    onBlur: handleBlur,
    role: 'menu',
    tabIndex: -1,
    'data-direction': direction,
    'data-level': level,
    style: {
      left: "".concat(position[0], "px"),
      top: "".concat(position[1], "px")
    }
  });

  var childrenToRender = options; // if the only child is a radiogroup, don't render it as radiogroup component, but
  // only the items to prevent duplicate markup

  if (options && options.length === 1 && options[0].type === MenuRadioGroup) {
    var radioGroupProps = options[0].props;
    ulAttributes['aria-label'] = radioGroupProps.label;
    childrenToRender = /*#__PURE__*/React__default.createElement(MenuRadioGroupOptions, {
      items: radioGroupProps.items,
      initialSelectedItem: radioGroupProps.initialSelectedItem,
      onChange: radioGroupProps.onChange
    });
  } // if the only child is a generic group, don't render it as group component, but
  // only the children to prevent duplicate markup


  if (options && options.length === 1 && options[0].type === MenuGroup) {
    var groupProps = options[0].props;
    ulAttributes['aria-label'] = groupProps.label;
    childrenToRender = React__default.Children.toArray(options[0].props.children);
  }

  var menu = /*#__PURE__*/React__default.createElement("ul", ulAttributes, childrenToRender);
  return isRootMenu ? open && /*#__PURE__*/ReactDOM.createPortal(menu, target) || null : menu;
};

Menu.propTypes = {
  /**
   * Specify the children of the Menu
   */
  children: PropTypes.node,

  /**
   * Specify a custom className to apply to the ul node
   */
  className: PropTypes.string,

  /**
   * Define an ID for this menu
   */
  id: PropTypes.string,

  /**
   * Internal: keeps track of the nesting level of the menu
   */
  level: PropTypes.number,

  /**
   * Function called when the menu is closed
   */
  onClose: PropTypes.func,

  /**
   * Specify whether the Menu is currently open
   */
  open: PropTypes.bool,

  /**
   * Specify the size of the menu, from a list of available sizes.
   */
  size: PropTypes.oneOf(['sm', 'md', 'lg']),

  /**
   * Optionally pass an element the Menu should be appended to as a child. Defaults to document.body.
   */
  target: PropTypes.element,

  /**
   * Specify the x position where this menu is rendered
   */
  x: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),

  /**
   * Specify the y position where this menu is rendered
   */
  y: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)])
};
var Menu$1 = Menu;

export { Menu$1 as default };
