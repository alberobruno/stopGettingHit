/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React__default, { useState, useRef, useEffect } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { CaretRight } from '@carbon/icons-react';
import { usePrefix } from '../../internal/usePrefix.js';
import { getFirstSubNode, focusNode, clickedElementHasSubnodes, getParentMenu } from './_utils.js';
import Menu from './Menu.js';
import { match } from '../../internal/keyboard/match.js';
import { ArrowRight, Enter, Space } from '../../internal/keyboard/keys.js';

var _CaretRight;

var _excluded = ["children", "disabled", "indented", "kind", "label", "level", "onClick", "renderIcon", "shortcut"];
var hoverIntentDelay = 150; // in ms

function MenuOptionContent(_ref) {
  var label = _ref.label,
      info = _ref.info,
      disabled = _ref.disabled,
      Icon = _ref.icon,
      indented = _ref.indented;
  var prefix = usePrefix();
  var classes = cx("".concat(prefix, "--menu-option__content"), _defineProperty({}, "".concat(prefix, "--menu-option__content--disabled"), disabled));
  return /*#__PURE__*/React__default.createElement("div", {
    className: classes
  }, indented && /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--menu-option__icon")
  }, Icon && /*#__PURE__*/React__default.createElement(Icon, null)), /*#__PURE__*/React__default.createElement("span", {
    className: "".concat(prefix, "--menu-option__label"),
    title: label
  }, label), /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--menu-option__info")
  }, info));
}

function MenuOption(_ref2) {
  var _classnames2;

  var children = _ref2.children,
      disabled = _ref2.disabled,
      indented = _ref2.indented,
      _ref2$kind = _ref2.kind,
      kind = _ref2$kind === void 0 ? 'default' : _ref2$kind,
      label = _ref2.label,
      level = _ref2.level,
      _ref2$onClick = _ref2.onClick,
      onClick = _ref2$onClick === void 0 ? function () {} : _ref2$onClick,
      renderIcon = _ref2.renderIcon,
      shortcut = _ref2.shortcut,
      rest = _objectWithoutProperties(_ref2, _excluded);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      submenuOpen = _useState2[0],
      setSubmenuOpen = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      submenuOpenedByKeyboard = _useState4[0],
      setSubmenuOpenedByKeyboard = _useState4[1];

  var rootRef = useRef(null);
  var hoverIntentTimeout = useRef(null);
  var prefix = usePrefix();
  var subOptions = React__default.Children.map(children, function (node) {
    if ( /*#__PURE__*/React__default.isValidElement(node)) {
      return /*#__PURE__*/React__default.cloneElement(node);
    }
  });

  function openSubmenu() {
    var openedByKeyboard = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    setSubmenuOpenedByKeyboard(openedByKeyboard);
    setSubmenuOpen(true);
  }

  function handleKeyDown(event) {
    if (clickedElementHasSubnodes(event) && (match(event, ArrowRight) || match(event, Enter) || match(event, Space))) {
      openSubmenu(true);
    } else if ((match(event, Enter) || match(event, Space)) && onClick) {
      onClick(event);
    }
  }

  function handleMouseEnter() {
    hoverIntentTimeout.current = setTimeout(openSubmenu, hoverIntentDelay);
  }

  function handleMouseLeave() {
    clearTimeout(hoverIntentTimeout === null || hoverIntentTimeout === void 0 ? void 0 : hoverIntentTimeout.current);
    setSubmenuOpen(false);
  }

  function getSubmenuPosition() {
    var pos = [0, 0];

    if (subOptions) {
      var parentMenu = getParentMenu(rootRef === null || rootRef === void 0 ? void 0 : rootRef.current);

      if (parentMenu) {
        var _parentMenu$getBoundi = parentMenu.getBoundingClientRect(),
            x = _parentMenu$getBoundi.x,
            width = _parentMenu$getBoundi.width;

        var _rootRef$current$getB = rootRef.current.getBoundingClientRect(),
            y = _rootRef$current$getB.y;

        pos[0] = x + width;
        pos[1] = y;
      }
    }

    return pos;
  }

  useEffect(function () {
    if (subOptions && submenuOpenedByKeyboard) {
      var firstSubnode = getFirstSubNode(rootRef === null || rootRef === void 0 ? void 0 : rootRef.current);
      focusNode(firstSubnode);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [submenuOpen]);
  var classes = cx("".concat(prefix, "--menu-option"), (_classnames2 = {}, _defineProperty(_classnames2, "".concat(prefix, "--menu-option--disabled"), disabled), _defineProperty(_classnames2, "".concat(prefix, "--menu-option--active"), subOptions && submenuOpen), _defineProperty(_classnames2, "".concat(prefix, "--menu-option--danger"), !subOptions && kind === 'danger'), _classnames2));
  var allowedRoles = ['menuitemradio', 'menuitemcheckbox'];
  var role = rest.role && allowedRoles.includes(rest.role) ? rest.role : 'menuitem';
  var submenuPosition = getSubmenuPosition();
  return (
    /*#__PURE__*/
    // role is either menuitemradio, menuitemcheckbox, or menuitem which are all interactive
    // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
    React__default.createElement("li", _extends({}, rest, {
      ref: rootRef,
      className: classes,
      role: role,
      tabIndex: -1,
      "aria-disabled": !subOptions && disabled,
      "aria-haspopup": subOptions ? true : null,
      "aria-expanded": subOptions ? submenuOpen : null,
      onKeyDown: handleKeyDown,
      onMouseEnter: subOptions ? handleMouseEnter : null,
      onMouseLeave: subOptions ? handleMouseLeave : null,
      onClick: onClick
    }), subOptions ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(MenuOptionContent, {
      label: label,
      icon: renderIcon,
      info: _CaretRight || (_CaretRight = /*#__PURE__*/React__default.createElement(CaretRight, null)),
      indented: indented
    }), /*#__PURE__*/React__default.createElement(Menu, {
      level: level + 1,
      open: submenuOpen,
      onClose: function onClose() {
        setSubmenuOpen(false);
      },
      x: submenuPosition[0],
      y: submenuPosition[1]
    }, subOptions)) : /*#__PURE__*/React__default.createElement(MenuOptionContent, {
      label: label,
      disabled: disabled,
      icon: renderIcon,
      info: shortcut,
      indented: indented
    }))
  );
}

MenuOptionContent.propTypes = {
  /**
   * Whether this option is disabled
   */
  disabled: PropTypes.bool,

  /**
   * Icon that is displayed in front of the option
   */
  icon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),

  /**
   * Whether the content should be indented
   */
  indented: PropTypes.bool,

  /**
   * Additional information such as shortcut or caret
   */
  info: PropTypes.node,

  /**
   * Rendered label for the MenuOptionContent
   */
  label: PropTypes.node.isRequired
};
MenuOption.propTypes = {
  /**
   * Specify the children of the MenuOption
   */
  children: PropTypes.node,

  /**
   * Specify whether this MenuOption is disabled
   */
  disabled: PropTypes.bool,

  /**
   * Whether the content should be indented (for example because it's in a group with options that have icons).
   * Is automatically set by Menu
   */
  indented: PropTypes.bool,

  /**
   * Optional prop to specify the kind of the MenuOption
   */
  kind: PropTypes.oneOf(['default', 'danger']),

  /**
   * Rendered label for the MenuOption
   */
  label: PropTypes.node.isRequired,

  /**
   * Which nested level this option is located in.
   * Is automatically set by Menu
   */
  level: PropTypes.number,

  /**
   * The onClick handler
   */
  onClick: PropTypes.func,

  /**
   * Rendered icon for the MenuOption.
   * Can be a React component class
   */
  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),

  /**
   * Rendered shortcut for the MenuOption
   */
  shortcut: PropTypes.node
};

export { MenuOption as default };
