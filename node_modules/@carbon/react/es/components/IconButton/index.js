/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import PropTypes from 'prop-types';
import React__default from 'react';
import Button from '../Button/Button.js';
import { Tooltip } from '../Tooltip/next/Tooltip.js';
import { usePrefix } from '../../internal/usePrefix.js';

var _excluded = ["align", "children", "defaultOpen", "enterDelayMs", "kind", "label", "leaveDelayMs", "size"];
var IconButton = /*#__PURE__*/React__default.forwardRef(function IconButton(props, ref) {
  var align = props.align,
      children = props.children,
      _props$defaultOpen = props.defaultOpen,
      defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,
      enterDelayMs = props.enterDelayMs,
      kind = props.kind,
      label = props.label,
      leaveDelayMs = props.leaveDelayMs,
      _props$size = props.size,
      size = _props$size === void 0 ? 'md' : _props$size,
      rest = _objectWithoutProperties(props, _excluded);

  var prefix = usePrefix();
  return /*#__PURE__*/React__default.createElement(Tooltip, {
    align: align,
    className: "".concat(prefix, "--icon-tooltip"),
    defaultOpen: defaultOpen,
    enterDelayMs: enterDelayMs,
    label: label,
    leaveDelayMs: leaveDelayMs
  }, /*#__PURE__*/React__default.createElement(Button, _extends({}, rest, {
    kind: kind,
    ref: ref,
    size: size
  }), children));
});
IconButton.propTypes = {
  /**
   * Specify how the trigger should align with the tooltip
   */
  align: PropTypes.oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'right']),

  /**
   * Provide an icon or asset to be rendered inside of the IconButton
   */
  children: PropTypes.node,

  /**
   * Specify whether the tooltip should be open when it first renders
   */
  defaultOpen: PropTypes.bool,

  /**
   * Specify the duration in milliseconds to delay before displaying the tooltip
   */
  enterDelayMs: PropTypes.number,

  /**
   * Specify the type of button to be used as the base for the IconButton
   */
  kind: PropTypes.oneOf(['primary', 'secondary', 'ghost', 'tertiary']),

  /**
   * Provide the label to be rendered inside of the Tooltip. The label will use
   * `aria-labelledby` and will fully describe the child node that is provided.
   * This means that if you have text in the child node it will not be
   * announced to the screen reader.
   */
  label: PropTypes.node.isRequired,

  /**
   * Specify the duration in milliseconds to delay before hiding the tooltip
   */
  leaveDelayMs: PropTypes.number,

  /**
   * Specify the size of the Button. Defaults to `md`.
   */
  size: PropTypes.oneOf(['sm', 'md', 'lg'])
};

export { IconButton };
