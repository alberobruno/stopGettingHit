/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import PropTypes from 'prop-types';
import React__default, { useContext, useState, useRef, useEffect } from 'react';
import cx from 'classnames';
import deprecate from '../../prop-types/deprecate.js';
import { WarningFilled, WarningAltFilled } from '@carbon/icons-react';
import { usePrefix } from '../../internal/usePrefix.js';
import '../FluidForm/FluidForm.js';
import { FormContext } from '../FluidForm/FormContext.js';
import { useAnnouncer } from '../../internal/useAnnouncer.js';
import useIsomorphicEffect from '../../internal/useIsomorphicEffect.js';
import { useMergedRefs } from '../../internal/useMergedRefs.js';
import setupGetInstanceId from '../../tools/setupGetInstanceId.js';
import { noopFn } from '../../internal/noopFn.js';
import '../Text/index.js';
import { Text } from '../Text/Text.js';

const getInstanceId = setupGetInstanceId();
const TextArea = /*#__PURE__*/React__default.forwardRef((props, forwardRef) => {
  const {
    className,
    disabled = false,
    id,
    labelText,
    hideLabel,
    onChange = noopFn,
    onClick = noopFn,
    invalid = false,
    invalidText = '',
    helperText = '',
    light,
    placeholder = '',
    enableCounter = false,
    maxCount = undefined,
    warn = false,
    warnText = '',
    rows = 4,
    ...other
  } = props;
  const prefix = usePrefix();
  const {
    isFluid
  } = useContext(FormContext);
  const {
    defaultValue,
    value
  } = other;
  const [textCount, setTextCount] = useState(defaultValue?.toString()?.length || value?.toString()?.length || 0);
  const {
    current: textAreaInstanceId
  } = useRef(getInstanceId());
  useEffect(() => {
    setTextCount(defaultValue?.toString()?.length || value?.toString()?.length || 0);
  }, [value, defaultValue]);
  const textareaProps = {
    id,
    onChange: evt => {
      if (!disabled && onChange) {
        evt?.persist?.();
        // delay textCount assignation to give the textarea element value time to catch up if is a controlled input
        setTimeout(() => {
          setTextCount(evt.target?.value?.length);
        }, 0);
        onChange(evt);
      }
    },
    onClick: evt => {
      if (!disabled && onClick) {
        onClick(evt);
      }
    }
  };
  if (enableCounter) {
    textareaProps.maxLength = maxCount;
  }
  const ariaAnnouncement = useAnnouncer(textCount, maxCount);
  const labelClasses = cx(`${prefix}--label`, {
    [`${prefix}--visually-hidden`]: hideLabel && !isFluid,
    [`${prefix}--label--disabled`]: disabled
  });
  const label = labelText ? /*#__PURE__*/React__default.createElement(Text, {
    as: "label",
    htmlFor: id,
    className: labelClasses
  }, labelText) : null;
  const counterClasses = cx(`${prefix}--label`, {
    [`${prefix}--label--disabled`]: disabled
  });
  const counter = enableCounter && maxCount ? /*#__PURE__*/React__default.createElement(Text, {
    as: "div",
    className: counterClasses
  }, `${textCount}/${maxCount}`) : null;
  const helperTextClasses = cx(`${prefix}--form__helper-text`, {
    [`${prefix}--form__helper-text--disabled`]: disabled
  });
  const helperId = !helperText ? undefined : `text-area-helper-text-${textAreaInstanceId}`;
  const helper = helperText ? /*#__PURE__*/React__default.createElement(Text, {
    as: "div",
    id: helperId,
    className: helperTextClasses
  }, helperText) : null;
  const errorId = id + '-error-msg';
  const error = invalid ? /*#__PURE__*/React__default.createElement(Text, {
    as: "div",
    role: "alert",
    className: `${prefix}--form-requirement`,
    id: errorId
  }, invalidText, isFluid && /*#__PURE__*/React__default.createElement(WarningFilled, {
    className: `${prefix}--text-area__invalid-icon`
  })) : null;
  const warning = warn ? /*#__PURE__*/React__default.createElement(Text, {
    as: "div",
    role: "alert",
    className: `${prefix}--form-requirement`
  }, warnText, isFluid && /*#__PURE__*/React__default.createElement(WarningAltFilled, {
    className: `${prefix}--text-area__invalid-icon ${prefix}--text-area__invalid-icon--warning`
  })) : null;
  const textareaClasses = cx(`${prefix}--text-area`, {
    [`${prefix}--text-area--light`]: light,
    [`${prefix}--text-area--invalid`]: invalid,
    [`${prefix}--text-area--warn`]: warn
  });
  const textareaRef = useRef(null);
  const ref = useMergedRefs([forwardRef, textareaRef]);
  useIsomorphicEffect(() => {
    if (other.cols && textareaRef.current) {
      textareaRef.current.style.width = '';
      textareaRef.current.style.resize = 'none';
    } else if (textareaRef.current) {
      textareaRef.current.style.width = `100%`;
    }
  }, [other.cols]);
  let ariaDescribedBy;
  if (invalid) {
    ariaDescribedBy = errorId;
  } else if (!invalid && !warn && !isFluid && helperText) {
    ariaDescribedBy = helperId;
  }
  const input = /*#__PURE__*/React__default.createElement("textarea", _extends({}, other, textareaProps, {
    placeholder: placeholder,
    className: textareaClasses,
    "aria-invalid": invalid,
    "aria-describedby": ariaDescribedBy,
    disabled: disabled,
    rows: rows,
    readOnly: other.readOnly,
    ref: ref
  }));
  return /*#__PURE__*/React__default.createElement("div", {
    className: cx(`${prefix}--form-item`, className)
  }, /*#__PURE__*/React__default.createElement("div", {
    className: `${prefix}--text-area__label-wrapper`
  }, label, counter), /*#__PURE__*/React__default.createElement("div", {
    className: cx(`${prefix}--text-area__wrapper`, {
      [`${prefix}--text-area__wrapper--readonly`]: other.readOnly,
      [`${prefix}--text-area__wrapper--warn`]: warn
    }),
    "data-invalid": invalid || null
  }, invalid && !isFluid && /*#__PURE__*/React__default.createElement(WarningFilled, {
    className: `${prefix}--text-area__invalid-icon`
  }), warn && !invalid && !isFluid && /*#__PURE__*/React__default.createElement(WarningAltFilled, {
    className: `${prefix}--text-area__invalid-icon ${prefix}--text-area__invalid-icon--warning`
  }), input, /*#__PURE__*/React__default.createElement("span", {
    className: `${prefix}--text-area__counter-alert`,
    role: "alert"
  }, ariaAnnouncement), isFluid && /*#__PURE__*/React__default.createElement("hr", {
    className: `${prefix}--text-area__divider`
  }), isFluid && invalid ? error : null, isFluid && warn && !invalid ? warning : null), !invalid && !warn && !isFluid ? helper : null, invalid && !isFluid ? error : null, warn && !invalid && !isFluid ? warning : null);
});
TextArea.displayName = 'TextArea';
TextArea.propTypes = {
  /**
   * Provide a custom className that is applied directly to the underlying
   * `<textarea>` node
   */
  className: PropTypes.string,
  /**
   * Specify the `cols` attribute for the underlying `<textarea>` node
   */
  cols: PropTypes.number,
  /**
   * Optionally provide the default value of the `<textarea>`
   */
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
   * Specify whether the control is disabled
   */
  disabled: PropTypes.bool,
  /**
   * Specify whether to display the character counter
   */
  enableCounter: PropTypes.bool,
  /**
   * Provide text that is used alongside the control label for additional help
   */
  helperText: PropTypes.node,
  /**
   * Specify whether you want the underlying label to be visually hidden
   */
  hideLabel: PropTypes.bool,
  /**
   * Provide a unique identifier for the control
   */
  id: PropTypes.string,
  /**
   * Specify whether the control is currently invalid
   */
  invalid: PropTypes.bool,
  /**
   * Provide the text that is displayed when the control is in an invalid state
   */
  invalidText: PropTypes.node,
  /**
   * Provide the text that will be read by a screen reader when visiting this
   * control
   */
  labelText: PropTypes.node.isRequired,
  /**
   * `true` to use the light version. For use on $ui-01 backgrounds only.
   * Don't use this to make tile background color same as container background color.
   */
  light: deprecate(PropTypes.bool, 'The `light` prop for `TextArea` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),
  /**
   * Max character count allowed for the textarea. This is needed in order for enableCounter to display
   */
  maxCount: PropTypes.number,
  /**
   * Optionally provide an `onChange` handler that is called whenever `<textarea>`
   * is updated
   */
  onChange: PropTypes.func,
  /**
   * Optionally provide an `onClick` handler that is called whenever the
   * `<textarea>` is clicked
   */
  onClick: PropTypes.func,
  /**
   * Specify the placeholder attribute for the `<textarea>`
   */
  placeholder: PropTypes.string,
  /**
   * Whether the textarea should be read-only
   */
  readOnly: PropTypes.bool,
  /**
   * Specify the rows attribute for the `<textarea>`
   */
  rows: PropTypes.number,
  /**
   * Provide the current value of the `<textarea>`
   */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
   * Specify whether the control is currently in warning state
   */
  warn: PropTypes.bool,
  /**
   * Provide the text that is displayed when the control is in warning state
   */
  warnText: PropTypes.node
};

export { TextArea as default };
