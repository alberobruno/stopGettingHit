/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, defineProperty as _defineProperty, extends as _extends, objectSpread2 as _objectSpread2 } from '../../_virtual/_rollupPluginBabelHelpers.js';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React__default from 'react';
import Link, { LinkPropTypes } from './Link.js';
import SideNavIcon from './SideNavIcon.js';
import SideNavItem from './SideNavItem.js';
import SideNavLinkText from './SideNavLinkText.js';
import { usePrefix } from '../../internal/usePrefix.js';

var _excluded = ["className", "children", "renderIcon", "isActive", "large"];
var SideNavLink = /*#__PURE__*/React__default.forwardRef(function SideNavLink(_ref, ref) {
  var _cx;

  var customClassName = _ref.className,
      children = _ref.children,
      IconElement = _ref.renderIcon,
      isActive = _ref.isActive,
      large = _ref.large,
      rest = _objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix();
  var className = cx((_cx = {}, _defineProperty(_cx, "".concat(prefix, "--side-nav__link"), true), _defineProperty(_cx, "".concat(prefix, "--side-nav__link--current"), isActive), _defineProperty(_cx, customClassName, !!customClassName), _cx));
  return /*#__PURE__*/React__default.createElement(SideNavItem, {
    large: large
  }, /*#__PURE__*/React__default.createElement(Link, _extends({}, rest, {
    className: className,
    ref: ref
  }), IconElement && /*#__PURE__*/React__default.createElement(SideNavIcon, {
    small: true
  }, /*#__PURE__*/React__default.createElement(IconElement, null)), /*#__PURE__*/React__default.createElement(SideNavLinkText, null, children)));
});
SideNavLink.displayName = 'SideNavLink';
SideNavLink.propTypes = _objectSpread2(_objectSpread2({}, LinkPropTypes), {}, {
  /**
   * Specify the text content for the link
   */
  children: PropTypes.node.isRequired,

  /**
   * Provide an optional class to be applied to the containing node
   */
  className: PropTypes.string,

  /**
   * Property to indicate if the side nav container is open (or not). Use to
   * keep local state and styling in step with the SideNav expansion state.
   */
  isSideNavExpanded: PropTypes.bool,

  /**
   * Specify if this is a large variation of the SideNavLink
   */
  large: PropTypes.bool,

  /**
   * Provide an icon to render in the side navigation link. Should be a React class.
   */
  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
});
SideNavLink.defaultProps = {
  element: 'a',
  large: false
}; // eslint-disable-next-line react/display-name
var SideNavLink$1 = SideNavLink;

export { SideNavLink$1 as default };
