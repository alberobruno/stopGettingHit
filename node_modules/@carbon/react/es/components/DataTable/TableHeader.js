/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { defineProperty as _defineProperty, objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React__default from 'react';
import { ArrowUp, ArrowsVertical } from '@carbon/icons-react';
import './state/sorting.js';
import { useId } from '../../internal/useId.js';
import { usePrefix } from '../../internal/usePrefix.js';
import { sortStates } from './state/sortStates.js';

var _excluded = ["className", "children", "colSpan", "isSortable", "isSortHeader", "onClick", "scope", "sortDirection", "translateWithId", "id"];

var _sortDirections;
var translationKeys = {
  buttonDescription: 'carbon.table.header.icon.description'
};

var translateWithId = function translateWithId(key, _ref) {
  var header = _ref.header,
      sortDirection = _ref.sortDirection,
      isSortHeader = _ref.isSortHeader,
      sortStates = _ref.sortStates;

  if (key === translationKeys.buttonDescription) {
    if (isSortHeader) {
      // When transitioning, we know that the sequence of states is as follows:
      // NONE -> ASC -> DESC -> NONE
      if (sortDirection === sortStates.NONE) {
        return "Click to sort rows by ".concat(header, " header in ascending order");
      }

      if (sortDirection === sortStates.ASC) {
        return "Click to sort rows by ".concat(header, " header in descending order");
      }

      return "Click to unsort rows by ".concat(header, " header");
    }

    return "Click to sort rows by ".concat(header, " header in ascending order");
  }

  return '';
};

var sortDirections = (_sortDirections = {}, _defineProperty(_sortDirections, sortStates.NONE, 'none'), _defineProperty(_sortDirections, sortStates.ASC, 'ascending'), _defineProperty(_sortDirections, sortStates.DESC, 'descending'), _sortDirections);
var TableHeader = /*#__PURE__*/React__default.forwardRef(function TableHeader(_ref2, ref) {
  var _cx;

  var headerClassName = _ref2.className,
      children = _ref2.children,
      colSpan = _ref2.colSpan,
      isSortable = _ref2.isSortable,
      isSortHeader = _ref2.isSortHeader,
      onClick = _ref2.onClick,
      scope = _ref2.scope,
      sortDirection = _ref2.sortDirection,
      t = _ref2.translateWithId,
      id = _ref2.id,
      rest = _objectWithoutProperties(_ref2, _excluded);

  var prefix = usePrefix();
  var uniqueId = useId('table-sort');

  if (!isSortable) {
    return /*#__PURE__*/React__default.createElement("th", _extends({}, rest, {
      id: id,
      className: headerClassName,
      scope: scope,
      colSpan: colSpan,
      ref: ref
    }), children ? /*#__PURE__*/React__default.createElement("div", {
      className: "".concat(prefix, "--table-header-label")
    }, children) : null);
  }

  var className = cx(headerClassName, (_cx = {}, _defineProperty(_cx, "".concat(prefix, "--table-sort"), true), _defineProperty(_cx, "".concat(prefix, "--table-sort--active"), isSortHeader && sortDirection !== sortStates.NONE), _defineProperty(_cx, "".concat(prefix, "--table-sort--ascending"), isSortHeader && sortDirection === sortStates.DESC), _cx));
  var ariaSort = !isSortHeader ? 'none' : sortDirections[sortDirection];
  var sortDescription = t('carbon.table.header.icon.description', {
    header: children,
    sortDirection: sortDirection,
    isSortHeader: isSortHeader,
    sortStates: sortStates
  });
  return /*#__PURE__*/React__default.createElement("th", {
    id: id,
    "aria-sort": ariaSort,
    className: headerClassName,
    colSpan: colSpan,
    ref: ref,
    scope: scope
  }, /*#__PURE__*/React__default.createElement("div", {
    style: {
      display: 'none'
    },
    id: uniqueId
  }, sortDescription), /*#__PURE__*/React__default.createElement("button", _extends({
    type: "button",
    "aria-describedby": uniqueId,
    className: className,
    onClick: onClick
  }, rest), /*#__PURE__*/React__default.createElement("span", {
    className: "".concat(prefix, "--table-sort__flex")
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "".concat(prefix, "--table-header-label")
  }, children), /*#__PURE__*/React__default.createElement(ArrowUp, {
    size: 20,
    className: "".concat(prefix, "--table-sort__icon")
  }), /*#__PURE__*/React__default.createElement(ArrowsVertical, {
    size: 20,
    className: "".concat(prefix, "--table-sort__icon-unsorted")
  }))));
});
TableHeader.propTypes = {
  /**
   * Pass in children that will be embedded in the table header label
   */
  children: PropTypes.node,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes.string,

  /**
   * Specify `colSpan` as a non-negative integer value to indicate how
   * many columns the TableHeader cell extends in a table
   */
  colSpan: PropTypes.number,

  /**
   * Supply an id to the th element.
   */
  id: PropTypes.string,

  /**
   * Specify whether this header is the header by which a table is being sorted
   * by
   */
  isSortHeader: PropTypes.bool,

  /**
   * Specify whether this header is one through which a user can sort the table
   */
  isSortable: PropTypes.bool,

  /**
   * Hook that is invoked when the header is clicked
   */
  onClick: PropTypes.func,

  /**
   * Specify the scope of this table header. You can find more info about this
   * attribute at the following URL:
   * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-scope
   */
  scope: PropTypes.string.isRequired,

  /**
   * Specify which direction we are currently sorting by, should be one of DESC,
   * NONE, or ASC.
   */
  sortDirection: PropTypes.oneOf(Object.values(sortStates)),

  /**
   * Supply a method to translate internal strings with your i18n tool of
   * choice. Translation keys are available on the `translationKeys` field for
   * this component.
   */
  translateWithId: PropTypes.func
};
TableHeader.defaultProps = {
  isSortable: false,
  scope: 'col',
  translateWithId: translateWithId
};
TableHeader.translationKeys = Object.values(translationKeys);
TableHeader.displayName = 'TableHeader';
var TableHeader$1 = TableHeader;

export { TableHeader$1 as default };
