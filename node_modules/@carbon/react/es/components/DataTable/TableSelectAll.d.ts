/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import PropTypes from 'prop-types';
import React from 'react';
interface TableSelectAllProps {
    /**
     * Specify the aria label for the underlying input control
     */
    ariaLabel: string;
    /**
     * Specify whether all items are selected, or not
     */
    checked: boolean;
    /**
     * The CSS class names of the cell that wraps the underlying input control
     */
    className?: string;
    /**
     * Specify whether the checkbox input should be disabled
     */
    disabled?: boolean;
    /**
     * Provide an `id` for the underlying input control
     */
    id: string;
    /**
     * Specify whether the selection only has a subset of all items
     */
    indeterminate?: boolean;
    /**
     * Provide a `name` for the underlying input control
     */
    name: string;
    /**
     * Provide a handler to listen to when a user initiates a selection request
     */
    onSelect: React.MouseEventHandler<HTMLInputElement>;
}
declare const TableSelectAll: {
    ({ ariaLabel, checked, id, indeterminate, name, onSelect, disabled, className, }: TableSelectAllProps): JSX.Element;
    propTypes: {
        /**
         * Specify the aria label for the underlying input control
         */
        ariaLabel: PropTypes.Validator<string>;
        /**
         * Specify whether all items are selected, or not
         */
        checked: PropTypes.Validator<boolean>;
        /**
         * The CSS class names of the cell that wraps the underlying input control
         */
        className: PropTypes.Requireable<string>;
        /**
         * Specify whether the checkbox input should be disabled
         */
        disabled: PropTypes.Requireable<boolean>;
        /**
         * Provide an `id` for the underlying input control
         */
        id: PropTypes.Validator<string>;
        /**
         * Specify whether the selection only has a subset of all items
         */
        indeterminate: PropTypes.Requireable<boolean>;
        /**
         * Provide a `name` for the underlying input control
         */
        name: PropTypes.Validator<string>;
        /**
         * Provide a handler to listen to when a user initiates a selection request
         */
        onSelect: PropTypes.Validator<(...args: any[]) => any>;
    };
};
export default TableSelectAll;
