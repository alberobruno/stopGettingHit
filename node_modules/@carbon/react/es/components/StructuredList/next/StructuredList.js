/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, defineProperty as _defineProperty, slicedToArray as _slicedToArray, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import React__default, { useState } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { useId } from '../../../internal/useId.js';
import deprecate from '../../../prop-types/deprecate.js';
import { usePrefix } from '../../../internal/usePrefix.js';

var _excluded = ["children", "selection", "className", "ariaLabel"],
    _excluded2 = ["children", "className"],
    _excluded3 = ["children", "className"],
    _excluded4 = ["onKeyDown", "children", "className", "head"],
    _excluded5 = ["className", "name", "title", "id"],
    _excluded6 = ["children", "className", "head", "noWrap"];
var GridSelectedRowStateContext = /*#__PURE__*/React__default.createContext(null);
var GridSelectedRowDispatchContext = /*#__PURE__*/React__default.createContext(null);
function StructuredListWrapper(props) {
  var children = props.children,
      selection = props.selection,
      className = props.className,
      ariaLabel = props.ariaLabel,
      other = _objectWithoutProperties(props, _excluded);

  var prefix = usePrefix();
  var classes = cx("".concat(prefix, "--structured-list"), className, _defineProperty({}, "".concat(prefix, "--structured-list--selection"), selection));

  var _React$useState = React__default.useState(null),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      selectedRow = _React$useState2[0],
      setSelectedRow = _React$useState2[1];

  return /*#__PURE__*/React__default.createElement(GridSelectedRowStateContext.Provider, {
    value: selectedRow
  }, /*#__PURE__*/React__default.createElement(GridSelectedRowDispatchContext.Provider, {
    value: setSelectedRow
  }, /*#__PURE__*/React__default.createElement("div", _extends({
    role: "grid",
    className: classes
  }, other, {
    "aria-label": ariaLabel
  }), children)));
}
StructuredListWrapper.propTypes = {
  /**
   * Specify a label to be read by screen readers on the container node
   */
  ariaLabel: PropTypes.string,

  /**
   * Provide the contents of your StructuredListWrapper
   */
  children: PropTypes.node,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes.string,

  /**
   * Specify whether your StructuredListWrapper should have selections
   */
  selection: PropTypes.bool
};
StructuredListWrapper.defaultProps = {
  selection: false,
  ariaLabel: 'Structured list section'
};
function StructuredListHead(props) {
  var children = props.children,
      className = props.className,
      other = _objectWithoutProperties(props, _excluded2);

  var prefix = usePrefix();
  var classes = cx("".concat(prefix, "--structured-list-thead"), className);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    role: "rowgroup",
    className: classes
  }, other), children);
}
StructuredListHead.propTypes = {
  /**
   * Provide the contents of your StructuredListHead
   */
  children: PropTypes.node,

  /**
   * Specify an optional className to be applied to the node
   */
  className: PropTypes.string
};
function StructuredListBody(props) {
  var children = props.children,
      className = props.className,
      other = _objectWithoutProperties(props, _excluded3);

  var prefix = usePrefix();
  var classes = cx("".concat(prefix, "--structured-list-tbody"), className);
  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: classes,
    role: "rowgroup"
  }, other), children);
}
StructuredListBody.propTypes = {
  /**
   * Provide the contents of your StructuredListBody
   */
  children: PropTypes.node,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes.string,
  head: PropTypes.bool,

  /**
   * Provide a handler that is invoked on the key down event for the control
   */
  onKeyDown: PropTypes.func
};
StructuredListBody.defaultProps = {
  onKeyDown: function onKeyDown() {}
};
var GridRowContext = /*#__PURE__*/React__default.createContext(null);
function StructuredListRow(props) {
  var _classNames2;

  var onKeyDown = props.onKeyDown,
      children = props.children,
      className = props.className,
      head = props.head,
      other = _objectWithoutProperties(props, _excluded4);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      hasFocusWithin = _useState2[0],
      setHasFocusWithin = _useState2[1];

  var id = useId('grid-input');
  var setSelectedRow = React__default.useContext(GridSelectedRowDispatchContext);
  var prefix = usePrefix();
  var value = {
    id: id
  };
  var classes = cx("".concat(prefix, "--structured-list-row"), className, (_classNames2 = {}, _defineProperty(_classNames2, "".concat(prefix, "--structured-list-row--header-row"), head), _defineProperty(_classNames2, "".concat(prefix, "--structured-list-row--focused-within"), hasFocusWithin), _classNames2));
  return head ? /*#__PURE__*/React__default.createElement("div", _extends({
    role: "row"
  }, other, {
    className: classes
  }), children) :
  /*#__PURE__*/
  // eslint-disable-next-line jsx-a11y/interactive-supports-focus
  React__default.createElement("div", _extends({}, other, {
    role: "row",
    className: classes,
    onClick: function onClick() {
      return setSelectedRow(id);
    },
    onFocus: function onFocus() {
      setHasFocusWithin(true);
    },
    onBlur: function onBlur() {
      setHasFocusWithin(false);
    },
    onKeyDown: onKeyDown
  }), /*#__PURE__*/React__default.createElement(GridRowContext.Provider, {
    value: value
  }, children));
}
StructuredListRow.propTypes = {
  /**
   * Provide the contents of your StructuredListRow
   */
  children: PropTypes.node,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes.string,

  /**
   * Specify whether your StructuredListRow should be used as a header row
   */
  head: PropTypes.bool,

  /**
   * Specify whether a `<label>` should be used
   */
  label: deprecate(PropTypes.bool, "\nThe `label` prop is no longer needed and will be removed in the next major version of Carbon."),

  /**
   * Provide a handler that is invoked on the key down event for the control,
   */
  onKeyDown: PropTypes.func
};
StructuredListRow.defaultProps = {
  head: false,
  onKeyDown: function onKeyDown() {}
};
function StructuredListInput(props) {
  var _row$id;

  var defaultId = useId('structureListInput');

  var className = props.className,
      _props$name = props.name,
      name = _props$name === void 0 ? "structured-list-input-".concat(defaultId) : _props$name,
      title = props.title,
      id = props.id,
      other = _objectWithoutProperties(props, _excluded5);

  var prefix = usePrefix();
  var classes = cx("".concat(prefix, "--structured-list-input"), "".concat(prefix, "--visually-hidden"), className);
  var row = React__default.useContext(GridRowContext);
  var selectedRow = React__default.useContext(GridSelectedRowStateContext);
  var setSelectedRow = React__default.useContext(GridSelectedRowDispatchContext);
  return /*#__PURE__*/React__default.createElement("input", _extends({}, other, {
    type: "radio",
    tabIndex: 0,
    checked: row && row.id === selectedRow,
    value: (_row$id = row === null || row === void 0 ? void 0 : row.id) !== null && _row$id !== void 0 ? _row$id : '',
    onChange: function onChange(event) {
      setSelectedRow(event.target.value);
    },
    id: id !== null && id !== void 0 ? id : defaultId,
    className: classes,
    name: name,
    title: title
  }));
}
StructuredListInput.propTypes = {
  /**
   * Specify an optional className to be applied to the input
   */
  className: PropTypes.string,

  /**
   * Specify whether the underlying input should be checked by default
   */
  defaultChecked: deprecate(PropTypes.bool, "\nThe prop `defaultChecked` is no longer needed and will be removed in the next major version of Carbon."),

  /**
   * Specify a custom `id` for the input
   */
  id: PropTypes.string,

  /**
   * Provide a `name` for the input
   */
  name: PropTypes.string,

  /**
   * Provide an optional hook that is called each time the input is updated
   */
  onChange: deprecate(PropTypes.func, "\nThe prop `onChange` will be removed in the next major version of Carbon."),

  /**
   * Provide a `title` for the input
   */
  title: PropTypes.string,

  /**
   * Specify the value of the input
   */
  value: deprecate(PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired, "\nThe prop `value` will be removed in the next major version of Carbon.")
};
StructuredListInput.defaultProps = {
  title: 'title'
};
function StructuredListCell(props) {
  var _classNames3;

  var children = props.children,
      className = props.className,
      head = props.head,
      noWrap = props.noWrap,
      other = _objectWithoutProperties(props, _excluded6);

  var prefix = usePrefix();
  var classes = cx(className, (_classNames3 = {}, _defineProperty(_classNames3, "".concat(prefix, "--structured-list-th"), head), _defineProperty(_classNames3, "".concat(prefix, "--structured-list-td"), !head), _defineProperty(_classNames3, "".concat(prefix, "--structured-list-content--nowrap"), noWrap), _classNames3));

  if (head) {
    return /*#__PURE__*/React__default.createElement("span", _extends({
      className: classes,
      role: "columnheader"
    }, other), children);
  }

  return /*#__PURE__*/React__default.createElement("div", _extends({
    className: classes,
    role: "cell"
  }, other), children);
}
StructuredListCell.propTypes = {
  /**
   * Provide the contents of your StructuredListCell
   */
  children: PropTypes.node,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes.string,

  /**
   * Specify whether your StructuredListCell should be used as a header cell
   */
  head: PropTypes.bool,

  /**
   * Specify whether your StructuredListCell should have text wrapping
   */
  noWrap: PropTypes.bool
};
StructuredListCell.defaultProps = {
  head: false,
  noWrap: false
};

export { StructuredListBody, StructuredListCell, StructuredListHead, StructuredListInput, StructuredListRow, StructuredListWrapper };
