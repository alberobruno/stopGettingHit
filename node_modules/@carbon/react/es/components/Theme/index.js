/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { objectWithoutProperties as _objectWithoutProperties, defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React__default, { useMemo } from 'react';
import { usePrefix } from '../../internal/usePrefix.js';
import { LayerContext } from '../Layer/LayerContext.js';

var _excluded = ["as", "children", "className", "theme"];
var ThemeContext = /*#__PURE__*/React__default.createContext({
  theme: 'white'
});
function GlobalTheme(_ref) {
  var children = _ref.children,
      theme = _ref.theme;
  var value = useMemo(function () {
    return {
      theme: theme
    };
  }, [theme]);
  return /*#__PURE__*/React__default.createElement(ThemeContext.Provider, {
    value: value
  }, children);
}
GlobalTheme.propTypes = {
  /**
   * Provide child elements to be rendered inside of `GlobalTheme`, this is
   * typically the root of your app
   */
  children: PropTypes.node,

  /**
   * Specify the global theme for your app
   */
  theme: PropTypes.oneOf(['white', 'g10', 'g90', 'g100'])
};
/**
 * Specify the theme to be applied to a page, or a region in a page
 */

function Theme(_ref2) {
  var _cx;

  var _ref2$as = _ref2.as,
      BaseComponent = _ref2$as === void 0 ? 'div' : _ref2$as,
      children = _ref2.children,
      customClassName = _ref2.className,
      theme = _ref2.theme,
      rest = _objectWithoutProperties(_ref2, _excluded);

  var prefix = usePrefix();
  var className = cx(customClassName, (_cx = {}, _defineProperty(_cx, "".concat(prefix, "--white"), theme === 'white'), _defineProperty(_cx, "".concat(prefix, "--g10"), theme === 'g10'), _defineProperty(_cx, "".concat(prefix, "--g90"), theme === 'g90'), _defineProperty(_cx, "".concat(prefix, "--g100"), theme === 'g100'), _defineProperty(_cx, "".concat(prefix, "--layer-one"), true), _cx));
  var value = React__default.useMemo(function () {
    return {
      theme: theme
    };
  }, [theme]);
  return /*#__PURE__*/React__default.createElement(ThemeContext.Provider, {
    value: value
  }, /*#__PURE__*/React__default.createElement(LayerContext.Provider, {
    value: 1
  }, /*#__PURE__*/React__default.createElement(BaseComponent, _extends({}, rest, {
    className: className
  }), children)));
}
Theme.propTypes = {
  /**
   * Specify a custom component or element to be rendered as the top-level
   * element in the component
   */
  as: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.elementType]),

  /**
   * Provide child elements to be rendered inside of `Theme`
   */
  children: PropTypes.node,

  /**
   * Provide a custom class name to be used on the outermost element rendered by
   * the component
   */
  className: PropTypes.string,

  /**
   * Specify the theme
   */
  theme: PropTypes.oneOf(['white', 'g10', 'g90', 'g100'])
};
/**
 * Get access to the current theme
 */

function useTheme() {
  return React__default.useContext(ThemeContext);
}

export { GlobalTheme, Theme, ThemeContext, useTheme };
