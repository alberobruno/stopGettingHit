/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var cx = require('classnames');
var PropTypes = require('prop-types');
var React = require('react');
var index = require('../Search/index.js');
var instanceId = require('./tools/instanceId.js');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["className", "searchContainerClass", "onChange", "onClear", "translateWithId", "placeholder", "labelText", "expanded", "defaultExpanded", "defaultValue", "disabled", "onExpand", "persistent", "id", "onBlur", "onFocus"];
var getInstanceId = instanceId["default"]();
var translationKeys = {
  'carbon.table.toolbar.search.label': 'Filter table',
  'carbon.table.toolbar.search.placeholder': 'Filter table'
};

var translateWithId = function translateWithId(id) {
  return translationKeys[id];
};

var TableToolbarSearch = function TableToolbarSearch(_ref) {
  var _cx;

  var className = _ref.className,
      searchContainerClass = _ref.searchContainerClass,
      onChangeProp = _ref.onChange,
      onClear = _ref.onClear,
      t = _ref.translateWithId,
      placeholder = _ref.placeholder,
      labelText = _ref.labelText,
      expandedProp = _ref.expanded,
      defaultExpanded = _ref.defaultExpanded,
      defaultValue = _ref.defaultValue,
      disabled = _ref.disabled,
      onExpand = _ref.onExpand,
      persistent = _ref.persistent,
      id = _ref.id,
      onBlur = _ref.onBlur,
      onFocus = _ref.onFocus,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var _useRef = React.useRef(expandedProp !== undefined),
      controlled = _useRef.current;

  var _useState = React.useState(defaultExpanded || defaultValue),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      expandedState = _useState2[0],
      setExpandedState = _useState2[1];

  var expanded = controlled ? expandedProp : expandedState;

  var _useState3 = React.useState(defaultValue || ''),
      _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
      value = _useState4[0],
      setValue = _useState4[1];

  var uniqueId = React.useMemo(getInstanceId, []);

  var _useState5 = React.useState(null),
      _useState6 = _rollupPluginBabelHelpers.slicedToArray(_useState5, 2),
      focusTarget = _useState6[0],
      setFocusTarget = _useState6[1];

  var prefix = usePrefix.usePrefix();
  React.useEffect(function () {
    if (focusTarget) {
      focusTarget.current.querySelector('input').focus();
      setFocusTarget(null);
    }
  }, [focusTarget]);
  React.useEffect(function () {
    if (defaultValue) {
      onChangeProp('', defaultValue);
    }
  }, //eslint-disable-next-line react-hooks/exhaustive-deps
  []);
  var searchClasses = cx__default["default"](className, (_cx = {}, _rollupPluginBabelHelpers.defineProperty(_cx, searchContainerClass, searchContainerClass), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--toolbar-search-container-active"), expanded), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--toolbar-search-container-disabled"), disabled), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--toolbar-search-container-expandable"), !persistent), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--toolbar-search-container-persistent"), persistent), _cx));

  var handleExpand = function handleExpand(event) {
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !expanded;

    if (!disabled) {
      if (!controlled && !persistent) {
        setExpandedState(value);
      }

      if (onExpand) {
        onExpand(event, value);
      }
    }
  };

  var onChange = function onChange(e) {
    setValue(e.target.value);

    if (onChangeProp) {
      onChangeProp(e);
    }
  };

  var handleOnFocus = function handleOnFocus(event) {
    return handleExpand(event, true);
  };

  var handleOnBlur = function handleOnBlur(event) {
    return !value && handleExpand(event, false);
  };

  return /*#__PURE__*/React__default["default"].createElement(index["default"], _rollupPluginBabelHelpers["extends"]({
    disabled: disabled,
    className: searchClasses,
    value: value,
    id: typeof id !== 'undefined' ? id : uniqueId.toString(),
    labelText: labelText || t('carbon.table.toolbar.search.label'),
    placeholder: placeholder || t('carbon.table.toolbar.search.placeholder'),
    onChange: onChange,
    onClear: onClear,
    onFocus: onFocus ? function (event) {
      return onFocus(event, handleExpand);
    } : handleOnFocus,
    onBlur: onBlur ? function (event) {
      return onBlur(event, handleExpand);
    } : handleOnBlur
  }, rest));
};

TableToolbarSearch.propTypes = {
  children: PropTypes__default["default"].node,

  /**
   * Provide an optional class name for the search container
   */
  className: PropTypes__default["default"].string,

  /**
   * Specifies if the search should initially render in an expanded state
   */
  defaultExpanded: PropTypes__default["default"].bool,

  /**
   * Provide an optional default value for the Search component
   */
  defaultValue: PropTypes__default["default"].string,

  /**
   * Specifies if the search should be disabled
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * Specifies if the search should expand
   */
  expanded: PropTypes__default["default"].bool,

  /**
   * Provide an optional id for the search container
   */
  id: PropTypes__default["default"].string,

  /**
   * Provide an optional label text for the Search component icon
   */
  labelText: PropTypes__default["default"].string,

  /**
   * Provide an optional function to be called when the search input loses focus, this will be
   * passed the event as the first parameter and a function to handle the expanding of the search
   * input as the second
   */
  onBlur: PropTypes__default["default"].func,

  /**
   * Provide an optional hook that is called each time the input is updated
   */
  onChange: PropTypes__default["default"].func,

  /**
   * Optional callback called when the search value is cleared.
   */
  onClear: PropTypes__default["default"].func,

  /**
   * Provide an optional hook that is called each time the input is expanded
   */
  onExpand: PropTypes__default["default"].func,

  /**
   * Provide an optional function to be called when the search input gains focus, this will be
   * passed the event as the first parameter and a function to handle the expanding of the search
   * input as the second.
   */
  onFocus: PropTypes__default["default"].func,

  /**
   * Whether the search should be allowed to expand
   */
  persistent: PropTypes__default["default"].bool,

  /**
   * Provide an optional placeholder text for the Search component
   */
  placeholder: PropTypes__default["default"].string,

  /**
   * Provide an optional className for the overall container of the Search
   */
  searchContainerClass: PropTypes__default["default"].string,

  /**
   * Optional prop to specify the tabIndex of the <Search> (in expanded state) or the container (in collapsed state)
   */
  tabIndex: PropTypes__default["default"].oneOfType([PropTypes__default["default"].number, PropTypes__default["default"].string]),

  /**
   * Provide custom text for the component for each translation id
   */
  translateWithId: PropTypes__default["default"].func.isRequired
};
TableToolbarSearch.defaultProps = {
  tabIndex: '0',
  translateWithId: translateWithId,
  persistent: false,
  onClear: function onClear() {}
};
var TableToolbarSearch$1 = TableToolbarSearch;

exports["default"] = TableToolbarSearch$1;
