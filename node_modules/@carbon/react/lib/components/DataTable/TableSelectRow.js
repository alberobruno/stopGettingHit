/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var cx = require('classnames');
var InlineCheckbox = require('../InlineCheckbox/InlineCheckbox.js');
var index = require('../RadioButton/index.js');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var TableSelectRow = function TableSelectRow(_ref) {
  var _classNames;

  var ariaLabel = _ref.ariaLabel,
      checked = _ref.checked,
      id = _ref.id,
      name = _ref.name,
      onSelect = _ref.onSelect,
      onChange = _ref.onChange,
      disabled = _ref.disabled,
      radio = _ref.radio,
      className = _ref.className;
  var prefix = usePrefix.usePrefix();
  var selectionInputProps = {
    id: id,
    name: name,
    onClick: onSelect,
    onChange: onChange,
    checked: checked,
    disabled: disabled
  };
  var InlineInputComponent = radio ? index["default"] : InlineCheckbox["default"];
  var tableSelectRowClasses = cx__default["default"]("".concat(prefix, "--table-column-checkbox"), (_classNames = {}, _rollupPluginBabelHelpers.defineProperty(_classNames, className, className), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--table-column-radio"), radio), _classNames));
  return /*#__PURE__*/React__default["default"].createElement("td", {
    className: tableSelectRowClasses
  }, /*#__PURE__*/React__default["default"].createElement(InlineInputComponent, _rollupPluginBabelHelpers["extends"]({}, selectionInputProps, radio && {
    labelText: ariaLabel,
    hideLabel: true
  }, !radio && {
    ariaLabel: ariaLabel
  })));
};

TableSelectRow.propTypes = {
  /**
   * Specify the aria label for the underlying input control
   */
  ariaLabel: PropTypes__default["default"].string.isRequired,

  /**
   * Specify whether all items are selected, or not
   */
  checked: PropTypes__default["default"].bool.isRequired,

  /**
   * The CSS class names of the cell that wraps the underlying input control
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether the control is disabled
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * Provide an `id` for the underlying input control
   */
  id: PropTypes__default["default"].string.isRequired,

  /**
   * Provide a `name` for the underlying input control
   */
  name: PropTypes__default["default"].string.isRequired,

  /**
   * Provide an optional hook that is called each time the input is updated
   */
  onChange: PropTypes__default["default"].func,

  /**
   * Provide a handler to listen to when a user initiates a selection request
   */
  onSelect: PropTypes__default["default"].func.isRequired,

  /**
   * Specify whether the control should be a radio button or inline checkbox
   */
  radio: PropTypes__default["default"].bool
};
var TableSelectRow$1 = TableSelectRow;

exports["default"] = TableSelectRow$1;
