/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var cx = require('classnames');
var types = require('../../prop-types/types.js');
var index = require('../IconButton/index.js');
var events = require('../../tools/events.js');
var usePrefix = require('../../internal/usePrefix.js');
var useId = require('../../internal/useId.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var _excluded = ["as", "children", "className", "dangerDescription", "disabled", "hasIconOnly", "href", "iconDescription", "isExpressive", "isSelected", "kind", "onBlur", "onClick", "onFocus", "onMouseEnter", "onMouseLeave", "renderIcon", "size", "tabIndex", "tooltipAlignment", "tooltipPosition", "type"];
var Button = /*#__PURE__*/React__default["default"].forwardRef(function Button(_ref, ref) {
  var _classNames;

  var as = _ref.as,
      children = _ref.children,
      className = _ref.className,
      _ref$dangerDescriptio = _ref.dangerDescription,
      dangerDescription = _ref$dangerDescriptio === void 0 ? 'danger' : _ref$dangerDescriptio,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$hasIconOnly = _ref.hasIconOnly,
      hasIconOnly = _ref$hasIconOnly === void 0 ? false : _ref$hasIconOnly,
      href = _ref.href,
      iconDescription = _ref.iconDescription,
      _ref$isExpressive = _ref.isExpressive,
      isExpressive = _ref$isExpressive === void 0 ? false : _ref$isExpressive,
      isSelected = _ref.isSelected,
      _ref$kind = _ref.kind,
      kind = _ref$kind === void 0 ? 'primary' : _ref$kind,
      onBlur = _ref.onBlur,
      onClick = _ref.onClick,
      onFocus = _ref.onFocus,
      onMouseEnter = _ref.onMouseEnter,
      onMouseLeave = _ref.onMouseLeave,
      ButtonImageElement = _ref.renderIcon,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'lg' : _ref$size,
      _ref$tabIndex = _ref.tabIndex,
      tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex,
      _ref$tooltipAlignment = _ref.tooltipAlignment,
      tooltipAlignment = _ref$tooltipAlignment === void 0 ? 'center' : _ref$tooltipAlignment,
      _ref$tooltipPosition = _ref.tooltipPosition,
      tooltipPosition = _ref$tooltipPosition === void 0 ? 'top' : _ref$tooltipPosition,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'button' : _ref$type,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var tooltipRef = React.useRef(null);
  var prefix = usePrefix.usePrefix();

  var handleClick = function handleClick(evt) {
    // Prevent clicks on the tooltip from triggering the button click event
    if (evt.target === tooltipRef.current) {
      evt.preventDefault();
      return;
    }
  };

  var buttonClasses = cx__default["default"](className, (_classNames = {}, _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--btn"), true), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--btn--sm"), size === 'sm' && !isExpressive), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--btn--md"), size === 'md' && !isExpressive), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--btn--xl"), size === 'xl'), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--btn--2xl"), size === '2xl'), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--btn--").concat(kind), kind), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--btn--disabled"), disabled), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--btn--expressive"), isExpressive), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--btn--icon-only"), hasIconOnly), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--btn--selected"), hasIconOnly && isSelected && kind === 'ghost'), _classNames));
  var commonProps = {
    tabIndex: tabIndex,
    className: buttonClasses,
    ref: ref
  };
  var buttonImage = !ButtonImageElement ? null : /*#__PURE__*/React__default["default"].createElement(ButtonImageElement, {
    "aria-label": iconDescription,
    className: "".concat(prefix, "--btn__icon"),
    "aria-hidden": "true"
  });
  var iconOnlyImage = !ButtonImageElement ? null : /*#__PURE__*/React__default["default"].createElement(ButtonImageElement, null);
  var dangerButtonVariants = ['danger', 'danger--tertiary', 'danger--ghost'];
  var component = 'button';
  var assistiveId = useId.useId('danger-description');
  var otherProps = {
    disabled: disabled,
    type: type,
    'aria-describedby': dangerButtonVariants.includes(kind) ? assistiveId : null,
    'aria-pressed': hasIconOnly && kind === 'ghost' ? isSelected : null
  };
  var anchorProps = {
    href: href
  };
  var assistiveText;

  if (dangerButtonVariants.includes(kind)) {
    assistiveText = /*#__PURE__*/React__default["default"].createElement("span", {
      id: assistiveId,
      className: "".concat(prefix, "--visually-hidden")
    }, dangerDescription);
  } else {
    assistiveText = null;
  }

  if (as) {
    component = as;
    otherProps = _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, otherProps), anchorProps);
  } else if (href && !disabled) {
    component = 'a';
    otherProps = anchorProps;
  }

  var Button = /*#__PURE__*/React__default["default"].createElement(component, _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onFocus: onFocus,
    onBlur: onBlur,
    onClick: onClick
  }, rest), commonProps), otherProps), assistiveText, children, buttonImage);

  if (hasIconOnly) {
    var align;

    if (tooltipPosition === 'top' || tooltipPosition === 'bottom') {
      if (tooltipAlignment === 'center') {
        align = tooltipPosition;
      }

      if (tooltipAlignment === 'end') {
        align = "".concat(tooltipPosition, "-right");
      }

      if (tooltipAlignment === 'start') {
        align = "".concat(tooltipPosition, "-left");
      }
    }

    if (tooltipPosition === 'right' || tooltipPosition === 'left') {
      align = tooltipPosition;
    }

    return /*#__PURE__*/React__default["default"].createElement(index.IconButton, _rollupPluginBabelHelpers["extends"]({
      align: align,
      label: iconDescription,
      kind: kind,
      size: size,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      onFocus: onFocus,
      onBlur: onBlur,
      onClick: events.composeEventHandlers([onClick, handleClick])
    }, rest, commonProps, otherProps), iconOnlyImage ? iconOnlyImage : children);
  }

  return Button;
});
Button.displayName = 'Button';
Button.propTypes = {
  /**
   * Specify how the button itself should be rendered.
   * Make sure to apply all props to the root node and render children appropriately
   */
  as: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].string, PropTypes__default["default"].elementType]),

  /**
   * Specify the content of your Button
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify an optional className to be added to your Button
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify the message read by screen readers for the danger button variant
   */
  dangerDescription: PropTypes__default["default"].string,

  /**
   * Specify whether the Button should be disabled, or not
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * Specify if the button is an icon-only button
   */
  hasIconOnly: PropTypes__default["default"].bool,

  /**
   * Optionally specify an href for your Button to become an `<a>` element
   */
  href: PropTypes__default["default"].string,

  /**
   * If specifying the `renderIcon` prop, provide a description for that icon that can
   * be read by screen readers
   */
  iconDescription: function iconDescription(props) {
    if (props.renderIcon && !props.children && !props.iconDescription) {
      return new Error('renderIcon property specified without also providing an iconDescription property.');
    }

    return undefined;
  },

  /**
   * Specify whether the Button is expressive, or not
   */
  isExpressive: PropTypes__default["default"].bool,

  /**
   * Specify whether the Button is currently selected. Only applies to the Ghost variant.
   */
  isSelected: PropTypes__default["default"].bool,

  /**
   * Specify the kind of Button you want to create
   */
  kind: PropTypes__default["default"].oneOf(types.ButtonKinds),

  /**
   * Provide an optional function to be called when the button element
   * loses focus
   */
  onBlur: PropTypes__default["default"].func,

  /**
   * Provide an optional function to be called when the button element
   * is clicked
   */
  onClick: PropTypes__default["default"].func,

  /**
   * Provide an optional function to be called when the button element
   * receives focus
   */
  onFocus: PropTypes__default["default"].func,

  /**
   * Provide an optional function to be called when the mouse
   * enters the button element
   */
  onMouseEnter: PropTypes__default["default"].func,

  /**
   * Provide an optional function to be called when the mouse
   * leaves the button element
   */
  onMouseLeave: PropTypes__default["default"].func,

  /**
   * Optional prop to allow overriding the icon rendering.
   * Can be a React component class
   */
  renderIcon: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].object]),

  /**
   * Optional prop to specify the role of the Button
   */
  role: PropTypes__default["default"].string,

  /**
   * Specify the size of the button, from the following list of sizes:
   */
  size: PropTypes__default["default"].oneOf(['sm', 'md', 'lg', 'xl', '2xl']),

  /**
   * Optional prop to specify the tabIndex of the Button
   */
  tabIndex: PropTypes__default["default"].number,

  /**
   * Specify the alignment of the tooltip to the icon-only button.
   * Can be one of: start, center, or end.
   */
  tooltipAlignment: PropTypes__default["default"].oneOf(['start', 'center', 'end']),

  /**
   * Specify the direction of the tooltip for icon-only buttons.
   * Can be either top, right, bottom, or left.
   */
  tooltipPosition: PropTypes__default["default"].oneOf(['top', 'right', 'bottom', 'left']),

  /**
   * Optional prop to specify the type of the Button
   */
  type: PropTypes__default["default"].oneOf(['button', 'reset', 'submit'])
};
var Button$1 = Button;

exports["default"] = Button$1;
