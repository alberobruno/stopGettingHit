/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var cx = require('classnames');
var PropTypes = require('prop-types');
var React = require('react');
var SideNavLinkText = require('./SideNavLinkText.js');
var Link = require('./Link.js');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["children", "className", "isActive"];
var SideNavMenuItem = /*#__PURE__*/React__default["default"].forwardRef(function SideNavMenuItem(props, ref) {
  var _cx;

  var prefix = usePrefix.usePrefix();

  var children = props.children,
      customClassName = props.className,
      isActive = props.isActive,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);

  var className = cx__default["default"]("".concat(prefix, "--side-nav__menu-item"), customClassName);
  var linkClassName = cx__default["default"]((_cx = {}, _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--side-nav__link"), true), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--side-nav__link--current"), isActive), _cx));
  return /*#__PURE__*/React__default["default"].createElement("li", {
    className: className
  }, /*#__PURE__*/React__default["default"].createElement(Link["default"], _rollupPluginBabelHelpers["extends"]({}, rest, {
    className: linkClassName,
    ref: ref
  }), /*#__PURE__*/React__default["default"].createElement(SideNavLinkText["default"], null, children)));
});
SideNavMenuItem.displayName = 'SideNavMenuItem';
SideNavMenuItem.propTypes = {
  /**
   * Specify the children to be rendered inside of the `SideNavMenuItem`
   */
  children: PropTypes__default["default"].node,

  /**
   * Provide an optional class to be applied to the containing node
   */
  className: PropTypes__default["default"].string,

  /**
   * Optionally specify whether the link is "active". An active link is one that
   * has an href that is the same as the current page. Can also pass in
   * `aria-current="page"`, as well.
   */
  isActive: PropTypes__default["default"].bool
};
var SideNavMenuItem$1 = SideNavMenuItem;

exports["default"] = SideNavMenuItem$1;
