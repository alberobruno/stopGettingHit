/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var Button = require('../Button/Button.js');
var Tooltip = require('../Tooltip/next/Tooltip.js');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["align", "children", "defaultOpen", "enterDelayMs", "kind", "label", "leaveDelayMs", "size"];
var IconButton = /*#__PURE__*/React__default["default"].forwardRef(function IconButton(props, ref) {
  var align = props.align,
      children = props.children,
      _props$defaultOpen = props.defaultOpen,
      defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,
      enterDelayMs = props.enterDelayMs,
      kind = props.kind,
      label = props.label,
      leaveDelayMs = props.leaveDelayMs,
      _props$size = props.size,
      size = _props$size === void 0 ? 'md' : _props$size,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);

  var prefix = usePrefix.usePrefix();
  return /*#__PURE__*/React__default["default"].createElement(Tooltip.Tooltip, {
    align: align,
    className: "".concat(prefix, "--icon-tooltip"),
    defaultOpen: defaultOpen,
    enterDelayMs: enterDelayMs,
    label: label,
    leaveDelayMs: leaveDelayMs
  }, /*#__PURE__*/React__default["default"].createElement(Button["default"], _rollupPluginBabelHelpers["extends"]({}, rest, {
    kind: kind,
    ref: ref,
    size: size
  }), children));
});
IconButton.propTypes = {
  /**
   * Specify how the trigger should align with the tooltip
   */
  align: PropTypes__default["default"].oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'right']),

  /**
   * Provide an icon or asset to be rendered inside of the IconButton
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify whether the tooltip should be open when it first renders
   */
  defaultOpen: PropTypes__default["default"].bool,

  /**
   * Specify the duration in milliseconds to delay before displaying the tooltip
   */
  enterDelayMs: PropTypes__default["default"].number,

  /**
   * Specify the type of button to be used as the base for the IconButton
   */
  kind: PropTypes__default["default"].oneOf(['primary', 'secondary', 'ghost', 'tertiary']),

  /**
   * Provide the label to be rendered inside of the Tooltip. The label will use
   * `aria-labelledby` and will fully describe the child node that is provided.
   * This means that if you have text in the child node it will not be
   * announced to the screen reader.
   */
  label: PropTypes__default["default"].node.isRequired,

  /**
   * Specify the duration in milliseconds to delay before hiding the tooltip
   */
  leaveDelayMs: PropTypes__default["default"].number,

  /**
   * Specify the size of the Button. Defaults to `md`.
   */
  size: PropTypes__default["default"].oneOf(['sm', 'md', 'lg'])
};

exports.IconButton = IconButton;
