/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var FeatureFlags$1 = require('@carbon/feature-flags');
var PropTypes = require('prop-types');
var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

/**
 * Our FeatureFlagContext is used alongside the FeatureFlags component to enable
 * or disable feature flags in a given React tree
 */

var FeatureFlagContext = /*#__PURE__*/React.createContext(FeatureFlags$1.FeatureFlags);
/**
 * Supports an object of feature flag values with the `flags` prop, merging them
 * along with the current `FeatureFlagContext` to provide consumers to check if
 * a feature flag is enabled or disabled in a given React tree
 */

function FeatureFlags(_ref) {
  var children = _ref.children,
      _ref$flags = _ref.flags,
      flags = _ref$flags === void 0 ? {} : _ref$flags;
  var parentScope = React.useContext(FeatureFlagContext);

  var _useState = React.useState(parentScope),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      prevParentScope = _useState2[0],
      setPrevParentScope = _useState2[1];

  var _useState3 = React.useState(function () {
    var scope = FeatureFlags$1.createScope(flags);
    scope.mergeWithScope(parentScope);
    return scope;
  }),
      _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
      scope = _useState4[0],
      updateScope = _useState4[1];

  if (parentScope !== prevParentScope) {
    var _scope = FeatureFlags$1.createScope(flags);

    _scope.mergeWithScope(parentScope);

    updateScope(_scope);
    setPrevParentScope(parentScope);
  } // We use a custom hook to detect if any of the keys or their values change
  // for flags that are passed in. If they have changed, then we re-create the
  // FeatureFlagScope using the new flags


  useChangedValue(flags, isEqual, function (changedFlags) {
    var scope = FeatureFlags$1.createScope(changedFlags);
    scope.mergeWithScope(parentScope);
    updateScope(scope);
  });
  return /*#__PURE__*/React__default["default"].createElement(FeatureFlagContext.Provider, {
    value: scope
  }, children);
}

FeatureFlags.propTypes = {
  children: PropTypes__default["default"].node,

  /**
   * Provide the feature flags to enabled or disabled in the current React tree
   */
  flags: PropTypes__default["default"].objectOf(PropTypes__default["default"].bool)
};
/**
 * This hook will store previous versions of the given `value` and compare the
 * current value to the previous one using the `compare` function. If the
 * compare function returns true, then the given `callback` is invoked in an
 * effect.
 *
 * @param {any} value
 * @param {Function} compare
 * @param {Function} callback
 */

function useChangedValue(value, compare, callback) {
  var initialRender = React.useRef(false);
  var savedCallback = React.useRef(callback);

  var _useState5 = React.useState(value),
      _useState6 = _rollupPluginBabelHelpers.slicedToArray(_useState5, 2),
      prevValue = _useState6[0],
      setPrevValue = _useState6[1];

  if (!compare(prevValue, value)) {
    setPrevValue(value);
  }

  React.useEffect(function () {
    savedCallback.current = callback;
  });
  React.useEffect(function () {
    // We only want the callback triggered after the first render
    if (initialRender.current) {
      savedCallback.current(prevValue);
    }
  }, [prevValue]);
  React.useEffect(function () {
    initialRender.current = true;
  }, []);
}
/**
 * Access whether a given flag is enabled or disabled in a given
 * FeatureFlagContext
 *
 * @returns {boolean}
 */


function useFeatureFlag(flag) {
  var scope = React.useContext(FeatureFlagContext);
  return scope.enabled(flag);
}
/**
 * Access all feature flag information for the given FeatureFlagContext
 *
 * @returns {FeatureFlagScope}
 */


function useFeatureFlags() {
  return React.useContext(FeatureFlagContext);
}
/**
 * Compare two objects and determine if they are equal. This is a shallow
 * comparison since the objects we are comparing are objects with boolean flags
 * from the flags prop in the `FeatureFlags` component
 *
 * @param {object} a
 * @param {object} b
 * @returns {boolean}
 */


function isEqual(a, b) {
  if (a === b) {
    return true;
  }

  for (var _i = 0, _Object$keys = Object.keys(a); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];

    if (a[key] !== b[key]) {
      return false;
    }
  }

  for (var _i2 = 0, _Object$keys2 = Object.keys(b); _i2 < _Object$keys2.length; _i2++) {
    var _key = _Object$keys2[_i2];

    if (b[_key] !== a[_key]) {
      return false;
    }
  }

  return true;
}

exports.FeatureFlagContext = FeatureFlagContext;
exports.FeatureFlags = FeatureFlags;
exports.useFeatureFlag = useFeatureFlag;
exports.useFeatureFlags = useFeatureFlags;
