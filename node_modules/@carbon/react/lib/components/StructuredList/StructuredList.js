/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var PropTypes = require('prop-types');
var cx = require('classnames');
var setupGetInstanceId = require('../../tools/setupGetInstanceId.js');
var deprecate = require('../../prop-types/deprecate.js');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var _excluded = ["children", "selection", "className", "ariaLabel", "isCondensed", "isFlush", "border"],
    _excluded2 = ["children", "className"],
    _excluded3 = ["children", "className"],
    _excluded4 = ["onKeyDown", "tabIndex", "children", "className", "head", "label"],
    _excluded5 = ["className", "value", "name", "title", "id"],
    _excluded6 = ["children", "className", "head", "noWrap"];
var getInstanceId = setupGetInstanceId["default"]();
function StructuredListWrapper(props) {
  var _classNames;

  var children = props.children,
      selection = props.selection,
      className = props.className,
      ariaLabel = props.ariaLabel,
      isCondensed = props.isCondensed,
      isFlush = props.isFlush;
      props.border;
      var other = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);

  var prefix = usePrefix.usePrefix();
  var classes = cx__default["default"]("".concat(prefix, "--structured-list"), className, (_classNames = {}, _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--structured-list--selection"), selection), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--structured-list--condensed"), isCondensed), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--structured-list--flush"), isFlush), _classNames));
  return /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({
    role: "table",
    className: classes
  }, other, {
    "aria-label": ariaLabel
  }), children);
}
StructuredListWrapper.propTypes = {
  /**
   * Specify a label to be read by screen readers on the container node
   */
  ariaLabel: PropTypes__default["default"].string,

  /**
   * Specify whether a border should be added to your StructuredListWrapper
   */
  border: deprecate["default"](PropTypes__default["default"].bool, "\nThe prop `border` will be removed in the next major version of Carbon."),

  /**
   * Provide the contents of your StructuredListWrapper
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify if structured list is condensed, default is false
   */
  isCondensed: PropTypes__default["default"].bool,

  /**
   * Specify if structured list is flush, default is false
   */
  isFlush: PropTypes__default["default"].bool,

  /**
   * Specify whether your StructuredListWrapper should have selections
   */
  selection: PropTypes__default["default"].bool
};
StructuredListWrapper.defaultProps = {
  selection: false,
  ariaLabel: 'Structured list section',
  isCondensed: false,
  isFlush: false
};
function StructuredListHead(props) {
  var children = props.children,
      className = props.className,
      other = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded2);

  var prefix = usePrefix.usePrefix();
  var classes = cx__default["default"]("".concat(prefix, "--structured-list-thead"), className);
  return /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({
    role: "rowgroup",
    className: classes
  }, other), children);
}
StructuredListHead.propTypes = {
  /**
   * Provide the contents of your StructuredListHead
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify an optional className to be applied to the node
   */
  className: PropTypes__default["default"].string
};
function StructuredListBody(props) {
  var children = props.children,
      className = props.className,
      other = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded3);

  var prefix = usePrefix.usePrefix();
  var classes = cx__default["default"]("".concat(prefix, "--structured-list-tbody"), className);
  return /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({
    className: classes,
    role: "rowgroup"
  }, other), children);
}
StructuredListBody.propTypes = {
  /**
   * Provide the contents of your StructuredListBody
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes__default["default"].string,
  head: PropTypes__default["default"].bool,

  /**
   * Provide a handler that is invoked on the key down event for the control
   */
  onKeyDown: PropTypes__default["default"].func
};
StructuredListBody.defaultProps = {
  onKeyDown: function onKeyDown() {}
};
function StructuredListRow(props) {
  var onKeyDown = props.onKeyDown,
      tabIndex = props.tabIndex,
      children = props.children,
      className = props.className,
      head = props.head,
      label = props.label,
      other = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded4);

  var prefix = usePrefix.usePrefix();
  var classes = cx__default["default"]("".concat(prefix, "--structured-list-row"), className, _rollupPluginBabelHelpers.defineProperty({}, "".concat(prefix, "--structured-list-row--header-row"), head));
  return label ?
  /*#__PURE__*/
  // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
  React__default["default"].createElement("label", _rollupPluginBabelHelpers["extends"]({}, other, {
    tabIndex: tabIndex,
    className: classes,
    onKeyDown: onKeyDown
  }), children) : /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({
    role: "row"
  }, other, {
    className: classes
  }), children);
}
StructuredListRow.propTypes = {
  /**
   * Provide the contents of your StructuredListRow
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether your StructuredListRow should be used as a header row
   */
  head: PropTypes__default["default"].bool,

  /**
   * Specify whether a `<label>` should be used
   */
  label: PropTypes__default["default"].bool,

  /**
   * Provide a handler that is invoked on the key down event for the control,
   * if `<label>` is in use
   */
  onKeyDown: PropTypes__default["default"].func,

  /**
   * Specify the tab index of the container node, if `<label>` is in use
   */
  tabIndex: PropTypes__default["default"].number
};
StructuredListRow.defaultProps = {
  head: false,
  label: false,
  tabIndex: 0,
  onKeyDown: function onKeyDown() {}
};
function StructuredListInput(props) {
  var className = props.className,
      value = props.value,
      name = props.name,
      title = props.title,
      id = props.id,
      other = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded5);

  var prefix = usePrefix.usePrefix();
  var classes = cx__default["default"]("".concat(prefix, "--structured-list-input"), className);
  var instanceId = id || getInstanceId();
  return /*#__PURE__*/React__default["default"].createElement("input", _rollupPluginBabelHelpers["extends"]({}, other, {
    type: "radio",
    tabIndex: -1,
    id: instanceId,
    className: classes,
    value: value,
    name: name,
    title: title
  }));
}
StructuredListInput.propTypes = {
  /**
   * Specify an optional className to be applied to the input
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether the underlying input should be checked by default
   */
  defaultChecked: PropTypes__default["default"].bool,

  /**
   * Specify a custom `id` for the input
   */
  id: PropTypes__default["default"].string,

  /**
   * Provide a `name` for the input
   */
  name: PropTypes__default["default"].string,

  /**
   * Provide an optional hook that is called each time the input is updated
   */
  onChange: PropTypes__default["default"].func,

  /**
   * Provide a `title` for the input
   */
  title: PropTypes__default["default"].string,

  /**
   * Specify the value of the input
   */
  value: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]).isRequired
};
StructuredListInput.defaultProps = {
  onChange: function onChange() {},
  value: 'value',
  title: 'title'
};
function StructuredListCell(props) {
  var _classNames3;

  var children = props.children,
      className = props.className,
      head = props.head,
      noWrap = props.noWrap,
      other = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded6);

  var prefix = usePrefix.usePrefix();
  var classes = cx__default["default"](className, (_classNames3 = {}, _rollupPluginBabelHelpers.defineProperty(_classNames3, "".concat(prefix, "--structured-list-th"), head), _rollupPluginBabelHelpers.defineProperty(_classNames3, "".concat(prefix, "--structured-list-td"), !head), _rollupPluginBabelHelpers.defineProperty(_classNames3, "".concat(prefix, "--structured-list-content--nowrap"), noWrap), _classNames3));
  return /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({
    className: classes,
    role: head ? 'columnheader' : 'cell'
  }, other), children);
}
StructuredListCell.propTypes = {
  /**
   * Provide the contents of your StructuredListCell
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether your StructuredListCell should be used as a header cell
   */
  head: PropTypes__default["default"].bool,

  /**
   * Specify whether your StructuredListCell should have text wrapping
   */
  noWrap: PropTypes__default["default"].bool
};
StructuredListCell.defaultProps = {
  head: false,
  noWrap: false
};

exports.StructuredListBody = StructuredListBody;
exports.StructuredListCell = StructuredListCell;
exports.StructuredListHead = StructuredListHead;
exports.StructuredListInput = StructuredListInput;
exports.StructuredListRow = StructuredListRow;
exports.StructuredListWrapper = StructuredListWrapper;
