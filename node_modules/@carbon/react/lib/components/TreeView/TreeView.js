/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var PropTypes = require('prop-types');
var cx = require('classnames');
var uniqueId = require('../../tools/uniqueId.js');
var FeatureFlags = require('@carbon/feature-flags');
var usePrefix = require('../../internal/usePrefix.js');
var match = require('../../internal/keyboard/match.js');
var keys = require('../../internal/keyboard/keys.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var FeatureFlags__namespace = /*#__PURE__*/_interopNamespace(FeatureFlags);

var _excluded = ["active", "children", "className", "hideLabel", "label", "multiselect", "onSelect", "selected", "size"];
function TreeView(_ref) {
  var prespecifiedActive = _ref.active,
      children = _ref.children,
      className = _ref.className,
      _ref$hideLabel = _ref.hideLabel,
      hideLabel = _ref$hideLabel === void 0 ? false : _ref$hideLabel,
      label = _ref.label,
      multiselect = _ref.multiselect,
      onSelect = _ref.onSelect,
      _ref$selected = _ref.selected,
      preselected = _ref$selected === void 0 ? [] : _ref$selected,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? FeatureFlags__namespace.enabled('enable-v11-release') ? 'sm' : 'default' : _ref$size,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var _useRef = React.useRef(rest.id || uniqueId["default"]()),
      treeId = _useRef.current;

  var prefix = usePrefix.usePrefix();
  var treeClasses = cx__default["default"](className, "".concat(prefix, "--tree"), _rollupPluginBabelHelpers.defineProperty({}, "".concat(prefix, "--tree--").concat(size), size !== 'default'));
  var treeRootRef = React.useRef(null);
  var treeWalker = React.useRef(treeRootRef === null || treeRootRef === void 0 ? void 0 : treeRootRef.current);

  var _useState = React.useState(preselected),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      selected = _useState2[0],
      setSelected = _useState2[1];

  var _useState3 = React.useState(prespecifiedActive),
      _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
      active = _useState4[0],
      setActive = _useState4[1];

  function resetNodeTabIndices() {
    var _treeRootRef$current$, _treeRootRef$current;

    Array.prototype.forEach.call((_treeRootRef$current$ = treeRootRef === null || treeRootRef === void 0 ? void 0 : (_treeRootRef$current = treeRootRef.current) === null || _treeRootRef$current === void 0 ? void 0 : _treeRootRef$current.querySelectorAll('[tabIndex="0"]')) !== null && _treeRootRef$current$ !== void 0 ? _treeRootRef$current$ : [], function (item) {
      item.tabIndex = -1;
    });
  }

  function handleTreeSelect(event) {
    var node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var nodeId = node.id;

    if (multiselect && (event.metaKey || event.ctrlKey)) {
      if (!selected.includes(nodeId)) {
        setSelected(selected.concat(nodeId));
      } else {
        setSelected(selected.filter(function (selectedId) {
          return selectedId !== nodeId;
        }));
      }
    } else {
      setSelected([nodeId]);
      setActive(nodeId);
    }

    if (onSelect) {
      onSelect(event, node);
    }
  }

  function handleFocusEvent(event) {
    if (event.type === 'blur') {
      var _treeRootRef$current2;

      var currentFocusedNode = event.relatedTarget,
          prevFocusedNode = event.target;

      if (treeRootRef !== null && treeRootRef !== void 0 && (_treeRootRef$current2 = treeRootRef.current) !== null && _treeRootRef$current2 !== void 0 && _treeRootRef$current2.contains(currentFocusedNode)) {
        prevFocusedNode.tabIndex = -1;
      }
    }

    if (event.type === 'focus') {
      var _treeRootRef$current3;

      resetNodeTabIndices();
      var _prevFocusedNode = event.relatedTarget,
          _currentFocusedNode = event.target;

      if (treeRootRef !== null && treeRootRef !== void 0 && (_treeRootRef$current3 = treeRootRef.current) !== null && _treeRootRef$current3 !== void 0 && _treeRootRef$current3.contains(_prevFocusedNode)) {
        _prevFocusedNode.tabIndex = -1;
      }

      _currentFocusedNode.tabIndex = 0;
    }
  }

  var focusTarget = false;
  var nodesWithProps = React__default["default"].Children.map(children, function (node) {
    var sharedNodeProps = {
      active: active,
      depth: 0,
      onNodeFocusEvent: handleFocusEvent,
      onTreeSelect: handleTreeSelect,
      selected: selected,
      tabIndex: !node.props.disabled && -1 || null
    };

    if (!focusTarget && !node.props.disabled) {
      sharedNodeProps.tabIndex = 0;
      focusTarget = true;
    }

    if ( /*#__PURE__*/React__default["default"].isValidElement(node)) {
      return /*#__PURE__*/React__default["default"].cloneElement(node, sharedNodeProps);
    }
  });

  function handleKeyDown(event) {
    event.stopPropagation();

    if (match.matches(event, [keys.ArrowUp, keys.ArrowDown])) {
      event.preventDefault();
    }

    treeWalker.current.currentNode = event.target;
    var nextFocusNode;

    if (match.match(event, keys.ArrowUp)) {
      nextFocusNode = treeWalker.current.previousNode();
    }

    if (match.match(event, keys.ArrowDown)) {
      nextFocusNode = treeWalker.current.nextNode();
    }

    if (nextFocusNode && nextFocusNode !== event.target) {
      resetNodeTabIndices();
      nextFocusNode.tabIndex = 0;
      nextFocusNode.focus();
    }

    if (rest.onKeyDown) {
      rest.onKeyDown(event);
    }
  }

  React.useEffect(function () {
    var _treeWalker$current;

    treeWalker.current = (_treeWalker$current = treeWalker.current) !== null && _treeWalker$current !== void 0 ? _treeWalker$current : document.createTreeWalker(treeRootRef === null || treeRootRef === void 0 ? void 0 : treeRootRef.current, NodeFilter.SHOW_ELEMENT, {
      acceptNode: function acceptNode(node) {
        if (node.classList.contains("".concat(prefix, "--tree-node--disabled"))) {
          return NodeFilter.FILTER_REJECT;
        }

        if (node.matches("li.".concat(prefix, "--tree-node"))) {
          return NodeFilter.FILTER_ACCEPT;
        }

        return NodeFilter.FILTER_SKIP;
      }
    });
  }, [prefix]);
  React.useEffect(function () {
    if (preselected.length) {
      setSelected(preselected);
    }

    if (prespecifiedActive) {
      setActive(prespecifiedActive);
    }
  }, [preselected, prespecifiedActive]);
  var labelId = "".concat(treeId, "__label");

  var TreeLabel = function TreeLabel() {
    return !hideLabel && /*#__PURE__*/React__default["default"].createElement("label", {
      id: labelId,
      className: "".concat(prefix, "--label")
    }, label);
  };

  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(TreeLabel, null), /*#__PURE__*/React__default["default"].createElement("ul", _rollupPluginBabelHelpers["extends"]({}, rest, {
    "aria-label": hideLabel ? label : null,
    "aria-labelledby": !hideLabel ? labelId : null,
    "aria-multiselectable": multiselect || null,
    className: treeClasses,
    onKeyDown: handleKeyDown,
    ref: treeRootRef,
    role: "tree"
  }), nodesWithProps));
}
TreeView.propTypes = {
  /**
   * Mark the active node in the tree, represented by its value
   */
  active: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),

  /**
   * Specify the children of the TreeView
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify an optional className to be applied to the TreeView
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether or not the label should be hidden
   */
  hideLabel: PropTypes__default["default"].bool,

  /**
   * Provide the label text that will be read by a screen reader
   */
  label: PropTypes__default["default"].string.isRequired,

  /**
   * Specify the selection mode of the tree.
   * If `multiselect` is `false` then only one node can be selected at a time
   */
  multiselect: PropTypes__default["default"].bool,

  /**
   * Callback function that is called when any node is selected
   */
  onSelect: PropTypes__default["default"].func,

  /**
   * Array representing all selected node IDs in the tree
   */
  selected: PropTypes__default["default"].arrayOf(PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number])),

  /**
   * Specify the size of the tree from a list of available sizes.
   */
  size: FeatureFlags__namespace.enabled('enable-v11-release') ? PropTypes__default["default"].oneOf(['xs', 'sm']) : PropTypes__default["default"].oneOf(['default', 'compact'])
};

exports["default"] = TreeView;
