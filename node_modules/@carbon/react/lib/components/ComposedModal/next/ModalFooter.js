/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var PropTypes = require('prop-types');
var Button = require('../../Button/Button.js');
var ButtonSet = require('../../ButtonSet/ButtonSet.js');
var cx = require('classnames');
var usePrefix = require('../../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var _excluded = ["children", "className", "closeModal", "danger", "inputref", "onRequestClose", "onRequestSubmit", "primaryButtonDisabled", "primaryButtonText", "primaryClassName", "secondaryButtonText", "secondaryButtons", "secondaryClassName"];

function SecondaryButtonSet(_ref) {
  var secondaryButtons = _ref.secondaryButtons,
      secondaryButtonText = _ref.secondaryButtonText,
      secondaryClassName = _ref.secondaryClassName,
      closeModal = _ref.closeModal,
      onRequestClose = _ref.onRequestClose;

  function handleRequestClose(evt) {
    closeModal(evt);
    onRequestClose(evt);
  }

  if (Array.isArray(secondaryButtons) && secondaryButtons.length <= 2) {
    return secondaryButtons.map(function (_ref2, i) {
      var buttonText = _ref2.buttonText,
          onButtonClick = _ref2.onClick;
      return /*#__PURE__*/React__default["default"].createElement(Button["default"], {
        key: "".concat(buttonText, "-").concat(i),
        className: secondaryClassName,
        kind: "secondary",
        onClick: onButtonClick || handleRequestClose
      }, buttonText);
    });
  }

  if (secondaryButtonText) {
    return /*#__PURE__*/React__default["default"].createElement(Button["default"], {
      className: secondaryClassName,
      onClick: handleRequestClose,
      kind: "secondary"
    }, secondaryButtonText);
  }

  return null;
}

SecondaryButtonSet.propTypes = {
  closeModal: PropTypes__default["default"].func,
  onRequestClose: PropTypes__default["default"].func,
  secondaryButtonText: PropTypes__default["default"].string,
  secondaryButtons: function secondaryButtons(props, propName, componentName) {
    if (props.secondaryButtons) {
      if (!Array.isArray(props.secondaryButtons) || props.secondaryButtons.length !== 2) {
        return new Error("".concat(propName, " needs to be an array of two button config objects"));
      }

      var shape = {
        buttonText: PropTypes__default["default"].node,
        onClick: PropTypes__default["default"].func
      };
      props[propName].forEach(function (secondaryButton) {
        PropTypes__default["default"].checkPropTypes(shape, secondaryButton, propName, componentName);
      });
    }

    return null;
  },
  secondaryClassName: PropTypes__default["default"].string
};
var ModalFooter = /*#__PURE__*/React__default["default"].forwardRef(function ModalFooter(_ref3, ref) {
  var _cx;

  var children = _ref3.children,
      customClassName = _ref3.className,
      closeModal = _ref3.closeModal,
      danger = _ref3.danger,
      inputref = _ref3.inputref,
      onRequestClose = _ref3.onRequestClose,
      onRequestSubmit = _ref3.onRequestSubmit,
      primaryButtonDisabled = _ref3.primaryButtonDisabled,
      primaryButtonText = _ref3.primaryButtonText,
      primaryClassName = _ref3.primaryClassName,
      secondaryButtonText = _ref3.secondaryButtonText,
      secondaryButtons = _ref3.secondaryButtons,
      secondaryClassName = _ref3.secondaryClassName,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref3, _excluded);

  var prefix = usePrefix.usePrefix();
  var footerClass = cx__default["default"]((_cx = {}, _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--modal-footer"), true), _rollupPluginBabelHelpers.defineProperty(_cx, customClassName, customClassName), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--modal-footer--three-button"), Array.isArray(secondaryButtons) && secondaryButtons.length === 2), _cx));
  var secondaryButtonProps = {
    closeModal: closeModal,
    secondaryButtons: secondaryButtons,
    secondaryButtonText: secondaryButtonText,
    secondaryClassName: secondaryClassName,
    onRequestClose: onRequestClose
  };
  return /*#__PURE__*/React__default["default"].createElement(ButtonSet["default"], _rollupPluginBabelHelpers["extends"]({
    className: footerClass
  }, rest, {
    ref: ref
  }), /*#__PURE__*/React__default["default"].createElement(SecondaryButtonSet, secondaryButtonProps), primaryButtonText && /*#__PURE__*/React__default["default"].createElement(Button["default"], {
    onClick: onRequestSubmit,
    className: primaryClassName,
    disabled: primaryButtonDisabled,
    kind: danger ? 'danger' : 'primary',
    ref: inputref
  }, primaryButtonText), children);
});
ModalFooter.propTypes = {
  /**
   * Pass in content that will be rendered in the Modal Footer
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify a custom className to be applied to the Modal Footer container
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify an optional function that is called whenever the modal is closed
   */
  closeModal: PropTypes__default["default"].func,

  /**
   * Specify whether the primary button should be replaced with danger button.
   * Note that this prop is not applied if you render primary/danger button by yourself
   */
  danger: PropTypes__default["default"].bool,

  /**
   * The `ref` callback for the primary button.
   */
  inputref: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].shape({
    current: PropTypes__default["default"].any
  })]),

  /**
   * Specify an optional function for when the modal is requesting to be
   * closed
   */
  onRequestClose: PropTypes__default["default"].func,

  /**
   * Specify an optional function for when the modal is requesting to be
   * submitted
   */
  onRequestSubmit: PropTypes__default["default"].func,

  /**
   * Specify whether the primary button should be disabled
   */
  primaryButtonDisabled: PropTypes__default["default"].bool,

  /**
   * Specify the text for the primary button
   */
  primaryButtonText: PropTypes__default["default"].string,

  /**
   * Specify a custom className to be applied to the primary button
   */
  primaryClassName: PropTypes__default["default"].string,

  /**
   * Specify the text for the secondary button
   */
  secondaryButtonText: PropTypes__default["default"].string,

  /**
   * Specify an array of config objects for secondary buttons
   * (`Array<{
   *   buttonText: string,
   *   onClick: function,
   * }>`).
   */
  secondaryButtons: function secondaryButtons(props, propName, componentName) {
    if (props.secondaryButtons) {
      if (!Array.isArray(props.secondaryButtons) || props.secondaryButtons.length !== 2) {
        return new Error("".concat(propName, " needs to be an array of two button config objects"));
      }

      var shape = {
        buttonText: PropTypes__default["default"].node,
        onClick: PropTypes__default["default"].func
      };
      props[propName].forEach(function (secondaryButton) {
        PropTypes__default["default"].checkPropTypes(shape, secondaryButton, propName, componentName);
      });
    }

    return null;
  },

  /**
   * Specify a custom className to be applied to the secondary button
   */
  secondaryClassName: PropTypes__default["default"].string
};
ModalFooter.defaultProps = {
  onRequestClose: function onRequestClose() {},
  onRequestSubmit: function onRequestSubmit() {},
  closeModal: function closeModal() {}
};

exports.ModalFooter = ModalFooter;
