/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var cx = require('classnames');
var PropTypes = require('prop-types');
var React = require('react');
var warning = require('../../internal/warning.js');
var FeatureFlags = require('@carbon/feature-flags');
var usePrefix = require('../../internal/usePrefix.js');
var match = require('../../internal/keyboard/match.js');
var keys = require('../../internal/keyboard/keys.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var FeatureFlags__namespace = /*#__PURE__*/_interopNamespace(FeatureFlags);

var _excluded = ["href", "className", "itemText", "hasDivider", "isDelete", "disabled", "closeMenu", "onClick", "handleOverflowMenuItemFocus", "onKeyDown", "wrapperClassName", "requireTitle", "index", "title"];

var OverflowMenuItem = /*#__PURE__*/function (_React$Component) {
  _rollupPluginBabelHelpers.inherits(OverflowMenuItem, _React$Component);

  var _super = _rollupPluginBabelHelpers.createSuper(OverflowMenuItem);

  function OverflowMenuItem() {
    var _this;

    _rollupPluginBabelHelpers.classCallCheck(this, OverflowMenuItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "overflowMenuItem", /*#__PURE__*/React__default["default"].createRef());

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "setTabFocus", function (evt) {
      if (match.match(evt, keys.ArrowDown)) {
        _this.props.handleOverflowMenuItemFocus({
          currentIndex: _this.props.index,
          direction: 1
        });
      }

      if (match.match(evt, keys.ArrowUp)) {
        _this.props.handleOverflowMenuItemFocus({
          currentIndex: _this.props.index,
          direction: -1
        });
      }
    });

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "handleClick", function (evt) {
      var _this$props = _this.props,
          onClick = _this$props.onClick,
          closeMenu = _this$props.closeMenu;
      onClick(evt);

      if (closeMenu) {
        closeMenu();
      }
    });

    return _this;
  }

  _rollupPluginBabelHelpers.createClass(OverflowMenuItem, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          href = _this$props2.href,
          className = _this$props2.className,
          itemText = _this$props2.itemText,
          hasDivider = _this$props2.hasDivider,
          isDelete = _this$props2.isDelete,
          disabled = _this$props2.disabled,
          closeMenu = _this$props2.closeMenu;
          _this$props2.onClick;
          _this$props2.handleOverflowMenuItemFocus;
          var _onKeyDown = _this$props2.onKeyDown,
          wrapperClassName = _this$props2.wrapperClassName,
          requireTitle = _this$props2.requireTitle,
          index = _this$props2.index,
          title = _this$props2.title,
          other = _rollupPluginBabelHelpers.objectWithoutProperties(_this$props2, _excluded);

      if (process.env.NODE_ENV !== "production") {
        process.env.NODE_ENV !== "production" ? warning.warning(closeMenu, '`<OverflowMenuItem>` detected missing `closeMenu` prop. ' + '`closeMenu` is required to let `<OverflowMenu>` close the menu upon actions on `<OverflowMenuItem>`. ' + 'Please make sure `<OverflowMenuItem>` is a direct child of `<OverflowMenu>.') : void 0;
      }

      return /*#__PURE__*/React__default["default"].createElement(usePrefix.PrefixContext.Consumer, null, function (prefix) {
        var _classNames;

        var overflowMenuBtnClasses = cx__default["default"]("".concat(prefix, "--overflow-menu-options__btn"), className);
        var overflowMenuItemClasses = cx__default["default"]("".concat(prefix, "--overflow-menu-options__option"), (_classNames = {}, _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--overflow-menu--divider"), hasDivider), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--overflow-menu-options__option--danger"), isDelete), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--overflow-menu-options__option--disabled"), disabled), _classNames), wrapperClassName);
        var TagToUse = href ? 'a' : 'button';

        var OverflowMenuItemContent = function () {
          if (typeof itemText !== 'string') {
            return itemText;
          }

          return /*#__PURE__*/React__default["default"].createElement("div", {
            className: "".concat(prefix, "--overflow-menu-options__option-content")
          }, itemText);
        }();

        return /*#__PURE__*/React__default["default"].createElement("li", {
          className: overflowMenuItemClasses,
          role: "none"
        }, /*#__PURE__*/React__default["default"].createElement(TagToUse, _rollupPluginBabelHelpers["extends"]({}, other, {
          role: "menuitem",
          href: href,
          className: overflowMenuBtnClasses,
          disabled: disabled,
          onClick: _this2.handleClick,
          onKeyDown: function onKeyDown(evt) {
            _this2.setTabFocus(evt);

            _onKeyDown(evt);
          },
          ref: _this2.overflowMenuItem,
          title: requireTitle ? title || itemText : null,
          tabIndex: "-1",
          index: index
        }), OverflowMenuItemContent));
      });
    }
  }]);

  return OverflowMenuItem;
}(React__default["default"].Component);

_rollupPluginBabelHelpers.defineProperty(OverflowMenuItem, "propTypes", {
  /**
   * The CSS class name to be placed on the button element
   */
  className: PropTypes__default["default"].string,

  /**
   * A callback to tell the parent menu component that the menu should be closed.
   */
  closeMenu: PropTypes__default["default"].func,

  /**
   * `true` to make this menu item disabled.
   */
  disabled: PropTypes__default["default"].bool,
  handleOverflowMenuItemFocus: PropTypes__default["default"].func,

  /**
   * `true` to make this menu item a divider.
   */
  hasDivider: PropTypes__default["default"].bool,

  /**
   * If given, overflow item will render as a link with the given href
   */
  href: PropTypes__default["default"].string,
  index: PropTypes__default["default"].number,

  /**
   * `true` to make this menu item a "danger button".
   */
  isDelete: PropTypes__default["default"].bool,

  /**
   * The text in the menu item.
   */
  itemText: PropTypes__default["default"].node.isRequired,

  /**
   * event handlers
   */
  onBlur: PropTypes__default["default"].func,
  onClick: PropTypes__default["default"].func,
  onFocus: PropTypes__default["default"].func,
  onKeyDown: PropTypes__default["default"].func,
  onKeyUp: PropTypes__default["default"].func,
  onMouseDown: PropTypes__default["default"].func,
  onMouseEnter: PropTypes__default["default"].func,
  onMouseLeave: PropTypes__default["default"].func,
  onMouseUp: PropTypes__default["default"].func,

  /**
   * `true` if this menu item has long text and requires a browser tooltip
   */
  requireTitle: PropTypes__default["default"].bool,

  /**
   * Specify a title for the OverflowMenuItem
   */
  title: PropTypes__default["default"].string,

  /**
   * The CSS class name to be placed on the wrapper list item element
   */
  wrapperClassName: PropTypes__default["default"].string
});

_rollupPluginBabelHelpers.defineProperty(OverflowMenuItem, "defaultProps", {
  hasDivider: false,
  isDelete: false,
  disabled: false,
  itemText: FeatureFlags__namespace.enabled('enable-v11-release') ? null : 'Provide itemText',
  onClick: function onClick() {},
  onKeyDown: function onKeyDown() {}
});

exports["default"] = OverflowMenuItem;
