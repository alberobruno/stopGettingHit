/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var cx = require('classnames');
var usePrefix = require('../../internal/usePrefix.js');
var iconsReact = require('@carbon/icons-react');
var setupGetInstanceId = require('../../tools/setupGetInstanceId.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

const getInstanceId = setupGetInstanceId["default"]();
function CheckboxGroup(_ref) {
  let {
    children,
    className,
    helperText,
    invalid,
    invalidText,
    legendId,
    legendText,
    readOnly,
    warn,
    warnText,
    ...rest
  } = _ref;
  const prefix = usePrefix.usePrefix();
  const showWarning = !readOnly && !invalid && warn;
  const showHelper = !invalid && !warn;
  const checkboxGroupInstanceId = getInstanceId();
  const helperId = !helperText ? undefined : `checkbox-group-helper-text-${checkboxGroupInstanceId}`;
  const helper = helperText ? /*#__PURE__*/React__default["default"].createElement("div", {
    id: helperId,
    className: `${prefix}--form__helper-text`
  }, helperText) : null;
  const fieldsetClasses = cx__default["default"](`${prefix}--checkbox-group`, className, {
    [`${prefix}--checkbox-group--readonly`]: readOnly,
    [`${prefix}--checkbox-group--invalid`]: !readOnly && invalid,
    [`${prefix}--checkbox-group--warning`]: showWarning
  });
  return /*#__PURE__*/React__default["default"].createElement("fieldset", _rollupPluginBabelHelpers["extends"]({
    className: fieldsetClasses,
    "data-invalid": invalid ? true : undefined,
    "aria-labelledby": rest['aria-labelledby'] || legendId,
    "aria-readonly": readOnly,
    "aria-describedby": !invalid && !warn && helper ? helperId : undefined
  }, rest), /*#__PURE__*/React__default["default"].createElement("legend", {
    className: `${prefix}--label`,
    id: legendId || rest['aria-labelledby']
  }, legendText), children, /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--checkbox-group__validation-msg`
  }, !readOnly && invalid && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(iconsReact.WarningFilled, {
    className: `${prefix}--checkbox__invalid-icon`
  }), /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--form-requirement`
  }, invalidText)), showWarning && /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(iconsReact.WarningAltFilled, {
    className: `${prefix}--checkbox__invalid-icon ${prefix}--checkbox__invalid-icon--warning`
  }), /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--form-requirement`
  }, warnText))), showHelper && helper);
}
CheckboxGroup.propTypes = {
  /**
   * Provide the children form elements to be rendered inside of the <fieldset>
   */
  children: PropTypes__default["default"].node,
  /**
   * Provide a custom className to be applied to the containing <fieldset> node
   */
  className: PropTypes__default["default"].string,
  /**
   * Provide text for the form group for additional help
   */
  helperText: PropTypes__default["default"].node,
  /**
   * Specify whether the form group is currently invalid
   */
  invalid: PropTypes__default["default"].bool,
  /**
   * Provide the text that is displayed when the form group is in an invalid state
   */
  invalidText: PropTypes__default["default"].node,
  /**
   * Provide id for the fieldset <legend> which corresponds to the fieldset
   * `aria-labelledby`
   */
  legendId: PropTypes__default["default"].node,
  /**
   * Provide the text to be rendered inside of the fieldset <legend>
   */
  legendText: PropTypes__default["default"].node.isRequired,
  /**
   * Whether the CheckboxGroup should be read-only
   */
  readOnly: PropTypes__default["default"].bool,
  /**
   * Specify whether the form group is currently in warning state
   */
  warn: PropTypes__default["default"].bool,
  /**
   * Provide the text that is displayed when the form group is in warning state
   */
  warnText: PropTypes__default["default"].node
};

exports["default"] = CheckboxGroup;
