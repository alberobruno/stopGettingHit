/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var cx = require('classnames');
var PropTypes = require('prop-types');
var React = require('react');
var usePrefix = require('../../internal/usePrefix.js');
var LayerContext = require('../Layer/LayerContext.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const ThemeContext = /*#__PURE__*/React__default["default"].createContext({
  theme: 'white'
});
const GlobalTheme = /*#__PURE__*/React__default["default"].forwardRef(function GlobalTheme(_ref, ref) {
  let {
    children,
    theme
  } = _ref;
  const value = React.useMemo(() => {
    return {
      theme
    };
  }, [theme]);
  const childrenWithProps = /*#__PURE__*/React__default["default"].cloneElement(children, {
    ref: ref
  });
  return /*#__PURE__*/React__default["default"].createElement(ThemeContext.Provider, {
    value: value
  }, childrenWithProps);
});
GlobalTheme.propTypes = {
  /**
   * Provide child elements to be rendered inside of `GlobalTheme`, this is
   * typically the root of your app
   */
  children: PropTypes__default["default"].node,
  /**
   * Specify the global theme for your app
   */
  theme: PropTypes__default["default"].oneOf(['white', 'g10', 'g90', 'g100'])
};
/**
 * Specify the theme to be applied to a page, or a region in a page
 */
function Theme(_ref2) {
  let {
    as: BaseComponent = 'div',
    className: customClassName,
    theme,
    ...rest
  } = _ref2;
  const prefix = usePrefix.usePrefix();
  const className = cx__default["default"](customClassName, {
    [`${prefix}--white`]: theme === 'white',
    [`${prefix}--g10`]: theme === 'g10',
    [`${prefix}--g90`]: theme === 'g90',
    [`${prefix}--g100`]: theme === 'g100',
    [`${prefix}--layer-one`]: true
  });
  const value = React__default["default"].useMemo(() => {
    return {
      theme
    };
  }, [theme]);
  const BaseComponentAsAny = BaseComponent;
  return /*#__PURE__*/React__default["default"].createElement(ThemeContext.Provider, {
    value: value
  }, /*#__PURE__*/React__default["default"].createElement(LayerContext.LayerContext.Provider, {
    value: 1
  }, /*#__PURE__*/React__default["default"].createElement(BaseComponentAsAny, _rollupPluginBabelHelpers["extends"]({}, rest, {
    className: className
  }))));
}
Theme.propTypes = {
  /**
   * Specify a custom component or element to be rendered as the top-level
   * element in the component
   */
  as: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].string, PropTypes__default["default"].elementType]),
  /**
   * Provide child elements to be rendered inside of `Theme`
   */
  children: PropTypes__default["default"].node,
  /**
   * Provide a custom class name to be used on the outermost element rendered by
   * the component
   */
  className: PropTypes__default["default"].string,
  /**
   * Specify the theme
   */
  theme: PropTypes__default["default"].oneOf(['white', 'g10', 'g90', 'g100'])
};

/**
 * Get access to the current theme
 */
function useTheme() {
  return React__default["default"].useContext(ThemeContext);
}

exports.GlobalTheme = GlobalTheme;
exports.Theme = Theme;
exports.ThemeContext = ThemeContext;
exports.useTheme = useTheme;
