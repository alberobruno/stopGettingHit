/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var cx = require('classnames');
var FeatureFlags = require('@carbon/feature-flags');
var deprecate = require('../../prop-types/deprecate.js');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var FeatureFlags__namespace = /*#__PURE__*/_interopNamespace(FeatureFlags);

var _excluded = ["id", "className", "handleTabClick", "handleTabKeyDown", "disabled", "href", "index", "label", "selected", "tabIndex", "onClick", "onKeyDown", "renderAnchor", "renderButton", "renderContent", "role"];

var Tab = /*#__PURE__*/function (_React$Component) {
  _rollupPluginBabelHelpers.inherits(Tab, _React$Component);

  var _super = _rollupPluginBabelHelpers.createSuper(Tab);

  function Tab() {
    _rollupPluginBabelHelpers.classCallCheck(this, Tab);

    return _super.apply(this, arguments);
  }

  _rollupPluginBabelHelpers.createClass(Tab, [{
    key: "render",
    value: function render() {
      var _classNames,
          _this = this,
          _buttonProps;

      var prefix = this.context;

      var _this$props = this.props,
          id = _this$props.id,
          className = _this$props.className,
          handleTabClick = _this$props.handleTabClick,
          handleTabKeyDown = _this$props.handleTabKeyDown,
          disabled = _this$props.disabled,
          _this$props$href = _this$props.href,
          href = _this$props$href === void 0 ? '#' : _this$props$href,
          index = _this$props.index,
          label = _this$props.label,
          selected = _this$props.selected,
          _this$props$tabIndex = _this$props.tabIndex,
          tabIndex = _this$props$tabIndex === void 0 ? 0 : _this$props$tabIndex,
          _onClick = _this$props.onClick,
          _onKeyDown = _this$props.onKeyDown,
          renderAnchor = _this$props.renderAnchor,
          renderButton = _this$props.renderButton;
          _this$props.renderContent;
          _this$props.role;
          var other = _rollupPluginBabelHelpers.objectWithoutProperties(_this$props, _excluded);

      var classes = cx__default["default"](className, "".concat(prefix, "--tabs--scrollable__nav-item"), (_classNames = {}, _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--tabs__nav-item--disabled"), disabled), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--tabs__nav-item--selected"), selected), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--tabs--scrollable__nav-item--disabled"), disabled), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--tabs--scrollable__nav-item--selected"), selected), _classNames));
      var buttonProps = (_buttonProps = {}, _rollupPluginBabelHelpers.defineProperty(_buttonProps, 'aria-selected', selected), _rollupPluginBabelHelpers.defineProperty(_buttonProps, 'aria-disabled', disabled), _rollupPluginBabelHelpers.defineProperty(_buttonProps, 'aria-controls', id && "".concat(id, "__panel")), _rollupPluginBabelHelpers.defineProperty(_buttonProps, "className", "".concat(prefix, "--tabs--scrollable__nav-link")), _rollupPluginBabelHelpers.defineProperty(_buttonProps, "href", href), _rollupPluginBabelHelpers.defineProperty(_buttonProps, "tabIndex", !disabled ? tabIndex : -1), _rollupPluginBabelHelpers.defineProperty(_buttonProps, "ref", function ref(e) {
        _this.tabAnchor = e;
      }), _buttonProps);
      var renderElement = renderButton || renderAnchor;
      return /*#__PURE__*/React__default["default"].createElement("li", _rollupPluginBabelHelpers["extends"]({}, other, {
        className: classes,
        onClick: function onClick(evt) {
          if (disabled) {
            return;
          }

          if (handleTabClick) {
            handleTabClick(index, evt);
          }

          _onClick(evt);
        },
        onKeyDown: function onKeyDown(evt) {
          if (disabled) {
            return;
          }

          if (handleTabKeyDown) {
            handleTabKeyDown(index, evt);
          }

          _onKeyDown(evt);
        },
        role: "presentation"
      }), renderElement ? renderElement(buttonProps) : /*#__PURE__*/React__default["default"].createElement("button", _rollupPluginBabelHelpers["extends"]({
        type: "button",
        role: "tab"
      }, buttonProps), label));
    }
  }]);

  return Tab;
}(React__default["default"].Component);

_rollupPluginBabelHelpers.defineProperty(Tab, "contextType", usePrefix.PrefixContext);

_rollupPluginBabelHelpers.defineProperty(Tab, "propTypes", {
  /**
   * Specify an optional className to be added to your Tab
   */
  className: PropTypes__default["default"].string,

  /**
   * Whether your Tab is disabled.
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * A handler that is invoked when a user clicks on the control.
   * Reserved for usage in Tabs
   */
  handleTabClick: PropTypes__default["default"].func,

  /**
   * A handler that is invoked on the key down event for the control.
   * Reserved for usage in Tabs
   */
  handleTabKeyDown: PropTypes__default["default"].func,

  /**
   * Provide a string that represents the `href` of the Tab
   */
  href: deprecate["default"](PropTypes__default["default"].string),

  /**
   * The element ID for the top-level element.
   */
  id: PropTypes__default["default"].string,

  /**
   * The index of your Tab in your Tabs. Reserved for usage in Tabs
   */
  index: PropTypes__default["default"].number,

  /**
   * Provide the contents of your Tab
   */
  label: PropTypes__default["default"].node,

  /**
   * Provide a handler that is invoked when a user clicks on the control
   */
  onClick: PropTypes__default["default"].func.isRequired,

  /**
   * Provide a handler that is invoked on the key down event for the control
   */
  onKeyDown: PropTypes__default["default"].func.isRequired,

  /*
   * An optional parameter to allow overriding the anchor rendering.
   * Useful for using Tab along with react-router or other client
   * side router libraries.
   **/
  renderAnchor: deprecate["default"](PropTypes__default["default"].func),
  renderButton: PropTypes__default["default"].func,

  /*
   * An optional parameter to allow overriding the content rendering.
   **/
  renderContent: PropTypes__default["default"].func,

  /**
   * Provide an accessibility role for your Tab
   */
  role: deprecate["default"](PropTypes__default["default"].string),

  /**
   * Whether your Tab is selected.
   * Reserved for usage in Tabs
   */
  selected: PropTypes__default["default"].bool.isRequired,

  /**
   * Specify the tab index of the `<button>` node
   */
  tabIndex: PropTypes__default["default"].number
});

_rollupPluginBabelHelpers.defineProperty(Tab, "defaultProps", {
  label: FeatureFlags__namespace.enabled('enable-v11-release') ? undefined : 'provide a label',
  selected: false,
  onClick: function onClick() {},
  onKeyDown: function onKeyDown() {}
});

exports["default"] = Tab;
