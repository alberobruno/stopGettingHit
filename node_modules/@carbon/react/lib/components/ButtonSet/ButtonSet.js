/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var PropTypes = require('prop-types');
var cx = require('classnames');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

const ButtonSet = /*#__PURE__*/React__default["default"].forwardRef(function ButtonSet(_ref, ref) {
  let {
    children,
    className,
    stacked,
    ...rest
  } = _ref;
  const prefix = usePrefix.usePrefix();
  const buttonSetClasses = cx__default["default"](className, `${prefix}--btn-set`, {
    [`${prefix}--btn-set--stacked`]: stacked
  });
  return /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({}, rest, {
    className: buttonSetClasses,
    ref: ref
  }), children);
});
ButtonSet.displayName = 'ButtonSet';
ButtonSet.propTypes = {
  /**
   * Specify the content of your ButtonSet
   */
  children: PropTypes__default["default"].node,
  /**
   * Specify an optional className to be added to your ButtonSet
   */
  className: PropTypes__default["default"].string,
  /**
   * Specify the button arrangement of the set (vertically stacked or
   * horizontal)
   */
  stacked: PropTypes__default["default"].bool
};

exports["default"] = ButtonSet;
