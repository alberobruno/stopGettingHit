/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var cx = require('classnames');
var iconsReact = require('@carbon/icons-react');
var deprecate = require('../../prop-types/deprecate.js');
var index = require('../FeatureFlags/index.js');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var _excluded = ["className", "id", "inline", "labelText", "disabled", "children", "noLabel", "hideLabel", "invalid", "invalidText", "helperText", "light", "size", "warn", "warnText"];
var Select = /*#__PURE__*/React__default["default"].forwardRef(function Select(_ref, ref) {
  var _classNames, _classNames2, _classNames3;

  var className = _ref.className,
      id = _ref.id,
      inline = _ref.inline,
      labelText = _ref.labelText,
      disabled = _ref.disabled,
      children = _ref.children,
      noLabel = _ref.noLabel,
      hideLabel = _ref.hideLabel,
      invalid = _ref.invalid,
      invalidText = _ref.invalidText,
      helperText = _ref.helperText,
      light = _ref.light,
      size = _ref.size,
      warn = _ref.warn,
      warnText = _ref.warnText,
      other = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix.usePrefix();
  var enabled = index.useFeatureFlag('enable-v11-release');
  var selectClasses = cx__default["default"]((_classNames = {}, _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--select"), true), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--select--inline"), inline), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--select--light"), light), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--select--invalid"), invalid), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--select--disabled"), disabled), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--select--warning"), warn), _classNames), [enabled ? null : className]);
  var labelClasses = cx__default["default"]("".concat(prefix, "--label"), (_classNames2 = {}, _rollupPluginBabelHelpers.defineProperty(_classNames2, "".concat(prefix, "--visually-hidden"), hideLabel), _rollupPluginBabelHelpers.defineProperty(_classNames2, "".concat(prefix, "--label--disabled"), disabled), _classNames2));
  var inputClasses = cx__default["default"]((_classNames3 = {}, _rollupPluginBabelHelpers.defineProperty(_classNames3, "".concat(prefix, "--select-input"), true), _rollupPluginBabelHelpers.defineProperty(_classNames3, "".concat(prefix, "--select-input--").concat(size), size), _classNames3));
  var errorId = "".concat(id, "-error-msg");

  var errorText = function () {
    if (invalid) {
      return invalidText;
    }

    if (warn) {
      return warnText;
    }
  }();

  var error = invalid || warn ? /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--form-requirement"),
    id: errorId
  }, errorText) : null;
  var helperTextClasses = cx__default["default"]("".concat(prefix, "--form__helper-text"), _rollupPluginBabelHelpers.defineProperty({}, "".concat(prefix, "--form__helper-text--disabled"), disabled));
  var helper = helperText ? /*#__PURE__*/React__default["default"].createElement("div", {
    className: helperTextClasses
  }, helperText) : null;
  var ariaProps = {};

  if (invalid) {
    ariaProps['aria-describedby'] = errorId;
  }

  var input = function () {
    return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("select", _rollupPluginBabelHelpers["extends"]({}, other, ariaProps, {
      id: id,
      className: inputClasses,
      disabled: disabled || undefined,
      "aria-invalid": invalid || undefined,
      ref: ref
    }), children), /*#__PURE__*/React__default["default"].createElement(iconsReact.ChevronDown, {
      className: "".concat(prefix, "--select__arrow")
    }), invalid && /*#__PURE__*/React__default["default"].createElement(iconsReact.WarningFilled, {
      className: "".concat(prefix, "--select__invalid-icon")
    }), !invalid && warn && /*#__PURE__*/React__default["default"].createElement(iconsReact.WarningAltFilled, {
      className: "".concat(prefix, "--select__invalid-icon ").concat(prefix, "--select__invalid-icon--warning")
    }));
  }();

  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: enabled ? cx__default["default"]("".concat(prefix, "--form-item"), className) : "".concat(prefix, "--form-item")
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: selectClasses
  }, !noLabel && /*#__PURE__*/React__default["default"].createElement("label", {
    htmlFor: id,
    className: labelClasses
  }, labelText), inline && /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--select-input--inline__wrapper")
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--select-input__wrapper"),
    "data-invalid": invalid || null
  }, input), error), !inline && /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--select-input__wrapper"),
    "data-invalid": invalid || null
  }, input), !inline && error ? error : helper));
});
Select.displayName = 'Select';
Select.propTypes = {
  /**
   * Provide the contents of your Select
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify an optional className to be applied to the node containing the label and the select box
   */
  className: PropTypes__default["default"].string,

  /**
   * Optionally provide the default value of the `<select>`
   */
  defaultValue: PropTypes__default["default"].any,

  /**
   * Specify whether the control is disabled
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * Provide text that is used alongside the control label for additional help
   */
  helperText: PropTypes__default["default"].node,

  /**
   * Specify whether the label should be hidden, or not
   */
  hideLabel: PropTypes__default["default"].bool,

  /**
   * Specify a custom `id` for the `<select>`
   */
  id: PropTypes__default["default"].string.isRequired,

  /**
   * Specify whether you want the inline version of this control
   */
  inline: PropTypes__default["default"].bool,

  /**
   * Specify if the currently value is invalid.
   */
  invalid: PropTypes__default["default"].bool,

  /**
   * Message which is displayed if the value is invalid.
   */
  invalidText: PropTypes__default["default"].node,

  /**
   * Provide label text to be read by screen readers when interacting with the
   * control
   */
  labelText: PropTypes__default["default"].node,

  /**
   * `true` to use the light version. For use on $ui-01 backgrounds only.
   * Don't use this to make tile background color same as container background color.
   */
  light: deprecate["default"](PropTypes__default["default"].bool, 'The `light` prop for `Select` is no longer needed and has ' + 'been deprecated in v11 in favor of the new `Layer` component. It will be moved in the next major release.'),

  /**
   * Reserved for use with <Pagination> component. Will not render a label for the
   * select since Pagination renders one for us.
   */
  noLabel: PropTypes__default["default"].bool,

  /**
   * Provide an optional `onChange` hook that is called each time the value of
   * the underlying `<input>` changes
   */
  onChange: PropTypes__default["default"].func,

  /**
   * Specify the size of the Select Input.
   */
  size: PropTypes__default["default"].oneOf(['sm', 'md', 'lg']),

  /**
   * Specify whether the control is currently in warning state
   */
  warn: PropTypes__default["default"].bool,

  /**
   * Provide the text that is displayed when the control is in warning state
   */
  warnText: PropTypes__default["default"].node
};
Select.defaultProps = {
  disabled: false,
  labelText: 'Select',
  inline: false,
  invalid: false,
  invalidText: '',
  helperText: ''
};
var Select$1 = Select;

exports["default"] = Select$1;
