/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var PropTypes = require('prop-types');
var React = require('react');
var usePrefix = require('../../internal/usePrefix.js');
var useMergedRefs = require('../../internal/useMergedRefs.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var InlineCheckbox = /*#__PURE__*/React__default["default"].forwardRef(function InlineCheckbox(props, forwardRef) {
  var ariaLabel = props.ariaLabel,
      _props$checked = props.checked,
      checked = _props$checked === void 0 ? false : _props$checked,
      disabled = props.disabled,
      id = props.id,
      indeterminate = props.indeterminate,
      name = props.name,
      _props$onChange = props.onChange,
      _onChange = _props$onChange === void 0 ? function () {} : _props$onChange,
      onClick = props.onClick,
      onKeyDown = props.onKeyDown,
      title = props.title;

  var prefix = usePrefix.usePrefix();
  var inputRef = React.useRef(null);
  var ref = useMergedRefs.useMergedRefs([inputRef, forwardRef]);
  var inputProps = {
    checked: checked,
    className: "".concat(prefix, "--checkbox"),
    disabled: disabled,
    id: id,
    name: name,
    onClick: onClick,
    onChange: function onChange(evt) {
      _onChange(evt.target.checked, id, evt);
    },
    onKeyDown: onKeyDown,
    ref: ref,
    type: 'checkbox'
  };

  if (indeterminate) {
    inputProps.checked = false;
    inputProps['aria-checked'] = 'mixed';
  }

  React.useEffect(function () {
    inputRef.current.indeterminate = indeterminate;
  }, [indeterminate]);
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--checkbox--inline")
  }, /*#__PURE__*/React__default["default"].createElement("input", inputProps),
  /*#__PURE__*/

  /* eslint-disable jsx-a11y/label-has-for,jsx-a11y/label-has-associated-control,jsx-a11y/click-events-have-key-events,jsx-a11y/no-noninteractive-element-interactions */
  React__default["default"].createElement("label", {
    htmlFor: id,
    className: "".concat(prefix, "--checkbox-label"),
    "aria-label": ariaLabel,
    title: title,
    onClick: function onClick(evt) {
      evt.stopPropagation();
    }
  }));
});
InlineCheckbox.propTypes = {
  /**
   * Specify the label for the control
   */
  ariaLabel: PropTypes__default["default"].string.isRequired,

  /**
   * Specify whether the underlying control is checked, or not
   */
  checked: PropTypes__default["default"].bool,

  /**
   * Specify whether the underlying input control should be disabled
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * Provide an `id` for the underlying input control
   */
  id: PropTypes__default["default"].string.isRequired,

  /**
   * Specify whether the control is in an indterminate state
   */
  indeterminate: PropTypes__default["default"].bool,

  /**
   * Provide a `name` for the underlying input control
   */
  name: PropTypes__default["default"].string.isRequired,

  /**
   * Provide an optional hook that is called each time the input is updated
   */
  onChange: PropTypes__default["default"].func,

  /**
   * Provide a handler that is invoked when a user clicks on the control
   */
  onClick: PropTypes__default["default"].func,

  /**
   * Provide a handler that is invoked on the key down event for the control
   */
  onKeyDown: PropTypes__default["default"].func,

  /**
   * Provide an optional tooltip for the InlineCheckbox
   */
  title: PropTypes__default["default"].string
};
var InlineCheckbox$1 = InlineCheckbox;

exports["default"] = InlineCheckbox$1;
