/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var cx = require('classnames');
var PropTypes = require('prop-types');
var React = require('react');
var usePrefix = require('../../internal/usePrefix.js');
var GridContext = require('./GridContext.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["as", "children", "className", "condensed", "fullWidth", "narrow"],
    _excluded2 = ["as", "className", "children", "mode"];

function CSSGrid(_ref) {
  var _cx;

  var _ref$as = _ref.as,
      BaseComponent = _ref$as === void 0 ? 'div' : _ref$as,
      children = _ref.children,
      customClassName = _ref.className,
      _ref$condensed = _ref.condensed,
      condensed = _ref$condensed === void 0 ? false : _ref$condensed,
      _ref$fullWidth = _ref.fullWidth,
      fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
      _ref$narrow = _ref.narrow,
      narrow = _ref$narrow === void 0 ? false : _ref$narrow,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix.usePrefix();

  var _useGridSettings = GridContext.useGridSettings(),
      subgrid = _useGridSettings.subgrid;

  var mode = 'wide';

  if (narrow) {
    mode = 'narrow';
  } else if (condensed) {
    mode = 'condensed';
  }

  if (subgrid) {
    return /*#__PURE__*/React__default["default"].createElement(GridContext.GridSettings, {
      mode: "css-grid",
      subgrid: true
    }, /*#__PURE__*/React__default["default"].createElement(Subgrid, _rollupPluginBabelHelpers["extends"]({
      as: BaseComponent,
      className: customClassName,
      mode: mode
    }, rest), children));
  }

  var className = cx__default["default"](customClassName, (_cx = {}, _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--css-grid"), true), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--css-grid--condensed"), mode === 'condensed'), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--css-grid--narrow"), mode === 'narrow'), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--css-grid--full-width"), fullWidth), _cx));
  return /*#__PURE__*/React__default["default"].createElement(GridContext.GridSettings, {
    mode: "css-grid",
    subgrid: true
  }, /*#__PURE__*/React__default["default"].createElement(BaseComponent, _rollupPluginBabelHelpers["extends"]({
    className: className
  }, rest), children));
}

CSSGrid.propTypes = {
  /**
   * Provide a custom element to render instead of the default <div>
   */
  as: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType]),

  /**
   * Pass in content that will be rendered within the `Grid`
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify a custom className to be applied to the `Grid`
   */
  className: PropTypes__default["default"].string,

  /**
   * Collapse the gutter to 1px. Useful for fluid layouts.
   * Rows have 1px of margin between them to match gutter.
   */
  condensed: PropTypes__default["default"].bool,

  /**
   * Remove the default max width that the grid has set
   */
  fullWidth: PropTypes__default["default"].bool,

  /**
   * Container hangs 16px into the gutter. Useful for
   * typographic alignment with and without containers.
   */
  narrow: PropTypes__default["default"].bool
};

function Subgrid(_ref2) {
  var _cx2;

  var _ref2$as = _ref2.as,
      BaseComponent = _ref2$as === void 0 ? 'div' : _ref2$as,
      customClassName = _ref2.className,
      children = _ref2.children,
      mode = _ref2.mode,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref2, _excluded2);

  var prefix = usePrefix.usePrefix();
  var className = cx__default["default"](customClassName, (_cx2 = {}, _rollupPluginBabelHelpers.defineProperty(_cx2, "".concat(prefix, "--subgrid"), true), _rollupPluginBabelHelpers.defineProperty(_cx2, "".concat(prefix, "--subgrid--condensed"), mode === 'condensed'), _rollupPluginBabelHelpers.defineProperty(_cx2, "".concat(prefix, "--subgrid--narrow"), mode === 'narrow'), _rollupPluginBabelHelpers.defineProperty(_cx2, "".concat(prefix, "--subgrid--wide"), mode === 'wide'), _cx2));
  return /*#__PURE__*/React__default["default"].createElement(BaseComponent, _rollupPluginBabelHelpers["extends"]({}, rest, {
    className: className
  }), children);
}

Subgrid.propTypes = {
  /**
   * Provide a custom element to render instead of the default <div>
   */
  as: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType]),

  /**
   * Pass in content that will be rendered within the `Subgrid`
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify a custom className to be applied to the `Subgrid`
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify the grid mode for the subgrid
   */
  mode: PropTypes__default["default"].oneOf(['wide', 'narrow', 'condensed'])
};

exports.CSSGrid = CSSGrid;
