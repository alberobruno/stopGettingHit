/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var PropTypes = require('prop-types');
var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__namespace = /*#__PURE__*/_interopNamespace(React);

/**
 * Provides a grid context for communication the grid "mode" (flexbox or
 * css-grid) along with subgrid information.
 */

var GridSettingsContext = /*#__PURE__*/React__namespace.createContext({
  mode: 'flexbox',
  subgrid: false
});
function GridSettings(_ref) {
  var children = _ref.children,
      mode = _ref.mode,
      _ref$subgrid = _ref.subgrid,
      subgrid = _ref$subgrid === void 0 ? false : _ref$subgrid;
  var value = React__namespace.useMemo(function () {
    return {
      mode: mode,
      subgrid: subgrid
    };
  }, [mode, subgrid]);
  return /*#__PURE__*/React__namespace.createElement(GridSettingsContext.Provider, {
    value: value
  }, children);
}
GridSettings.propTypes = {
  /**
   * Pass in components which will be rendered within the `GridSettings`
   * component
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify the grid mode for the GridContext
   */
  mode: PropTypes__default["default"].oneOf(['flexbox', 'css-grid']).isRequired,

  /**
   * Specify whether subgrid should be enabled
   */
  subgrid: PropTypes__default["default"].bool
};
/**
 * Helper function for accessing the GridContext value
 */

function useGridSettings() {
  return React__namespace.useContext(GridSettingsContext);
}

exports.GridSettings = GridSettings;
exports.useGridSettings = useGridSettings;
