/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var cx = require('classnames');
var React = require('react');
var PropTypes = require('prop-types');
var ListBoxPropTypes = require('./ListBoxPropTypes.js');
var usePrefix = require('../../internal/usePrefix.js');
var ListBoxField = require('./ListBoxField.js');
var ListBoxMenu = require('./ListBoxMenu.js');
var ListBoxMenuIcon = require('./ListBoxMenuIcon.js');
var ListBoxMenuItem = require('./ListBoxMenuItem.js');
var ListBoxSelection = require('./ListBoxSelection.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

var _excluded = ["children", "className", "disabled", "type", "size", "invalid", "invalidText", "warn", "warnText", "light", "isOpen"];

var handleOnKeyDown = function handleOnKeyDown(event) {
  if (event.keyCode === 27) {
    event.stopPropagation();
  }
};

var handleClick = function handleClick(event) {
  event.preventDefault();
  event.stopPropagation();
};
/**
 * `ListBox` is a generic container component that handles creating the
 * container class name in response to certain props.
 */


var ListBox = /*#__PURE__*/React__default["default"].forwardRef(function ListBox(_ref, ref) {
  var _cx;

  var children = _ref.children,
      containerClassName = _ref.className,
      disabled = _ref.disabled,
      type = _ref.type,
      size = _ref.size,
      invalid = _ref.invalid,
      invalidText = _ref.invalidText,
      warn = _ref.warn,
      warnText = _ref.warnText,
      light = _ref.light,
      isOpen = _ref.isOpen,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix.usePrefix();
  var showWarning = !invalid && warn;
  var className = cx__default["default"]((_cx = {}, _rollupPluginBabelHelpers.defineProperty(_cx, containerClassName, !!containerClassName), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--list-box"), true), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--list-box--").concat(size), size), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--list-box--inline"), type === 'inline'), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--list-box--disabled"), disabled), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--list-box--light"), light), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--list-box--expanded"), isOpen), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--list-box--warning"), showWarning), _cx));
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({}, rest, {
    className: className,
    ref: ref,
    onKeyDown: handleOnKeyDown,
    onClick: handleClick,
    "data-invalid": invalid || undefined
  }), children), invalid ? /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--form-requirement")
  }, invalidText) : null, showWarning ? /*#__PURE__*/React__default["default"].createElement("div", {
    className: "".concat(prefix, "--form-requirement")
  }, warnText) : null);
});
ListBox.displayName = 'ListBox';
ListBox.propTypes = {
  /**
   * Provide the contents of your ListBox
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify a class name to be applied on the containing list box node
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether the ListBox is currently disabled
   */
  disabled: PropTypes__default["default"].bool.isRequired,

  /**
   * Specify whether the control is currently invalid
   */
  invalid: PropTypes__default["default"].bool,

  /**
   * Specify the text to be displayed when the control is invalid
   */
  invalidText: PropTypes__default["default"].node,

  /**
   * Specify if the control should render open
   */
  isOpen: PropTypes__default["default"].bool,

  /**
   * `true` to use the light version. For use on $ui-01 backgrounds only.
   * Don't use this to make tile background color same as container background color.
   */
  light: PropTypes__default["default"].bool,

  /**
   * Specify the size of the ListBox. Currently supports either `sm`, `md` or `lg` as an option.
   */
  size: ListBoxPropTypes.ListBoxSize,

  /**
   * Specify the "type" of the ListBox. Currently supports either `default` or
   * `inline` as an option.
   */
  type: ListBoxPropTypes.ListBoxType.isRequired,

  /**
   * Specify whether the control is currently in warning state
   */
  warn: PropTypes__default["default"].bool,

  /**
   * Provide the text that is displayed when the control is in warning state
   */
  warnText: PropTypes__default["default"].node
};
ListBox.defaultProps = {
  disabled: false,
  type: 'default'
};
ListBox.Field = ListBoxField["default"];
ListBox.Menu = ListBoxMenu["default"];
ListBox.MenuIcon = ListBoxMenuIcon["default"];
ListBox.MenuItem = ListBoxMenuItem["default"];
ListBox.Selection = ListBoxSelection["default"];
var ListBox$1 = ListBox;

exports["default"] = ListBox$1;
