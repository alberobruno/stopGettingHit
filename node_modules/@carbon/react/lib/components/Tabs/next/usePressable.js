/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');

function usePressable(ref) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      onPress = _ref.onPress,
      onPressIn = _ref.onPressIn,
      onPressOut = _ref.onPressOut,
      onLongPress = _ref.onLongPress,
      _ref$delayLongPressMs = _ref.delayLongPressMs,
      delayLongPressMs = _ref$delayLongPressMs === void 0 ? 500 : _ref$delayLongPressMs;

  var savedOnPress = React.useRef(onPress);
  var savedOnPressIn = React.useRef(onPressIn);
  var savedOnPressOut = React.useRef(onPressOut);
  var savedOnLongPress = React.useRef(onLongPress);

  var _useState = React.useState(false),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      pendingLongPress = _useState2[0],
      setPendingLongPress = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
      longPress = _useState4[0],
      setLongPress = _useState4[1];

  var state = React.useRef({
    longPress: false
  });
  React.useEffect(function () {
    savedOnPress.current = onPress;
  }, [onPress]);
  React.useEffect(function () {
    savedOnPressIn.current = onPressIn;
  }, [onPressIn]);
  React.useEffect(function () {
    savedOnPressOut.current = onPressOut;
  }, [onPressOut]);
  React.useEffect(function () {
    savedOnLongPress.current = onLongPress;
  }, [onLongPress]);
  React.useEffect(function () {
    var element = ref.current; // Fired when a pointer becomes active buttons state.

    function onPointerDown(event) {
      var _savedOnPressIn$curre;

      setPendingLongPress(true);
      (_savedOnPressIn$curre = savedOnPressIn.current) === null || _savedOnPressIn$curre === void 0 ? void 0 : _savedOnPressIn$curre.call(savedOnPressIn);
      event.preventDefault();
    } // Fired when a pointer is no longer active buttons state.


    function onPointerUp() {
      var _savedOnPressOut$curr;

      setPendingLongPress(false);
      setLongPress(false);
      (_savedOnPressOut$curr = savedOnPressOut.current) === null || _savedOnPressOut$curr === void 0 ? void 0 : _savedOnPressOut$curr.call(savedOnPressOut, state.current);
    } // A browser fires this event if it concludes the pointer
    // will no longer be able to generate events (for example
    // the related device is deactivated).


    function onPointerCancel() {
      var _savedOnPressOut$curr2;

      setPendingLongPress(false);
      setLongPress(false);
      (_savedOnPressOut$curr2 = savedOnPressOut.current) === null || _savedOnPressOut$curr2 === void 0 ? void 0 : _savedOnPressOut$curr2.call(savedOnPressOut);
      state.current.longPress = false;
    } // Fired when a pointer is moved out of the hit test
    // boundaries of an element. For pen devices, this event
    // is fired when the stylus leaves the hover range
    // detectable by the digitizer.


    function onPointerLeave() {
      var _savedOnPressOut$curr3;

      setPendingLongPress(false);
      setLongPress(false);
      (_savedOnPressOut$curr3 = savedOnPressOut.current) === null || _savedOnPressOut$curr3 === void 0 ? void 0 : _savedOnPressOut$curr3.call(savedOnPressOut);
      state.current.longPress = false;
    }

    function onClick() {
      var _savedOnPress$current;

      setLongPress(false);
      setPendingLongPress(false);
      (_savedOnPress$current = savedOnPress.current) === null || _savedOnPress$current === void 0 ? void 0 : _savedOnPress$current.call(savedOnPress, state.current);
      state.current.longPress = false;
    } // Certain devices treat long press events as context menu triggers


    function onContextMenu(event) {
      event.preventDefault();
    }

    element.addEventListener('pointerdown', onPointerDown);
    element.addEventListener('pointerup', onPointerUp);
    element.addEventListener('pointercancel', onPointerCancel);
    element.addEventListener('pointerleave', onPointerLeave);
    element.addEventListener('click', onClick);
    element.addEventListener('contextmenu', onContextMenu);
    return function () {
      element.removeEventListener('pointerdown', onPointerDown);
      element.removeEventListener('pointerup', onPointerUp);
      element.removeEventListener('pointercancel', onPointerCancel);
      element.removeEventListener('pointerleave', onPointerLeave);
      element.removeEventListener('click', onClick);
      element.removeEventListener('contextmenu', onContextMenu);
    };
  }, [ref]);
  React.useEffect(function () {
    if (pendingLongPress) {
      var timeoutId = setTimeout(function () {
        setPendingLongPress(false);
        setLongPress(true);
      }, delayLongPressMs);
      return function () {
        clearTimeout(timeoutId);
      };
    }
  }, [pendingLongPress, delayLongPressMs]);
  React.useEffect(function () {
    if (longPress) {
      var _savedOnLongPress$cur;

      state.current.longPress = true;
      return (_savedOnLongPress$cur = savedOnLongPress.current) === null || _savedOnLongPress$cur === void 0 ? void 0 : _savedOnLongPress$cur.call(savedOnLongPress);
    }
  }, [longPress]);
}

exports.usePressable = usePressable;
