/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var cx = require('classnames');
var deprecate = require('../../prop-types/deprecate.js');
var events = require('../../tools/events.js');
var usePrefix = require('../../internal/usePrefix.js');
var match = require('../../internal/keyboard/match.js');
var navigation = require('../../internal/keyboard/navigation.js');
var keys = require('../../internal/keyboard/keys.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var _excluded = ["children", "className", "light", "selectedIndex", "selectionMode", "size"];

var ContentSwitcher = /*#__PURE__*/function (_React$Component) {
  _rollupPluginBabelHelpers.inherits(ContentSwitcher, _React$Component);

  var _super = _rollupPluginBabelHelpers.createSuper(ContentSwitcher);

  function ContentSwitcher() {
    var _this;

    _rollupPluginBabelHelpers.classCallCheck(this, ContentSwitcher);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "_switchRefs", []);

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "state", {});

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "handleItemRef", function (index) {
      return function (ref) {
        _this._switchRefs[index] = ref;
      };
    });

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "handleChildChange", function (data) {
      var selectionMode = _this.props.selectionMode; // the currently selected child index

      var selectedIndex = _this.state.selectedIndex; // the newly selected child index

      var index = data.index;
      var key = data.key;

      if (match.matches(data, [keys.ArrowRight, keys.ArrowLeft])) {
        var nextIndex = navigation.getNextIndex(key, index, _this.props.children.length);
        var children = React__default["default"].Children.toArray(_this.props.children);

        if (selectionMode === 'manual') {
          var switchRef = _this._switchRefs[nextIndex];
          switchRef && switchRef.focus();
        } else {
          _this.setState({
            selectedIndex: nextIndex
          }, function () {
            var child = children[_this.state.selectedIndex];
            var switchRef = _this._switchRefs[_this.state.selectedIndex];
            switchRef && switchRef.focus();

            _this.props.onChange(_rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, data), {}, {
              index: _this.state.selectedIndex,
              name: child.props.name,
              text: child.props.text
            }));
          });
        }
      } else if (selectedIndex !== index) {
        _this.setState({
          selectedIndex: index
        }, function () {
          var switchRef = _this._switchRefs[index];
          switchRef && switchRef.focus();

          _this.props.onChange(data);
        });
      }
    });

    return _this;
  }

  _rollupPluginBabelHelpers.createClass(ContentSwitcher, [{
    key: "render",
    value: function render() {
      var _classNames,
          _this2 = this;

      var prefix = this.context;

      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          light = _this$props.light;
          _this$props.selectedIndex;
          _this$props.selectionMode;
          var size = _this$props.size,
          other = _rollupPluginBabelHelpers.objectWithoutProperties(_this$props, _excluded);

      var classes = cx__default["default"]("".concat(prefix, "--content-switcher"), className, (_classNames = {}, _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--content-switcher--light"), light), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--content-switcher--").concat(size), size), _classNames));
      return /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({}, other, {
        className: classes,
        role: "tablist"
      }), React__default["default"].Children.map(children, function (child, index) {
        return /*#__PURE__*/React__default["default"].cloneElement(child, {
          index: index,
          onClick: events.composeEventHandlers([_this2.handleChildChange, child.props.onClick]),
          onKeyDown: _this2.handleChildChange,
          selected: index === _this2.state.selectedIndex,
          ref: _this2.handleItemRef(index)
        });
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(_ref, state) {
      var selectedIndex = _ref.selectedIndex;
      var prevSelectedIndex = state.prevSelectedIndex;
      return prevSelectedIndex === selectedIndex ? null : {
        selectedIndex: selectedIndex,
        prevSelectedIndex: selectedIndex
      };
    }
  }]);

  return ContentSwitcher;
}(React__default["default"].Component);

_rollupPluginBabelHelpers.defineProperty(ContentSwitcher, "propTypes", {
  /**
   * Pass in Switch components to be rendered in the ContentSwitcher
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify an optional className to be added to the container node
   */
  className: PropTypes__default["default"].string,

  /**
   * `true` to use the light variant.
   */
  light: deprecate["default"](PropTypes__default["default"].bool, 'The `light` prop for `ContentSwitcher` is no longer needed and has ' + 'been deprecated. It will be removed in the next major release.'),

  /**
   * Specify an `onChange` handler that is called whenever the ContentSwitcher
   * changes which item is selected
   */
  onChange: PropTypes__default["default"].func.isRequired,

  /**
   * Specify a selected index for the initially selected content
   */
  selectedIndex: PropTypes__default["default"].number,

  /**
   * Choose whether or not to automatically change selection on focus
   */
  selectionMode: PropTypes__default["default"].oneOf(['automatic', 'manual']),

  /**
   * Specify the size of the Content Switcher. Currently supports either `sm`, 'md' (default) or 'lg` as an option.
   * TODO V11: remove `xl` (replaced with lg)
   */
  size: PropTypes__default["default"].oneOf(['sm', 'md', 'lg', 'xl'])
});

_rollupPluginBabelHelpers.defineProperty(ContentSwitcher, "contextType", usePrefix.PrefixContext);

_rollupPluginBabelHelpers.defineProperty(ContentSwitcher, "defaultProps", {
  selectedIndex: 0,
  selectionMode: 'automatic',
  onChange: function onChange() {}
});

exports["default"] = ContentSwitcher;
