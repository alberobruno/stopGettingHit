/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var cx = require('classnames');
var PropTypes = require('prop-types');
var FeatureFlags = require('@carbon/feature-flags');
var React = require('react');
var Filename = require('./Filename.js');
var FileUploaderButton = require('./FileUploaderButton.js');
var types = require('../../prop-types/types.js');
var usePrefix = require('../../internal/usePrefix.js');
var match = require('../../internal/keyboard/match.js');
var keys = require('../../internal/keyboard/keys.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var FeatureFlags__namespace = /*#__PURE__*/_interopNamespace(FeatureFlags);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["iconDescription", "buttonLabel", "buttonKind", "disabled", "filenameStatus", "labelDescription", "labelTitle", "className", "multiple", "accept", "name", "size", "onDelete"];

var FileUploader = /*#__PURE__*/function (_React$Component) {
  _rollupPluginBabelHelpers.inherits(FileUploader, _React$Component);

  var _super = _rollupPluginBabelHelpers.createSuper(FileUploader);

  function FileUploader() {
    var _this;

    _rollupPluginBabelHelpers.classCallCheck(this, FileUploader);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "state", {
      filenames: []
    });

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "nodes", []);

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "handleChange", function (evt) {
      evt.stopPropagation();
      var filenames = Array.prototype.map.call(evt.target.files, function (file) {
        return file.name;
      });

      _this.setState({
        filenames: _this.props.multiple ? _this.state.filenames.concat(filenames) : filenames
      });

      if (_this.props.onChange) {
        _this.props.onChange(evt);
      }
    });

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "handleClick", function (evt, _ref) {
      var index = _ref.index,
          filenameStatus = _ref.filenameStatus;

      if (filenameStatus === 'edit') {
        evt.stopPropagation();

        var filteredArray = _this.state.filenames.filter(function (filename) {
          return filename !== _this.nodes[index].innerText.trim();
        });

        _this.setState({
          filenames: filteredArray
        });

        if (_this.props.onDelete) {
          _this.props.onDelete(evt);
        }

        _this.props.onClick(evt);
      }
    });

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "clearFiles", function () {
      // A clearFiles function that resets filenames and can be referenced using a ref by the parent.
      _this.setState({
        filenames: []
      });
    });

    return _this;
  }

  _rollupPluginBabelHelpers.createClass(FileUploader, [{
    key: "render",
    value: function render() {
      var _classNames,
          _classNames3,
          _this2 = this;

      var _this$props = this.props,
          iconDescription = _this$props.iconDescription,
          buttonLabel = _this$props.buttonLabel,
          buttonKind = _this$props.buttonKind,
          disabled = _this$props.disabled,
          filenameStatus = _this$props.filenameStatus,
          labelDescription = _this$props.labelDescription,
          labelTitle = _this$props.labelTitle,
          className = _this$props.className,
          multiple = _this$props.multiple,
          accept = _this$props.accept,
          name = _this$props.name,
          _this$props$size = _this$props.size,
          size = _this$props$size === void 0 ? 'md' : _this$props$size;
          _this$props.onDelete;
          var other = _rollupPluginBabelHelpers.objectWithoutProperties(_this$props, _excluded);

      var prefix = this.context;
      var classes = cx__default["default"]((_classNames = {}, _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--form-item"), true), _rollupPluginBabelHelpers.defineProperty(_classNames, className, className), _classNames));

      var getHelperLabelClasses = function getHelperLabelClasses(baseClass) {
        return cx__default["default"](baseClass, _rollupPluginBabelHelpers.defineProperty({}, "".concat(prefix, "--label-description--disabled"), disabled));
      };

      var selectedFileClasses = cx__default["default"]("".concat(prefix, "--file__selected-file"), (_classNames3 = {}, _rollupPluginBabelHelpers.defineProperty(_classNames3, "".concat(prefix, "--file__selected-file--md"), size === 'field' || size === 'md'), _rollupPluginBabelHelpers.defineProperty(_classNames3, "".concat(prefix, "--file__selected-file--sm"), size === 'small' || size === 'sm'), _classNames3));
      return /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({
        className: classes
      }, other), FeatureFlags__namespace.enabled('enable-v11-release') && !labelTitle ? null : /*#__PURE__*/React__default["default"].createElement("p", {
        className: getHelperLabelClasses("".concat(prefix, "--file--label"))
      }, labelTitle), /*#__PURE__*/React__default["default"].createElement("p", {
        className: getHelperLabelClasses("".concat(prefix, "--label-description"))
      }, labelDescription), /*#__PURE__*/React__default["default"].createElement(FileUploaderButton["default"], {
        disabled: disabled,
        labelText: buttonLabel,
        multiple: multiple,
        buttonKind: buttonKind,
        onChange: this.handleChange,
        disableLabelChanges: true,
        accept: accept,
        name: name,
        size: size
      }), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "".concat(prefix, "--file-container")
      }, this.state.filenames.length === 0 ? null : this.state.filenames.map(function (name, index) {
        return /*#__PURE__*/React__default["default"].createElement("span", _rollupPluginBabelHelpers["extends"]({
          key: index,
          className: selectedFileClasses,
          ref: function ref(node) {
            return _this2.nodes[index] = node;
          } // eslint-disable-line

        }, other), /*#__PURE__*/React__default["default"].createElement("p", {
          className: "".concat(prefix, "--file-filename")
        }, name), /*#__PURE__*/React__default["default"].createElement("span", {
          className: "".concat(prefix, "--file__state-container")
        }, /*#__PURE__*/React__default["default"].createElement(Filename["default"], {
          iconDescription: iconDescription,
          status: filenameStatus,
          onKeyDown: function onKeyDown(evt) {
            if (match.matches(evt, [keys.Enter, keys.Space])) {
              _this2.handleClick(evt, {
                index: index,
                filenameStatus: filenameStatus
              });
            }
          },
          onClick: function onClick(evt) {
            return _this2.handleClick(evt, {
              index: index,
              filenameStatus: filenameStatus
            });
          }
        })));
      })));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(_ref2, state) {
      var filenameStatus = _ref2.filenameStatus;
      var prevFilenameStatus = state.prevFilenameStatus;
      return prevFilenameStatus === filenameStatus ? null : {
        filenameStatus: filenameStatus,
        prevFilenameStatus: filenameStatus
      };
    }
  }]);

  return FileUploader;
}(React__default["default"].Component);

_rollupPluginBabelHelpers.defineProperty(FileUploader, "propTypes", {
  /**
   * Specify the types of files that this input should be able to receive
   */
  accept: PropTypes__default["default"].arrayOf(PropTypes__default["default"].string),

  /**
   * Specify the type of the <FileUploaderButton>
   */
  buttonKind: PropTypes__default["default"].oneOf(types.ButtonKinds),

  /**
   * Provide the label text to be read by screen readers when interacting with
   * the <FileUploaderButton>
   */
  buttonLabel: PropTypes__default["default"].string,

  /**
   * Provide a custom className to be applied to the container node
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether file input is disabled
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * Specify the status of the File Upload
   */
  filenameStatus: PropTypes__default["default"].oneOf(['edit', 'complete', 'uploading']).isRequired,

  /**
   * Provide a description for the complete/close icon that can be read by screen readers
   */
  iconDescription: FeatureFlags__namespace.enabled('enable-v11-release') ? PropTypes__default["default"].string.isRequired : PropTypes__default["default"].string,

  /**
   * Specify the description text of this <FileUploader>
   */
  labelDescription: PropTypes__default["default"].string,

  /**
   * Specify the title text of this <FileUploader>
   */
  labelTitle: PropTypes__default["default"].string,

  /**
   * Specify if the component should accept multiple files to upload
   */
  multiple: PropTypes__default["default"].bool,

  /**
   * Provide a name for the underlying `<input>` node
   */
  name: PropTypes__default["default"].string,

  /**
   * Provide an optional `onChange` hook that is called each time the input is
   * changed
   */
  onChange: PropTypes__default["default"].func,

  /**
   * Provide an optional `onClick` hook that is called each time the
   * FileUploader is clicked
   */
  onClick: PropTypes__default["default"].func,

  /**
   * Provide an optional `onDelete` hook that is called when an uploaded item
   * is removed
   */
  onDelete: PropTypes__default["default"].func,

  /**
   * Specify the size of the FileUploaderButton, from a list of available
   * sizes.
   */
  size: FeatureFlags__namespace.enabled('enable-v11-release') ? PropTypes__default["default"].oneOf(['sm', 'md', 'lg']) : PropTypes__default["default"].oneOf(['default', 'field', 'small', 'sm', 'md', 'lg'])
});

_rollupPluginBabelHelpers.defineProperty(FileUploader, "contextType", usePrefix.PrefixContext);

_rollupPluginBabelHelpers.defineProperty(FileUploader, "defaultProps", {
  disabled: false,
  iconDescription: FeatureFlags__namespace.enabled('enable-v11-release') ? undefined : 'Provide icon description',
  filenameStatus: 'uploading',
  buttonLabel: '',
  buttonKind: 'primary',
  multiple: false,
  onClick: function onClick() {},
  accept: []
});

exports["default"] = FileUploader;
