/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var cx = require('classnames');
var usePrefix = require('../../internal/usePrefix.js');
var PropTypes = require('prop-types');
var React = require('react');
var FeatureFlags = require('@carbon/feature-flags');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var FeatureFlags__namespace = /*#__PURE__*/_interopNamespace(FeatureFlags);

var _excluded = ["align", "children", "className", "disabled", "size"];

function Accordion(_ref) {
  var _cx;

  var _ref$align = _ref.align,
      align = _ref$align === void 0 ? 'end' : _ref$align,
      children = _ref.children,
      customClassName = _ref.className,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'md' : _ref$size,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var prefix = usePrefix.usePrefix();
  var className = cx__default["default"]("".concat(prefix, "--accordion"), customClassName, (_cx = {}, _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--accordion--").concat(align), align), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--accordion--").concat(size), size), _cx));
  return /*#__PURE__*/React__default["default"].createElement("ul", _rollupPluginBabelHelpers["extends"]({
    className: className
  }, rest), disabled ? React__default["default"].Children.toArray(children).map(function (child) {
    return /*#__PURE__*/React__default["default"].cloneElement(child, {
      disabled: disabled
    });
  }) : children);
}

Accordion.propTypes = {
  /**
   * Specify the alignment of the accordion heading title and chevron.
   */
  align: PropTypes__default["default"].oneOf(['start', 'end']),

  /**
   * Pass in the children that will be rendered within the Accordion
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether an individual AccordionItem should be disabled
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * Specify the size of the Accordion. Currently supports the following:
   */
  size: FeatureFlags__namespace.enabled('enable-v11-release') ? PropTypes__default["default"].oneOf(['sm', 'md', 'lg']) : PropTypes__default["default"].oneOf(['sm', 'md', 'lg', 'xl'])
};

exports["default"] = Accordion;
