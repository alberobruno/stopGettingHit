/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var iconsReact = require('@carbon/icons-react');
var cx = require('classnames');
var PropTypes = require('prop-types');
var React = require('react');
require('../Text/index.js');
var useId = require('../../internal/useId.js');
var deprecate = require('../../prop-types/deprecate.js');
var usePrefix = require('../../internal/usePrefix.js');
var Text = require('../Text/Text.js');
var match = require('../../internal/keyboard/match.js');
var keys = require('../../internal/keyboard/keys.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var _excluded = ["children", "className", "iconDescription", "open", "onHeadingClick", "renderExpando", "renderToggle", "title", "disabled"];

var defaultRenderToggle = function defaultRenderToggle(props) {
  return /*#__PURE__*/React__default["default"].createElement("button", _rollupPluginBabelHelpers["extends"]({
    type: "button"
  }, props));
};

function AccordionItem(_ref) {
  var _cx;

  var children = _ref.children,
      customClassName = _ref.className;
      _ref.iconDescription;
      var _ref$open = _ref.open,
      open = _ref$open === void 0 ? false : _ref$open,
      onHeadingClick = _ref.onHeadingClick,
      _ref$renderExpando = _ref.renderExpando,
      renderExpando = _ref$renderExpando === void 0 ? defaultRenderToggle : _ref$renderExpando,
      renderToggle = _ref.renderToggle,
      _ref$title = _ref.title,
      title = _ref$title === void 0 ? 'title' : _ref$title,
      disabled = _ref.disabled,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var _useState = React.useState(open),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  var _useState3 = React.useState(open),
      _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
      prevIsOpen = _useState4[0],
      setPrevIsOpen = _useState4[1];

  var _useState5 = React.useState(''),
      _useState6 = _rollupPluginBabelHelpers.slicedToArray(_useState5, 2),
      animation = _useState6[0],
      setAnimation = _useState6[1];

  var id = useId.useId('accordion-item');
  var prefix = usePrefix.usePrefix();
  var className = cx__default["default"]((_cx = {}, _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--accordion__item"), true), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--accordion__item--active"), isOpen), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--accordion__item--").concat(animation), animation), _rollupPluginBabelHelpers.defineProperty(_cx, "".concat(prefix, "--accordion__item--disabled"), disabled), _rollupPluginBabelHelpers.defineProperty(_cx, customClassName, !!customClassName), _cx));
  var Toggle = renderToggle || renderExpando; // remove renderExpando in next major release

  if (open !== prevIsOpen) {
    setAnimation(isOpen ? 'collapsing' : 'expanding');
    setIsOpen(open);
    setPrevIsOpen(open);
  } // When the AccordionItem heading is clicked, toggle the open state of the
  // panel


  function onClick(event) {
    var nextValue = !isOpen;
    setAnimation(isOpen ? 'collapsing' : 'expanding');
    setIsOpen(nextValue);

    if (onHeadingClick) {
      // TODO: normalize signature, potentially:
      // onHeadingClick :: (event: Event, state: { isOpen: Boolean }) => any
      onHeadingClick({
        isOpen: nextValue,
        event: event
      });
    }
  } // If the AccordionItem is open, and the user hits the ESC key, then close it


  function onKeyDown(event) {
    if (isOpen && match.match(event, keys.Escape)) {
      setIsOpen(false);
    }
  }

  function handleAnimationEnd(event) {
    if (rest.handleAnimationEnd) {
      rest.handleAnimationEnd(event);
    }

    setAnimation('');
  }

  return /*#__PURE__*/React__default["default"].createElement("li", _rollupPluginBabelHelpers["extends"]({
    className: className
  }, rest, {
    onAnimationEnd: handleAnimationEnd
  }), /*#__PURE__*/React__default["default"].createElement(Toggle, {
    disabled: disabled,
    "aria-controls": id,
    "aria-expanded": isOpen,
    className: "".concat(prefix, "--accordion__heading"),
    onClick: onClick,
    onKeyDown: onKeyDown,
    type: "button"
  }, /*#__PURE__*/React__default["default"].createElement(iconsReact.ChevronRight, {
    className: "".concat(prefix, "--accordion__arrow")
  }), /*#__PURE__*/React__default["default"].createElement(Text.Text, {
    as: "div",
    className: "".concat(prefix, "--accordion__title")
  }, title)), /*#__PURE__*/React__default["default"].createElement("div", {
    id: id,
    className: "".concat(prefix, "--accordion__content")
  }, children));
}

AccordionItem.propTypes = {
  /**
   * Provide the contents of your AccordionItem
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify whether an individual AccordionItem should be disabled
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * The handler of the massaged `click` event.
   */
  onClick: PropTypes__default["default"].func,

  /**
   * The handler of the massaged `click` event on the heading.
   */
  onHeadingClick: PropTypes__default["default"].func,

  /**
   * `true` to open the expand.
   */
  open: PropTypes__default["default"].bool,

  /**
   * The callback function to render the expand button.
   * Can be a React component class.
   */
  renderExpando: deprecate["default"](PropTypes__default["default"].func, 'The `renderExpando` prop has been deprecated and will be removed in the next major release of Carbon. Use the `renderToggle` prop instead.'),

  /**
   * The callback function to render the expand button.
   * Can be a React component class.
   */
  renderToggle: PropTypes__default["default"].func,

  /**
   * The accordion title.
   */
  title: PropTypes__default["default"].node
};

exports["default"] = AccordionItem;
