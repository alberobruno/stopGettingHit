/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var debounce = require('lodash.debounce');
var cx = require('classnames');
var events = require('../../tools/events.js');
var usePrefix = require('../../internal/usePrefix.js');
var index = require('../IconButton/index.js');
var FeatureFlags = require('@carbon/feature-flags');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var debounce__default = /*#__PURE__*/_interopDefaultLegacy(debounce);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var FeatureFlags__namespace = /*#__PURE__*/_interopNamespace(FeatureFlags);

var _excluded = ["children", "className", "feedback", "feedbackTimeout", "onAnimationEnd", "onClick"];
function Copy(_ref) {
  var _classnames;

  var children = _ref.children,
      className = _ref.className,
      feedback = _ref.feedback,
      feedbackTimeout = _ref.feedbackTimeout,
      onAnimationEnd = _ref.onAnimationEnd,
      onClick = _ref.onClick,
      other = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);

  var _useState = React.useState(''),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      animation = _useState2[0],
      setAnimation = _useState2[1];

  var prefix = usePrefix.usePrefix();
  var classNames = cx__default["default"](className, "".concat(prefix, "--copy"), (_classnames = {}, _rollupPluginBabelHelpers.defineProperty(_classnames, "".concat(prefix, "--copy-btn--animating"), animation), _rollupPluginBabelHelpers.defineProperty(_classnames, "".concat(prefix, "--copy-btn--").concat(animation), animation), _classnames)); // eslint-disable-next-line react-hooks/exhaustive-deps

  var handleFadeOut = React.useCallback(debounce__default["default"](function () {
    setAnimation('fade-out');
  }, feedbackTimeout), [feedbackTimeout]);
  var handleClick = React.useCallback(function () {
    setAnimation('fade-in');
    handleFadeOut();
  }, [handleFadeOut]);

  var handleAnimationEnd = function handleAnimationEnd(event) {
    if (event.animationName === 'hide-feedback') {
      setAnimation('');
    }
  };

  React.useEffect(function () {
    return function () {
      handleFadeOut.cancel();
    };
  }, [handleFadeOut]);

  if (FeatureFlags__namespace.enabled('enable-v11-release')) {
    return /*#__PURE__*/React__default["default"].createElement(index.IconButton, _rollupPluginBabelHelpers["extends"]({
      align: "bottom",
      className: classNames,
      label: animation ? feedback : other['aria-label'],
      onClick: events.composeEventHandlers([onClick, handleClick]),
      onAnimationEnd: events.composeEventHandlers([onAnimationEnd, handleAnimationEnd])
    }, other, {
      "aria-live": "polite",
      "aria-label": !children && (animation ? feedback : other['aria-label']) || null
    }), children);
  }

  return /*#__PURE__*/React__default["default"].createElement("button", _rollupPluginBabelHelpers["extends"]({
    type: "button",
    className: classNames,
    onClick: events.composeEventHandlers([onClick, handleClick]),
    onAnimationEnd: events.composeEventHandlers([onAnimationEnd, handleAnimationEnd])
  }, other, {
    "aria-live": "polite",
    "aria-label": !children && (animation ? feedback : other['aria-label']) || null
  }), children, animation ? feedback : other['aria-label'], /*#__PURE__*/React__default["default"].createElement("span", {
    "aria-hidden": "true",
    className: "".concat(prefix, "--assistive-text ").concat(prefix, "--copy-btn__feedback")
  }, feedback));
}
Copy.propTypes = {
  /**
   * Pass in content to be rendered in the underlying `<button>`
   */
  children: PropTypes__default["default"].node,

  /**
   * Specify an optional className to be applied to the underlying `<button>`
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify the string that is displayed when the button is clicked and the
   * content is copied
   */
  feedback: PropTypes__default["default"].string,

  /**
   * Specify the time it takes for the feedback message to timeout
   */
  feedbackTimeout: PropTypes__default["default"].number,

  /**
   * Specify an optional `onAnimationEnd` handler that is called when the underlying
   * animation ends
   */
  onAnimationEnd: PropTypes__default["default"].func,

  /**
   * Specify an optional `onClick` handler that is called when the underlying
   * `<button>` is clicked
   */
  onClick: PropTypes__default["default"].func
};
Copy.defaultProps = {
  feedback: 'Copied!',
  feedbackTimeout: 2000,
  onClick: function onClick() {}
};

exports["default"] = Copy;
