/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var cx = require('classnames');
var iconsReact = require('@carbon/icons-react');
var events = require('../../tools/events.js');
var deprecate = require('../../prop-types/deprecate.js');
var index = require('../FeatureFlags/index.js');
var usePrefix = require('../../internal/usePrefix.js');
var match = require('../../internal/keyboard/match.js');
var keys = require('../../internal/keyboard/keys.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var _Close;

var _excluded = ["className", "type", "id", "placeHolderText", "placeholder", "labelText", "closeButtonLabelText", "small", "size", "light", "disabled", "onChange", "onKeyDown", "renderIcon", "onClear"];

var Search = /*#__PURE__*/function (_Component) {
  _rollupPluginBabelHelpers.inherits(Search, _Component);

  var _super = _rollupPluginBabelHelpers.createSuper(Search);

  function Search() {
    var _this;

    _rollupPluginBabelHelpers.classCallCheck(this, Search);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "state", {
      hasContent: _this.props.value || _this.props.defaultValue || false,
      prevValue: _this.props.value
    });

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "clearInput", function (evt) {
      if (!_this.props.value) {
        _this.input.value = '';

        _this.props.onChange(evt);
      } else {
        var clearedEvt = Object.assign({}, evt.target, {
          target: {
            value: ''
          }
        });

        _this.props.onChange(clearedEvt);
      }

      _this.props.onClear();

      _this.setState({
        hasContent: false
      }, function () {
        return _this.input.focus();
      });
    });

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "handleChange", function (evt) {
      _this.setState({
        hasContent: evt.target.value !== ''
      });
    });

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "handleKeyDown", function (evt) {
      if (match.match(evt, keys.Escape)) {
        _this.clearInput(evt);
      }
    });

    return _this;
  }

  _rollupPluginBabelHelpers.createClass(Search, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          className = _this$props.className,
          type = _this$props.type,
          _this$props$id = _this$props.id,
          id = _this$props$id === void 0 ? this._inputId = this._inputId || "search__input__id_".concat(Math.random().toString(36).substr(2)) : _this$props$id,
          placeHolderText = _this$props.placeHolderText,
          placeholder = _this$props.placeholder,
          labelText = _this$props.labelText,
          closeButtonLabelText = _this$props.closeButtonLabelText,
          small = _this$props.small,
          _this$props$size = _this$props.size,
          size = _this$props$size === void 0 ? !small ? 'xl' : 'sm' : _this$props$size,
          light = _this$props.light,
          disabled = _this$props.disabled,
          onChange = _this$props.onChange,
          onKeyDown = _this$props.onKeyDown,
          renderIcon = _this$props.renderIcon;
          _this$props.onClear;
          var other = _rollupPluginBabelHelpers.objectWithoutProperties(_this$props, _excluded);

      var hasContent = this.state.hasContent;
      var scope = this.context;
      var enabled;

      if (scope.enabled) {
        enabled = scope.enabled('enable-v11-release');
      }

      return /*#__PURE__*/React__default["default"].createElement(usePrefix.PrefixContext.Consumer, null, function (prefix) {
        var _classNames, _classNames2;

        var searchClasses = cx__default["default"]((_classNames = {}, _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--search"), true), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--search--sm"), size === 'sm'), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--search--lg"), enabled ? size === 'md' : size === 'lg'), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--search--xl"), enabled ? size === 'lg' : size === 'xl'), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--search--light"), light), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--search--disabled"), disabled), _rollupPluginBabelHelpers.defineProperty(_classNames, className, className), _classNames));
        var clearClasses = cx__default["default"]((_classNames2 = {}, _rollupPluginBabelHelpers.defineProperty(_classNames2, "".concat(prefix, "--search-close"), true), _rollupPluginBabelHelpers.defineProperty(_classNames2, "".concat(prefix, "--search-close--hidden"), !hasContent), _classNames2));
        var customIcon;

        if (renderIcon) {
          customIcon = /*#__PURE__*/React__default["default"].cloneElement(renderIcon, {
            className: "".concat(prefix, "--search-magnifier-icon")
          });
        }

        var searchId = "".concat(id, "-search");
        var searchIcon = renderIcon ? customIcon : /*#__PURE__*/React__default["default"].createElement(iconsReact.Search, {
          className: "".concat(prefix, "--search-magnifier-icon")
        });
        return /*#__PURE__*/React__default["default"].createElement("div", {
          role: "search",
          "aria-labelledby": searchId,
          className: searchClasses
        }, /*#__PURE__*/React__default["default"].createElement("div", {
          className: "".concat(prefix, "--search-magnifier"),
          ref: function ref(magnifier) {
            _this2.magnifier = magnifier;
          }
        }, searchIcon), /*#__PURE__*/React__default["default"].createElement("label", {
          id: searchId,
          htmlFor: id,
          className: "".concat(prefix, "--label")
        }, labelText), /*#__PURE__*/React__default["default"].createElement("input", _rollupPluginBabelHelpers["extends"]({
          role: "searchbox",
          autoComplete: "off"
        }, other, {
          type: type,
          disabled: disabled,
          className: "".concat(prefix, "--search-input"),
          id: id,
          placeholder: placeHolderText || placeholder,
          onChange: events.composeEventHandlers([onChange, _this2.handleChange]),
          onKeyDown: events.composeEventHandlers([onKeyDown, _this2.handleKeyDown]),
          ref: function ref(input) {
            _this2.input = input;
          }
        })), /*#__PURE__*/React__default["default"].createElement("button", {
          className: clearClasses,
          disabled: disabled,
          onClick: _this2.clearInput,
          type: "button",
          "aria-label": closeButtonLabelText
        }, _Close || (_Close = /*#__PURE__*/React__default["default"].createElement(iconsReact.Close, null))));
      });
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(_ref, state) {
      var value = _ref.value;
      var prevValue = state.prevValue;
      return prevValue === value ? null : {
        hasContent: !!value,
        prevValue: value
      };
    }
  }]);

  return Search;
}(React.Component);

_rollupPluginBabelHelpers.defineProperty(Search, "propTypes", {
  /**
   * Specify an optional className to be applied to the container node
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify a label to be read by screen readers on the "close" button
   */
  closeButtonLabelText: PropTypes__default["default"].string,

  /**
   * Optionally provide the default value of the `<input>`
   */
  defaultValue: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),

  /**
   * Specify whether the `<input>` should be disabled
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * Specify a custom `id` for the input
   */
  id: PropTypes__default["default"].string,

  /**
   * Provide the label text for the Search icon
   */
  labelText: PropTypes__default["default"].node.isRequired,

  /**
   * Specify light version or default version of this control
   */
  light: PropTypes__default["default"].bool,

  /**
   * Optional callback called when the search value changes.
   */
  onChange: PropTypes__default["default"].func,

  /**
   * Optional callback called when the search value is cleared.
   */
  onClear: PropTypes__default["default"].func,

  /**
   * Provide a handler that is invoked on the key down event for the input
   */
  onKeyDown: PropTypes__default["default"].func,

  /**
   * Deprecated in favor of `placeholder`
   */
  placeHolderText: deprecate["default"](PropTypes__default["default"].string, "\nThe prop `placeHolderText` for Search has been deprecated in favor of `placeholder`. Please use `placeholder` instead."),

  /**
   * Provide an optional placeholder text for the Search.
   * Note: if the label and placeholder differ,
   * VoiceOver on Mac will read both
   */
  placeholder: PropTypes__default["default"].string,

  /**
   * Rendered icon for the Search.
   * Can be a React component class
   */
  renderIcon: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func, PropTypes__default["default"].object]),

  /**
   * Specify the search size
   */
  size: PropTypes__default["default"].oneOf(['sm', 'md', 'lg', 'xl']),

  /**
   * Specify whether the Search should be a small variant
   */

  /**
   * Specify whether the load was successful
   */
  small: deprecate["default"](PropTypes__default["default"].bool, "\nThe prop `small` for Search has been deprecated in favor of `size`. Please use `size=\"sm\"` instead."),

  /**
   * Optional prop to specify the type of the `<input>`
   */
  type: PropTypes__default["default"].string,

  /**
   * Specify the value of the `<input>`
   */
  value: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number])
});

_rollupPluginBabelHelpers.defineProperty(Search, "contextType", index.FeatureFlagContext);

_rollupPluginBabelHelpers.defineProperty(Search, "defaultProps", {
  type: 'text',
  placeholder: '',
  closeButtonLabelText: 'Clear search input',
  onChange: function onChange() {},
  onClear: function onClear() {}
});

exports["default"] = Search;
