/**
 * Copyright IBM Corp. 2016, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var cx = require('classnames');
var warning = require('../../internal/warning.js');
var index = require('../Text/index.js');
var index$1 = require('../FeatureFlags/index.js');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

var RadioButtonGroup = /*#__PURE__*/function (_React$Component) {
  _rollupPluginBabelHelpers.inherits(RadioButtonGroup, _React$Component);

  var _super = _rollupPluginBabelHelpers.createSuper(RadioButtonGroup);

  function RadioButtonGroup() {
    var _this;

    _rollupPluginBabelHelpers.classCallCheck(this, RadioButtonGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "state", {
      selected: typeof _this.props.valueSelected !== 'undefined' ? _this.props.valueSelected : _this.props.defaultSelected
    });

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "getRadioButtons", function () {
      var children = React__default["default"].Children.map(_this.props.children, function (radioButton) {
        var value = radioButton.props.value;
        /* istanbul ignore if */

        if (typeof radioButton.props.checked !== 'undefined') {
          process.env.NODE_ENV !== "production" ? warning.warning(false, "Instead of using the checked property on the RadioButton, set\n            the defaultSelected property or valueSelected property on the RadioButtonGroup.") : void 0;
        }

        return /*#__PURE__*/React__default["default"].cloneElement(radioButton, {
          name: _this.props.name,
          key: value,
          value: value,
          onChange: _this.handleChange,
          checked: value === _this.state.selected
        });
      });
      return children;
    });

    _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.assertThisInitialized(_this), "handleChange", function (newSelection, value, evt) {
      if (newSelection !== _this.state.selected) {
        _this.setState({
          selected: newSelection
        });

        _this.props.onChange(newSelection, _this.props.name, evt);
      }
    });

    return _this;
  }

  _rollupPluginBabelHelpers.createClass(RadioButtonGroup, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          disabled = _this$props.disabled,
          className = _this$props.className,
          hideLegend = _this$props.hideLegend,
          orientation = _this$props.orientation,
          labelPosition = _this$props.labelPosition,
          legendText = _this$props.legendText;
      var scope = this.context;
      var enabled;

      if (scope.enabled) {
        enabled = scope.enabled('enable-v11-release');
      }

      return /*#__PURE__*/React__default["default"].createElement(usePrefix.PrefixContext.Consumer, null, function (prefix) {
        var _classNames;

        var wrapperClasses = cx__default["default"]("".concat(prefix, "--radio-button-group"), [enabled ? null : className], (_classNames = {}, _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--radio-button-group--").concat(orientation), orientation === 'vertical'), _rollupPluginBabelHelpers.defineProperty(_classNames, "".concat(prefix, "--radio-button-group--label-").concat(labelPosition), labelPosition), _classNames));
        var legendClasses = cx__default["default"]("".concat(prefix, "--label"), _rollupPluginBabelHelpers.defineProperty({}, "".concat(prefix, "--visually-hidden"), hideLegend));
        return /*#__PURE__*/React__default["default"].createElement("div", {
          className: enabled ? cx__default["default"]("".concat(prefix, "--form-item"), className) : "".concat(prefix, "--form-item")
        }, /*#__PURE__*/React__default["default"].createElement("fieldset", {
          className: wrapperClasses,
          disabled: disabled
        }, legendText && /*#__PURE__*/React__default["default"].createElement(index.Legend, {
          className: legendClasses
        }, legendText), _this2.getRadioButtons()));
      });
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(_ref, state) {
      var valueSelected = _ref.valueSelected,
          defaultSelected = _ref.defaultSelected;
      var prevValueSelected = state.prevValueSelected;
      return prevValueSelected === valueSelected ? null : {
        selected: typeof valueSelected !== 'undefined' ? valueSelected : defaultSelected,
        prevValueSelected: valueSelected
      };
    }
  }]);

  return RadioButtonGroup;
}(React__default["default"].Component);

_rollupPluginBabelHelpers.defineProperty(RadioButtonGroup, "propTypes", {
  /**
   * Provide a collection of <RadioButton> components to render in the group
   */
  children: PropTypes__default["default"].node,

  /**
   * Provide an optional className to be applied to the container node
   */
  className: PropTypes__default["default"].string,

  /**
   * Specify the <RadioButton> to be selected by default
   */
  defaultSelected: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),

  /**
   * Specify whether the group is disabled
   */
  disabled: PropTypes__default["default"].bool,

  /**
   * Specify whether the legend should be hidden, or not
   */
  hideLegend: PropTypes__default["default"].bool,

  /**
   * Provide where label text should be placed
   */
  labelPosition: PropTypes__default["default"].oneOf(['left', 'right']),

  /**
   * Provide a legend to the RadioButtonGroup input that you are
   * exposing to the user
   */
  legendText: PropTypes__default["default"].node,

  /**
   * Specify the name of the underlying `<input>` nodes
   */
  name: PropTypes__default["default"].string.isRequired,

  /**
   * Provide an optional `onChange` hook that is called whenever the value of
   * the group changes
   */
  onChange: PropTypes__default["default"].func,

  /**
   * Provide where radio buttons should be placed
   */
  orientation: PropTypes__default["default"].oneOf(['horizontal', 'vertical']),

  /**
   * Specify the value that is currently selected in the group
   */
  valueSelected: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number])
});

_rollupPluginBabelHelpers.defineProperty(RadioButtonGroup, "defaultProps", {
  orientation: 'horizontal',
  labelPosition: 'right',
  hideLegend: false,
  onChange:
  /* istanbul ignore next */
  function onChange() {}
});

_rollupPluginBabelHelpers.defineProperty(RadioButtonGroup, "contextType", index$1.FeatureFlagContext);

exports["default"] = RadioButtonGroup;
