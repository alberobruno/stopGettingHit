{"version":3,"file":"dolphinConnection.esm.js","sources":["../../src/console/dolphinConnection.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\n\nimport type { Connection, ConnectionDetails, ConnectionSettings } from \"./types\";\nimport { ConnectionEvent, ConnectionStatus, Ports } from \"./types\";\n\nconst MAX_PEERS = 32;\n\nexport enum DolphinMessageType {\n  CONNECT_REPLY = \"connect_reply\",\n  GAME_EVENT = \"game_event\",\n  START_GAME = \"start_game\",\n  END_GAME = \"end_game\",\n}\n\nexport class DolphinConnection extends EventEmitter implements Connection {\n  private ipAddress: string;\n  private port: number;\n  private connectionStatus = ConnectionStatus.DISCONNECTED;\n  private gameCursor = 0;\n  private nickname = \"unknown\";\n  private version = \"\";\n  private peer: any | null = null;\n\n  public constructor() {\n    super();\n    this.ipAddress = \"0.0.0.0\";\n    this.port = Ports.DEFAULT;\n  }\n\n  /**\n   * @returns The current connection status.\n   */\n  public getStatus(): ConnectionStatus {\n    return this.connectionStatus;\n  }\n\n  /**\n   * @returns The IP address and port of the current connection.\n   */\n  public getSettings(): ConnectionSettings {\n    return {\n      ipAddress: this.ipAddress,\n      port: this.port,\n    };\n  }\n\n  public getDetails(): ConnectionDetails {\n    return {\n      consoleNick: this.nickname,\n      gameDataCursor: this.gameCursor,\n      version: this.version,\n    };\n  }\n\n  public async connect(ip: string, port: number): Promise<void> {\n    console.log(`Connecting to: ${ip}:${port}`);\n    this.ipAddress = ip;\n    this.port = port;\n\n    const enet = await import(\"enet\");\n    // Create the enet client\n    const client = enet.createClient({ peers: MAX_PEERS, channels: 3, down: 0, up: 0 }, (err) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n    });\n\n    this.peer = client.connect(\n      {\n        address: this.ipAddress,\n        port: this.port,\n      },\n      3,\n      1337, // Data to send, not sure what this is or what this represents\n      (err: any, newPeer: any) => {\n        if (err) {\n          console.error(err);\n          return;\n        }\n\n        newPeer.ping();\n        this.emit(ConnectionEvent.CONNECT);\n        this._setStatus(ConnectionStatus.CONNECTED);\n      },\n    );\n\n    this.peer.on(\"connect\", () => {\n      // Reset the game cursor to the beginning of the game. Do we need to do this or\n      // should it just continue from where it left off?\n      this.gameCursor = 0;\n\n      const request = {\n        type: \"connect_request\",\n        cursor: this.gameCursor,\n      };\n      const packet = new enet.Packet(JSON.stringify(request), enet.PACKET_FLAG.RELIABLE);\n      this.peer.send(0, packet);\n    });\n\n    this.peer.on(\"message\", (packet: any) => {\n      const data = packet.data();\n      if (data.length === 0) {\n        return;\n      }\n\n      const dataString = data.toString(\"ascii\");\n      const message = JSON.parse(dataString);\n      const { dolphin_closed } = message;\n      if (dolphin_closed) {\n        // We got a disconnection request\n        this.disconnect();\n        return;\n      }\n      this.emit(ConnectionEvent.MESSAGE, message);\n      switch (message.type) {\n        case DolphinMessageType.CONNECT_REPLY:\n          this.connectionStatus = ConnectionStatus.CONNECTED;\n          this.gameCursor = message.cursor;\n          this.nickname = message.nick;\n          this.version = message.version;\n          this.emit(ConnectionEvent.HANDSHAKE, this.getDetails());\n          break;\n        case DolphinMessageType.GAME_EVENT: {\n          const { payload } = message;\n          //TODO: remove after game start and end messages have been in stable Ishii for a bit\n          if (!payload) {\n            // We got a disconnection request\n            this.disconnect();\n            return;\n          }\n\n          this._updateCursor(message, dataString);\n\n          const gameData = Buffer.from(payload, \"base64\");\n          this._handleReplayData(gameData);\n          break;\n        }\n        case DolphinMessageType.START_GAME: {\n          this._updateCursor(message, dataString);\n          break;\n        }\n        case DolphinMessageType.END_GAME: {\n          this._updateCursor(message, dataString);\n          break;\n        }\n      }\n    });\n\n    this.peer.on(\"disconnect\", () => {\n      this.disconnect();\n    });\n\n    this._setStatus(ConnectionStatus.CONNECTING);\n  }\n\n  public disconnect(): void {\n    if (this.peer) {\n      this.peer.disconnect();\n      this.peer = null;\n    }\n    this._setStatus(ConnectionStatus.DISCONNECTED);\n  }\n\n  private _handleReplayData(data: Uint8Array): void {\n    this.emit(ConnectionEvent.DATA, data);\n  }\n\n  private _setStatus(status: ConnectionStatus): void {\n    // Don't fire the event if the status hasn't actually changed\n    if (this.connectionStatus !== status) {\n      this.connectionStatus = status;\n      this.emit(ConnectionEvent.STATUS_CHANGE, this.connectionStatus);\n    }\n  }\n\n  private _updateCursor(message: { cursor: number; next_cursor: number }, dataString: string): void {\n    const { cursor, next_cursor } = message;\n\n    if (this.gameCursor !== cursor) {\n      const err = new Error(\n        `Unexpected game data cursor. Expected: ${this.gameCursor} but got: ${cursor}. Payload: ${dataString}`,\n      );\n      console.warn(err);\n      this.emit(ConnectionEvent.ERROR, err);\n    }\n\n    this.gameCursor = next_cursor;\n  }\n}\n"],"names":["MAX_PEERS","DolphinMessageType","DolphinConnection","EventEmitter","constructor","ipAddress","port","connectionStatus","ConnectionStatus","DISCONNECTED","gameCursor","nickname","version","peer","Ports","DEFAULT","getStatus","getSettings","getDetails","consoleNick","gameDataCursor","connect","ip","console","log","enet","client","createClient","peers","channels","down","up","err","error","address","newPeer","ping","emit","ConnectionEvent","CONNECT","_setStatus","CONNECTED","on","request","type","cursor","packet","Packet","JSON","stringify","PACKET_FLAG","RELIABLE","send","data","length","dataString","toString","message","parse","dolphin_closed","disconnect","MESSAGE","CONNECT_REPLY","nick","HANDSHAKE","GAME_EVENT","payload","_updateCursor","gameData","Buffer","from","_handleReplayData","START_GAME","END_GAME","CONNECTING","DATA","status","STATUS_CHANGE","next_cursor","Error","warn","ERROR"],"mappings":"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"}