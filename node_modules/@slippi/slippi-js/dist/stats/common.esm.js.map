{"version":3,"file":"common.esm.js","sources":["../../src/stats/common.ts"],"sourcesContent":["import type { GameStartType, PostFrameUpdateType } from \"../types\";\n\nexport interface StatsType {\n  gameComplete: boolean;\n  lastFrame: number;\n  playableFrameCount: number;\n  stocks: StockType[];\n  conversions: ConversionType[];\n  combos: ComboType[];\n  actionCounts: ActionCountsType[];\n  overall: OverallType[];\n}\n\nexport interface RatioType {\n  count: number;\n  total: number;\n  ratio: number | null;\n}\n\nexport interface PlayerIndexedType {\n  playerIndex: number;\n  opponentIndex: number;\n}\n\nexport interface DurationType {\n  startFrame: number;\n  endFrame?: number | null;\n}\n\nexport interface DamageType {\n  startPercent: number;\n  currentPercent: number;\n  endPercent?: number | null;\n}\n\nexport interface StockType extends DurationType, DamageType {\n  playerIndex: number;\n  count: number;\n  deathAnimation?: number | null;\n}\n\nexport interface MoveLandedType {\n  playerIndex: number;\n  frame: number;\n  moveId: number;\n  hitCount: number;\n  damage: number;\n}\n\nexport interface ComboType extends DurationType, DamageType {\n  playerIndex: number;\n  moves: MoveLandedType[];\n  didKill: boolean;\n  lastHitBy: number | null;\n}\n\nexport interface ConversionType extends ComboType {\n  openingType: string;\n}\n\nexport interface ActionCountsType {\n  playerIndex: number;\n  wavedashCount: number;\n  wavelandCount: number;\n  airDodgeCount: number;\n  dashDanceCount: number;\n  spotDodgeCount: number;\n  ledgegrabCount: number;\n  rollCount: number;\n  lCancelCount: {\n    success: number;\n    fail: number;\n  };\n  grabCount: {\n    success: number;\n    fail: number;\n  };\n  throwCount: {\n    up: number;\n    forward: number;\n    back: number;\n    down: number;\n  };\n  groundTechCount: {\n    // tech away/in are in reference to the opponents position and not the stage\n    away: number;\n    in: number;\n    neutral: number;\n    fail: number;\n  };\n  wallTechCount: {\n    success: number;\n    fail: number;\n  };\n}\n\nexport interface InputCountsType {\n  buttons: number;\n  triggers: number;\n  joystick: number;\n  cstick: number;\n  total: number;\n}\n\nexport interface OverallType {\n  playerIndex: number;\n  inputCounts: InputCountsType;\n  conversionCount: number;\n  totalDamage: number;\n  killCount: number;\n  successfulConversions: RatioType;\n  inputsPerMinute: RatioType;\n  digitalInputsPerMinute: RatioType;\n  openingsPerKill: RatioType;\n  damagePerOpening: RatioType;\n  neutralWinRatio: RatioType;\n  counterHitRatio: RatioType;\n  beneficialTradeRatio: RatioType;\n}\n\nexport enum State {\n  // Animation ID ranges\n  DAMAGE_START = 0x4b,\n  DAMAGE_END = 0x5b,\n  CAPTURE_START = 0xdf,\n  CAPTURE_END = 0xe8,\n  GUARD_START = 0xb2,\n  GUARD_END = 0xb6,\n  GROUNDED_CONTROL_START = 0xe,\n  GROUNDED_CONTROL_END = 0x18,\n  SQUAT_START = 0x27,\n  SQUAT_END = 0x29,\n  DOWN_START = 0xb7,\n  DOWN_END = 0xc6,\n  TECH_START = 0xc7,\n  TECH_END = 0xcc,\n  DYING_START = 0x0,\n  DYING_END = 0xa,\n  CONTROLLED_JUMP_START = 0x18,\n  CONTROLLED_JUMP_END = 0x22,\n  GROUND_ATTACK_START = 0x2c,\n  GROUND_ATTACK_END = 0x40,\n  AERIAL_ATTACK_START = 0x41,\n  AERIAL_ATTACK_END = 0x4a,\n\n  // Animation ID specific\n  ROLL_FORWARD = 0xe9,\n  ROLL_BACKWARD = 0xea,\n  SPOT_DODGE = 0xeb,\n  AIR_DODGE = 0xec,\n  ACTION_WAIT = 0xe,\n  ACTION_DASH = 0x14,\n  ACTION_KNEE_BEND = 0x18,\n  GUARD_ON = 0xb2,\n  TECH_MISS_UP = 0xb7,\n  TECH_MISS_DOWN = 0xbf,\n  NEUTRAL_TECH = 0xc7,\n  FORWARD_TECH = 0xc8,\n  BACKWARD_TECH = 0xc9,\n  WALL_TECH = 0xca,\n  MISSED_WALL_TECH = 0xf7,\n  DASH = 0x14,\n  TURN = 0x12,\n  LANDING_FALL_SPECIAL = 0x2b,\n  JUMP_FORWARD = 0x19,\n  JUMP_BACKWARD = 0x1a,\n  FALL_FORWARD = 0x1e,\n  FALL_BACKWARD = 0x1f,\n  GRAB = 0xd4,\n  GRAB_WAIT = 0xd8,\n  PUMMEL = 0xd9,\n  CLIFF_CATCH = 0xfc,\n  THROW_UP = 0xdd,\n  THROW_FORWARD = 0xdb,\n  THROW_DOWN = 0xde,\n  THROW_BACK = 0xdc,\n  DAMAGE_FALL = 0x26,\n\n  // Command Grabs\n  BARREL_WAIT = 0x125,\n  COMMAND_GRAB_RANGE1_START = 0x10a,\n  COMMAND_GRAB_RANGE1_END = 0x130,\n\n  COMMAND_GRAB_RANGE2_START = 0x147,\n  COMMAND_GRAB_RANGE2_END = 0x152,\n}\n\nexport const Timers = {\n  PUNISH_RESET_FRAMES: 45,\n  RECOVERY_RESET_FRAMES: 45,\n  COMBO_STRING_RESET_FRAMES: 45,\n};\n\nexport function getSinglesPlayerPermutationsFromSettings(settings: GameStartType): PlayerIndexedType[] {\n  if (!settings || settings.players.length !== 2) {\n    // Only return opponent indices for singles\n    return [];\n  }\n\n  return [\n    {\n      playerIndex: settings.players[0]!.playerIndex,\n      opponentIndex: settings.players[1]!.playerIndex,\n    },\n    {\n      playerIndex: settings.players[1]!.playerIndex,\n      opponentIndex: settings.players[0]!.playerIndex,\n    },\n  ];\n}\n\nexport function didLoseStock(frame: PostFrameUpdateType, prevFrame: PostFrameUpdateType): boolean {\n  if (!frame || !prevFrame) {\n    return false;\n  }\n\n  return prevFrame.stocksRemaining! - frame.stocksRemaining! > 0;\n}\n\nexport function isInControl(state: number): boolean {\n  const ground = state >= State.GROUNDED_CONTROL_START && state <= State.GROUNDED_CONTROL_END;\n  const squat = state >= State.SQUAT_START && state <= State.SQUAT_END;\n  const groundAttack = state > State.GROUND_ATTACK_START && state <= State.GROUND_ATTACK_END;\n  const isGrab = state === State.GRAB;\n  // TODO: Add grounded b moves?\n  return ground || squat || groundAttack || isGrab;\n}\n\nexport function isTeching(state: number): boolean {\n  return state >= State.TECH_START && state <= State.TECH_END;\n}\n\nexport function isDown(state: number): boolean {\n  return state >= State.DOWN_START && state <= State.DOWN_END;\n}\n\nexport function isDamaged(state: number): boolean {\n  return (state >= State.DAMAGE_START && state <= State.DAMAGE_END) || state === State.DAMAGE_FALL;\n}\n\nexport function isGrabbed(state: number): boolean {\n  return state >= State.CAPTURE_START && state <= State.CAPTURE_END;\n}\n\n// TODO: Find better implementation of 3 seperate ranges\nexport function isCommandGrabbed(state: number): boolean {\n  return (\n    ((state >= State.COMMAND_GRAB_RANGE1_START && state <= State.COMMAND_GRAB_RANGE1_END) ||\n      (state >= State.COMMAND_GRAB_RANGE2_START && state <= State.COMMAND_GRAB_RANGE2_END)) &&\n    state !== State.BARREL_WAIT\n  );\n}\n\nexport function isDead(state: number): boolean {\n  return state >= State.DYING_START && state <= State.DYING_END;\n}\n\nexport function calcDamageTaken(frame: PostFrameUpdateType, prevFrame: PostFrameUpdateType): number {\n  const percent = frame.percent ?? 0;\n  const prevPercent = prevFrame.percent ?? 0;\n\n  return percent - prevPercent;\n}\n"],"names":["State","Timers","PUNISH_RESET_FRAMES","RECOVERY_RESET_FRAMES","COMBO_STRING_RESET_FRAMES","getSinglesPlayerPermutationsFromSettings","settings","players","length","playerIndex","opponentIndex","didLoseStock","frame","prevFrame","stocksRemaining","isInControl","state","ground","GROUNDED_CONTROL_START","GROUNDED_CONTROL_END","squat","SQUAT_START","SQUAT_END","groundAttack","GROUND_ATTACK_START","GROUND_ATTACK_END","isGrab","GRAB","isTeching","TECH_START","TECH_END","isDown","DOWN_START","DOWN_END","isDamaged","DAMAGE_START","DAMAGE_END","DAMAGE_FALL","isGrabbed","CAPTURE_START","CAPTURE_END","isCommandGrabbed","COMMAND_GRAB_RANGE1_START","COMMAND_GRAB_RANGE1_END","COMMAND_GRAB_RANGE2_START","COMMAND_GRAB_RANGE2_END","BARREL_WAIT","isDead","DYING_START","DYING_END","calcDamageTaken","percent","prevPercent"],"mappings":"IAwHYA;;AAAZ,WAAYA;AACV;AACAA,EAAAA,iCAAA,iBAAA;AACAA,EAAAA,+BAAA,eAAA;AACAA,EAAAA,mCAAA,kBAAA;AACAA,EAAAA,iCAAA,gBAAA;AACAA,EAAAA,iCAAA,gBAAA;AACAA,EAAAA,+BAAA,cAAA;AACAA,EAAAA,2CAAA,2BAAA;AACAA,EAAAA,yCAAA,yBAAA;AACAA,EAAAA,gCAAA,gBAAA;AACAA,EAAAA,8BAAA,cAAA;AACAA,EAAAA,gCAAA,eAAA;AACAA,EAAAA,8BAAA,aAAA;AACAA,EAAAA,gCAAA,eAAA;AACAA,EAAAA,8BAAA,aAAA;AACAA,EAAAA,+BAAA,gBAAA;AACAA,EAAAA,8BAAA,cAAA;AACAA,EAAAA,0CAAA,0BAAA;AACAA,EAAAA,wCAAA,wBAAA;AACAA,EAAAA,wCAAA,wBAAA;AACAA,EAAAA,sCAAA,sBAAA;AACAA,EAAAA,wCAAA,wBAAA;AACAA,EAAAA,sCAAA,sBAAA;;AAGAA,EAAAA,kCAAA,iBAAA;AACAA,EAAAA,mCAAA,kBAAA;AACAA,EAAAA,gCAAA,eAAA;AACAA,EAAAA,+BAAA,cAAA;AACAA,EAAAA,gCAAA,gBAAA;AACAA,EAAAA,gCAAA,gBAAA;AACAA,EAAAA,qCAAA,qBAAA;AACAA,EAAAA,8BAAA,aAAA;AACAA,EAAAA,kCAAA,iBAAA;AACAA,EAAAA,oCAAA,mBAAA;AACAA,EAAAA,kCAAA,iBAAA;AACAA,EAAAA,kCAAA,iBAAA;AACAA,EAAAA,mCAAA,kBAAA;AACAA,EAAAA,+BAAA,cAAA;AACAA,EAAAA,sCAAA,qBAAA;AACAA,EAAAA,yBAAA,SAAA;AACAA,EAAAA,yBAAA,SAAA;AACAA,EAAAA,yCAAA,yBAAA;AACAA,EAAAA,iCAAA,iBAAA;AACAA,EAAAA,kCAAA,kBAAA;AACAA,EAAAA,iCAAA,iBAAA;AACAA,EAAAA,kCAAA,kBAAA;AACAA,EAAAA,0BAAA,SAAA;AACAA,EAAAA,+BAAA,cAAA;AACAA,EAAAA,4BAAA,WAAA;AACAA,EAAAA,iCAAA,gBAAA;AACAA,EAAAA,8BAAA,aAAA;AACAA,EAAAA,mCAAA,kBAAA;AACAA,EAAAA,gCAAA,eAAA;AACAA,EAAAA,gCAAA,eAAA;AACAA,EAAAA,gCAAA,gBAAA;;AAGAA,EAAAA,iCAAA,gBAAA;AACAA,EAAAA,+CAAA,8BAAA;AACAA,EAAAA,6CAAA,4BAAA;AAEAA,EAAAA,+CAAA,8BAAA;AACAA,EAAAA,6CAAA,4BAAA;AACD,CAjED,EAAYA,KAAK,KAALA,KAAK,KAAA,CAAjB;;MAmEaC,MAAM,GAAG;AACpBC,EAAAA,mBAAmB,EAAE,EADD;AAEpBC,EAAAA,qBAAqB,EAAE,EAFH;AAGpBC,EAAAA,yBAAyB,EAAE;AAHP;SAMNC,yCAAyCC;AACvD,MAAI,CAACA,QAAD,IAAaA,QAAQ,CAACC,OAAT,CAAiBC,MAAjB,KAA4B,CAA7C,EAAgD;AAC9C;AACA,WAAO,EAAP;AACD;;AAED,SAAO,CACL;AACEC,IAAAA,WAAW,EAAEH,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAqBE,WADpC;AAEEC,IAAAA,aAAa,EAAEJ,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAqBE;AAFtC,GADK,EAKL;AACEA,IAAAA,WAAW,EAAEH,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAqBE,WADpC;AAEEC,IAAAA,aAAa,EAAEJ,QAAQ,CAACC,OAAT,CAAiB,CAAjB,EAAqBE;AAFtC,GALK,CAAP;AAUD;SAEeE,aAAaC,OAA4BC;AACvD,MAAI,CAACD,KAAD,IAAU,CAACC,SAAf,EAA0B;AACxB,WAAO,KAAP;AACD;;AAED,SAAOA,SAAS,CAACC,eAAV,GAA6BF,KAAK,CAACE,eAAnC,GAAsD,CAA7D;AACD;SAEeC,YAAYC;AAC1B,QAAMC,MAAM,GAAGD,KAAK,IAAIhB,KAAK,CAACkB,sBAAf,IAAyCF,KAAK,IAAIhB,KAAK,CAACmB,oBAAvE;AACA,QAAMC,KAAK,GAAGJ,KAAK,IAAIhB,KAAK,CAACqB,WAAf,IAA8BL,KAAK,IAAIhB,KAAK,CAACsB,SAA3D;AACA,QAAMC,YAAY,GAAGP,KAAK,GAAGhB,KAAK,CAACwB,mBAAd,IAAqCR,KAAK,IAAIhB,KAAK,CAACyB,iBAAzE;AACA,QAAMC,MAAM,GAAGV,KAAK,KAAKhB,KAAK,CAAC2B,IAA/B;;AAEA,SAAOV,MAAM,IAAIG,KAAV,IAAmBG,YAAnB,IAAmCG,MAA1C;AACD;SAEeE,UAAUZ;AACxB,SAAOA,KAAK,IAAIhB,KAAK,CAAC6B,UAAf,IAA6Bb,KAAK,IAAIhB,KAAK,CAAC8B,QAAnD;AACD;SAEeC,OAAOf;AACrB,SAAOA,KAAK,IAAIhB,KAAK,CAACgC,UAAf,IAA6BhB,KAAK,IAAIhB,KAAK,CAACiC,QAAnD;AACD;SAEeC,UAAUlB;AACxB,SAAQA,KAAK,IAAIhB,KAAK,CAACmC,YAAf,IAA+BnB,KAAK,IAAIhB,KAAK,CAACoC,UAA/C,IAA8DpB,KAAK,KAAKhB,KAAK,CAACqC,WAArF;AACD;SAEeC,UAAUtB;AACxB,SAAOA,KAAK,IAAIhB,KAAK,CAACuC,aAAf,IAAgCvB,KAAK,IAAIhB,KAAK,CAACwC,WAAtD;AACD;;SAGeC,iBAAiBzB;AAC/B,SACE,CAAEA,KAAK,IAAIhB,KAAK,CAAC0C,yBAAf,IAA4C1B,KAAK,IAAIhB,KAAK,CAAC2C,uBAA5D,IACE3B,KAAK,IAAIhB,KAAK,CAAC4C,yBAAf,IAA4C5B,KAAK,IAAIhB,KAAK,CAAC6C,uBAD9D,KAEA7B,KAAK,KAAKhB,KAAK,CAAC8C,WAHlB;AAKD;SAEeC,OAAO/B;AACrB,SAAOA,KAAK,IAAIhB,KAAK,CAACgD,WAAf,IAA8BhC,KAAK,IAAIhB,KAAK,CAACiD,SAApD;AACD;SAEeC,gBAAgBtC,OAA4BC;;;AAC1D,QAAMsC,OAAO,qBAAGvC,KAAK,CAACuC,OAAT,6BAAoB,CAAjC;AACA,QAAMC,WAAW,yBAAGvC,SAAS,CAACsC,OAAb,iCAAwB,CAAzC;AAEA,SAAOA,OAAO,GAAGC,WAAjB;AACD;;;;"}