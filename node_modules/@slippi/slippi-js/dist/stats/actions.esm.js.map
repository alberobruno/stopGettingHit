{"version":3,"file":"actions.esm.js","sources":["../../src/stats/actions.ts"],"sourcesContent":["import { get, isEqual, keyBy, last, set, size } from \"lodash\";\n\nimport type { FrameEntryType, GameStartType } from \"../types\";\nimport type { ActionCountsType, PlayerIndexedType } from \"./common\";\nimport { getSinglesPlayerPermutationsFromSettings, State } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\n// Frame pattern that indicates a dash dance turn was executed\nconst dashDanceAnimations = [State.DASH, State.TURN, State.DASH];\n\ninterface PlayerActionState {\n  playerCounts: ActionCountsType;\n  animations: number[];\n}\n\nexport class ActionsComputer implements StatComputer<ActionCountsType[]> {\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private state = new Map<PlayerIndexedType, PlayerActionState>();\n\n  public setup(settings: GameStartType): void {\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.playerPermutations.forEach((indices) => {\n      const playerCounts: ActionCountsType = {\n        playerIndex: indices.playerIndex,\n        wavedashCount: 0,\n        wavelandCount: 0,\n        airDodgeCount: 0,\n        dashDanceCount: 0,\n        spotDodgeCount: 0,\n        ledgegrabCount: 0,\n        rollCount: 0,\n        lCancelCount: {\n          success: 0,\n          fail: 0,\n        },\n        grabCount: {\n          success: 0,\n          fail: 0,\n        },\n        throwCount: {\n          up: 0,\n          forward: 0,\n          back: 0,\n          down: 0,\n        },\n        groundTechCount: {\n          // tech away/in are in reference to the opponents position and not the stage\n          away: 0,\n          in: 0,\n          neutral: 0,\n          fail: 0,\n        },\n        wallTechCount: {\n          success: 0,\n          fail: 0,\n        },\n      };\n      const playerState: PlayerActionState = {\n        playerCounts: playerCounts,\n        animations: [],\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleActionCompute(state, indices, frame);\n      }\n    });\n  }\n\n  public fetch(): ActionCountsType[] {\n    return Array.from(this.state.values()).map((val) => val.playerCounts);\n  }\n}\n\nfunction didMissGroundTech(animation: State): boolean {\n  return animation === State.TECH_MISS_DOWN || animation === State.TECH_MISS_UP;\n}\n\nfunction isRolling(animation: State): boolean {\n  return animation === State.ROLL_BACKWARD || animation === State.ROLL_FORWARD;\n}\n\nfunction didStartRoll(currentAnimation: number, previousAnimation: number): boolean {\n  const isCurrentlyRolling = isRolling(currentAnimation);\n  const wasPreviouslyRolling = isRolling(previousAnimation);\n\n  return isCurrentlyRolling && !wasPreviouslyRolling;\n}\n\nfunction isSpotDodging(animation: State): boolean {\n  return animation === State.SPOT_DODGE;\n}\n\nfunction didStartGrabSuccess(currentAnimation: State, previousAnimation: State): boolean {\n  return previousAnimation === State.GRAB && currentAnimation <= State.GRAB_WAIT && currentAnimation > State.GRAB;\n}\nfunction didStartGrabFail(currentAnimation: State, previousAnimation: State): boolean {\n  return previousAnimation === State.GRAB && (currentAnimation > State.GRAB_WAIT || currentAnimation < State.GRAB);\n}\n\nfunction didStartSpotDodge(currentAnimation: State, previousAnimation: State): boolean {\n  const isCurrentlyDodging = isSpotDodging(currentAnimation);\n  const wasPreviouslyDodging = isSpotDodging(previousAnimation);\n\n  return isCurrentlyDodging && !wasPreviouslyDodging;\n}\n\nfunction isAirDodging(animation: State): boolean {\n  return animation === State.AIR_DODGE;\n}\n\nfunction didStartAirDodge(currentAnimation: State, previousAnimation: State): boolean {\n  const isCurrentlyDodging = isAirDodging(currentAnimation);\n  const wasPreviouslyDodging = isAirDodging(previousAnimation);\n\n  return isCurrentlyDodging && !wasPreviouslyDodging;\n}\n\nfunction isGrabbingLedge(animation: State): boolean {\n  return animation === State.CLIFF_CATCH;\n}\n\nfunction isAerialAttack(animation: State): boolean {\n  return animation >= State.AERIAL_ATTACK_START && animation <= State.AERIAL_ATTACK_END;\n}\n\nfunction didStartLedgegrab(currentAnimation: State, previousAnimation: State): boolean {\n  const isCurrentlyGrabbingLedge = isGrabbingLedge(currentAnimation);\n  const wasPreviouslyGrabbingLedge = isGrabbingLedge(previousAnimation);\n\n  return isCurrentlyGrabbingLedge && !wasPreviouslyGrabbingLedge;\n}\n\nfunction handleActionCompute(state: PlayerActionState, indices: PlayerIndexedType, frame: FrameEntryType): void {\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const opponentFrame = frame.players[indices.opponentIndex]!.post;\n  const incrementCount = (field: string, condition: boolean): void => {\n    if (!condition) {\n      return;\n    }\n\n    const current: number = get(state.playerCounts, field, 0);\n    set(state.playerCounts, field, current + 1);\n  };\n\n  // Manage animation state\n  const currentAnimation = playerFrame.actionStateId!;\n  state.animations.push(currentAnimation);\n\n  // Grab last 3 frames\n  const last3Frames = state.animations.slice(-3);\n  const prevAnimation = last3Frames[last3Frames.length - 2] as number;\n  const newAnimation = currentAnimation !== prevAnimation;\n\n  // Increment counts based on conditions\n  const didDashDance = isEqual(last3Frames, dashDanceAnimations);\n  incrementCount(\"dashDanceCount\", didDashDance);\n\n  const didRoll = didStartRoll(currentAnimation, prevAnimation);\n  incrementCount(\"rollCount\", didRoll);\n\n  const didSpotDodge = didStartSpotDodge(currentAnimation, prevAnimation);\n  incrementCount(\"spotDodgeCount\", didSpotDodge);\n\n  const didAirDodge = didStartAirDodge(currentAnimation, prevAnimation);\n  incrementCount(\"airDodgeCount\", didAirDodge);\n\n  const didGrabLedge = didStartLedgegrab(currentAnimation, prevAnimation);\n  incrementCount(\"ledgegrabCount\", didGrabLedge);\n\n  const didGrabSucceed = didStartGrabSuccess(currentAnimation, prevAnimation);\n  incrementCount(\"grabCount.success\", didGrabSucceed);\n  const didGrabFail = didStartGrabFail(currentAnimation, prevAnimation);\n  incrementCount(\"grabCount.fail\", didGrabFail);\n\n  incrementCount(\"throwCount.up\", currentAnimation === State.THROW_UP && newAnimation);\n  incrementCount(\"throwCount.forward\", currentAnimation === State.THROW_FORWARD && newAnimation);\n  incrementCount(\"throwCount.down\", currentAnimation === State.THROW_DOWN && newAnimation);\n  incrementCount(\"throwCount.back\", currentAnimation === State.THROW_BACK && newAnimation);\n\n  if (newAnimation) {\n    const didMissTech = didMissGroundTech(currentAnimation);\n    incrementCount(\"groundTechCount.fail\", didMissTech);\n    let opponentDir = 1;\n    let facingOpponent = false;\n\n    if (playerFrame.positionX! > opponentFrame.positionX!) {\n      opponentDir = -1;\n    }\n    if (playerFrame.facingDirection == opponentDir) {\n      facingOpponent = true;\n    }\n\n    incrementCount(\"groundTechCount.in\", currentAnimation === State.FORWARD_TECH && facingOpponent);\n    incrementCount(\"groundTechCount.in\", currentAnimation === State.BACKWARD_TECH && !facingOpponent);\n    incrementCount(\"groundTechCount.neutral\", currentAnimation === State.NEUTRAL_TECH);\n    incrementCount(\"groundTechCount.away\", currentAnimation === State.BACKWARD_TECH && facingOpponent);\n    incrementCount(\"groundTechCount.away\", currentAnimation === State.FORWARD_TECH && !facingOpponent);\n\n    incrementCount(\"wallTechCount.success\", currentAnimation === State.WALL_TECH);\n    incrementCount(\"wallTechCount.fail\", currentAnimation === State.MISSED_WALL_TECH);\n  }\n\n  if (isAerialAttack(currentAnimation)) {\n    incrementCount(\"lCancelCount.success\", playerFrame.lCancelStatus === 1);\n    incrementCount(\"lCancelCount.fail\", playerFrame.lCancelStatus === 2);\n  }\n\n  // Handles wavedash detection (and waveland)\n  handleActionWavedash(state.playerCounts, state.animations);\n}\n\nfunction handleActionWavedash(counts: ActionCountsType, animations: State[]): void {\n  const currentAnimation = last(animations);\n  const prevAnimation = animations[animations.length - 2] as number;\n\n  const isSpecialLanding = currentAnimation === State.LANDING_FALL_SPECIAL;\n  const isAcceptablePrevious = isWavedashInitiationAnimation(prevAnimation);\n  const isPossibleWavedash = isSpecialLanding && isAcceptablePrevious;\n\n  if (!isPossibleWavedash) {\n    return;\n  }\n\n  // Here we special landed, it might be a wavedash, let's check\n  // We grab the last 8 frames here because that should be enough time to execute a\n  // wavedash. This number could be tweaked if we find false negatives\n  const recentFrames = animations.slice(-8);\n  const recentAnimations = keyBy(recentFrames, (animation) => animation);\n\n  if (size(recentAnimations) === 2 && recentAnimations[State.AIR_DODGE]) {\n    // If the only other animation is air dodge, this might be really late to the point\n    // where it was actually an air dodge. Air dodge animation is really long\n    return;\n  }\n\n  if (recentAnimations[State.AIR_DODGE]) {\n    // If one of the recent animations was an air dodge, let's remove that from the\n    // air dodge counter, we don't want to count air dodges used to wavedash/land\n    counts.airDodgeCount -= 1;\n  }\n\n  if (recentAnimations[State.ACTION_KNEE_BEND]) {\n    // If a jump was started recently, we will consider this a wavedash\n    counts.wavedashCount += 1;\n  } else {\n    // If there was no jump recently, this is a waveland\n    counts.wavelandCount += 1;\n  }\n}\n\nfunction isWavedashInitiationAnimation(animation: State): boolean {\n  if (animation === State.AIR_DODGE) {\n    return true;\n  }\n\n  const isAboveMin = animation >= State.CONTROLLED_JUMP_START;\n  const isBelowMax = animation <= State.CONTROLLED_JUMP_END;\n  return isAboveMin && isBelowMax;\n}\n"],"names":["dashDanceAnimations","State","DASH","TURN","ActionsComputer","playerPermutations","Array","state","Map","setup","settings","getSinglesPlayerPermutationsFromSettings","forEach","indices","playerCounts","playerIndex","wavedashCount","wavelandCount","airDodgeCount","dashDanceCount","spotDodgeCount","ledgegrabCount","rollCount","lCancelCount","success","fail","grabCount","throwCount","up","forward","back","down","groundTechCount","away","in","neutral","wallTechCount","playerState","animations","set","processFrame","frame","get","handleActionCompute","fetch","from","values","map","val","didMissGroundTech","animation","TECH_MISS_DOWN","TECH_MISS_UP","isRolling","ROLL_BACKWARD","ROLL_FORWARD","didStartRoll","currentAnimation","previousAnimation","isCurrentlyRolling","wasPreviouslyRolling","isSpotDodging","SPOT_DODGE","didStartGrabSuccess","GRAB","GRAB_WAIT","didStartGrabFail","didStartSpotDodge","isCurrentlyDodging","wasPreviouslyDodging","isAirDodging","AIR_DODGE","didStartAirDodge","isGrabbingLedge","CLIFF_CATCH","isAerialAttack","AERIAL_ATTACK_START","AERIAL_ATTACK_END","didStartLedgegrab","isCurrentlyGrabbingLedge","wasPreviouslyGrabbingLedge","playerFrame","players","post","opponentFrame","opponentIndex","incrementCount","field","condition","current","actionStateId","push","last3Frames","slice","prevAnimation","length","newAnimation","didDashDance","isEqual","didRoll","didSpotDodge","didAirDodge","didGrabLedge","didGrabSucceed","didGrabFail","THROW_UP","THROW_FORWARD","THROW_DOWN","THROW_BACK","didMissTech","opponentDir","facingOpponent","positionX","facingDirection","FORWARD_TECH","BACKWARD_TECH","NEUTRAL_TECH","WALL_TECH","MISSED_WALL_TECH","lCancelStatus","handleActionWavedash","counts","last","isSpecialLanding","LANDING_FALL_SPECIAL","isAcceptablePrevious","isWavedashInitiationAnimation","isPossibleWavedash","recentFrames","recentAnimations","keyBy","size","ACTION_KNEE_BEND","isAboveMin","CONTROLLED_JUMP_START","isBelowMax","CONTROLLED_JUMP_END"],"mappings":"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"}