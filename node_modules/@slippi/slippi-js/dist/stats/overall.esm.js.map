{"version":3,"file":"overall.esm.js","sources":["../../src/stats/overall.ts"],"sourcesContent":["import { first, flatten, get, groupBy, keyBy, last, mapValues, zip } from \"lodash\";\n\nimport type { GameStartType } from \"../types\";\nimport type { ConversionType, InputCountsType, OverallType, RatioType } from \"./common\";\nimport type { PlayerInput } from \"./inputs\";\n\ninterface ConversionsByPlayerByOpening {\n  [playerIndex: string]: {\n    [openingType: string]: ConversionType[];\n  };\n}\n\nexport function generateOverallStats({\n  settings,\n  inputs,\n  conversions,\n  playableFrameCount,\n}: {\n  settings: GameStartType;\n  inputs: PlayerInput[];\n  conversions: ConversionType[];\n  playableFrameCount: number;\n}): OverallType[] {\n  const inputsByPlayer = keyBy(inputs, \"playerIndex\");\n  const originalConversions = conversions;\n  const conversionsByPlayer = groupBy(conversions, (conv) => conv.moves[0]?.playerIndex);\n  const conversionsByPlayerByOpening: ConversionsByPlayerByOpening = mapValues(conversionsByPlayer, (conversions) =>\n    groupBy(conversions, \"openingType\"),\n  );\n\n  const gameMinutes = playableFrameCount / 3600;\n\n  const overall = settings.players.map((player) => {\n    const playerIndex = player.playerIndex;\n\n    const playerInputs = get(inputsByPlayer, playerIndex) || {};\n    const inputCounts: InputCountsType = {\n      buttons: get(playerInputs, \"buttonInputCount\"),\n      triggers: get(playerInputs, \"triggerInputCount\"),\n      cstick: get(playerInputs, \"cstickInputCount\"),\n      joystick: get(playerInputs, \"joystickInputCount\"),\n      total: get(playerInputs, \"inputCount\"),\n    };\n    // const conversions = get(conversionsByPlayer, playerIndex) || [];\n    // const successfulConversions = conversions.filter((conversion) => conversion.moves.length > 1);\n    let conversionCount = 0;\n    let successfulConversionCount = 0;\n\n    const opponentIndices = settings.players\n      .filter((opp) => {\n        // We want players which aren't ourselves\n        if (opp.playerIndex === playerIndex) {\n          return false;\n        }\n\n        // Make sure they're not on our team either\n        return !settings.isTeams || opp.teamId !== player.teamId;\n      })\n      .map((opp) => opp.playerIndex);\n\n    let totalDamage = 0;\n    let killCount = 0;\n\n    // These are the conversions that we did on our opponents\n    originalConversions\n      // Filter down to conversions of our opponent\n      .filter((conversion) => conversion.playerIndex !== playerIndex)\n      .forEach((conversion) => {\n        conversionCount++;\n\n        // We killed the opponent\n        if (conversion.didKill && conversion.lastHitBy === playerIndex) {\n          killCount += 1;\n        }\n        if (conversion.moves.length > 1 && conversion.moves[0]!.playerIndex === playerIndex) {\n          successfulConversionCount++;\n        }\n        conversion.moves.forEach((move) => {\n          if (move.playerIndex === playerIndex) {\n            totalDamage += move.damage;\n          }\n        });\n      });\n\n    return {\n      playerIndex: playerIndex,\n      inputCounts: inputCounts,\n      conversionCount: conversionCount,\n      totalDamage: totalDamage,\n      killCount: killCount,\n\n      successfulConversions: getRatio(successfulConversionCount, conversionCount),\n      inputsPerMinute: getRatio(inputCounts.total, gameMinutes),\n      digitalInputsPerMinute: getRatio(inputCounts.buttons, gameMinutes),\n      openingsPerKill: getRatio(conversionCount, killCount),\n      damagePerOpening: getRatio(totalDamage, conversionCount),\n      neutralWinRatio: getOpeningRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices, \"neutral-win\"),\n      counterHitRatio: getOpeningRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices, \"counter-attack\"),\n      beneficialTradeRatio: getBeneficialTradeRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices),\n    };\n  });\n\n  return overall;\n}\n\nfunction getRatio(count: number, total: number): RatioType {\n  return {\n    count: count,\n    total: total,\n    ratio: total ? count / total : null,\n  };\n}\n\nfunction getOpeningRatio(\n  conversionsByPlayerByOpening: ConversionsByPlayerByOpening,\n  playerIndex: number,\n  opponentIndices: number[],\n  type: string,\n): RatioType {\n  const openings = get(conversionsByPlayerByOpening, [playerIndex, type]) || [];\n\n  const opponentOpenings = flatten(\n    opponentIndices.map((opponentIndex) => get(conversionsByPlayerByOpening, [opponentIndex, type]) || []),\n  );\n\n  return getRatio(openings.length, openings.length + opponentOpenings.length);\n}\n\nfunction getBeneficialTradeRatio(\n  conversionsByPlayerByOpening: ConversionsByPlayerByOpening,\n  playerIndex: number,\n  opponentIndices: number[],\n): RatioType {\n  const playerTrades = get(conversionsByPlayerByOpening, [playerIndex, \"trade\"]) || [];\n  const opponentTrades = flatten(\n    opponentIndices.map((opponentIndex) => get(conversionsByPlayerByOpening, [opponentIndex, \"trade\"]) || []),\n  );\n\n  const benefitsPlayer = [];\n\n  // Figure out which punishes benefited this player\n  const zippedTrades = zip(playerTrades, opponentTrades);\n  zippedTrades.forEach((conversionPair) => {\n    const playerConversion = first(conversionPair);\n    const opponentConversion = last(conversionPair);\n    if (playerConversion && opponentConversion) {\n      const playerDamage = playerConversion.currentPercent - playerConversion.startPercent;\n      const opponentDamage = opponentConversion.currentPercent - opponentConversion.startPercent;\n\n      if (playerConversion!.didKill && !opponentConversion!.didKill) {\n        benefitsPlayer.push(playerConversion);\n      } else if (playerDamage > opponentDamage) {\n        benefitsPlayer.push(playerConversion);\n      }\n    }\n  });\n\n  return getRatio(benefitsPlayer.length, playerTrades.length);\n}\n"],"names":["generateOverallStats","settings","inputs","conversions","playableFrameCount","inputsByPlayer","keyBy","originalConversions","conversionsByPlayer","groupBy","conv","moves","playerIndex","conversionsByPlayerByOpening","mapValues","gameMinutes","overall","players","map","player","playerInputs","get","inputCounts","buttons","triggers","cstick","joystick","total","conversionCount","successfulConversionCount","opponentIndices","filter","opp","isTeams","teamId","totalDamage","killCount","conversion","forEach","didKill","lastHitBy","length","move","damage","successfulConversions","getRatio","inputsPerMinute","digitalInputsPerMinute","openingsPerKill","damagePerOpening","neutralWinRatio","getOpeningRatio","counterHitRatio","beneficialTradeRatio","getBeneficialTradeRatio","count","ratio","type","openings","opponentOpenings","flatten","opponentIndex","playerTrades","opponentTrades","benefitsPlayer","zippedTrades","zip","conversionPair","playerConversion","first","opponentConversion","last","playerDamage","currentPercent","startPercent","opponentDamage","push"],"mappings":";;SAYgBA,qBAAqB;AACnCC,EAAAA,QADmC;AAEnCC,EAAAA,MAFmC;AAGnCC,EAAAA,WAHmC;AAInCC,EAAAA;AAJmC;AAWnC,QAAMC,cAAc,GAAGC,KAAK,CAACJ,MAAD,EAAS,aAAT,CAA5B;AACA,QAAMK,mBAAmB,GAAGJ,WAA5B;AACA,QAAMK,mBAAmB,GAAGC,OAAO,CAACN,WAAD,EAAeO,IAAD;AAAA;;AAAA,2BAAUA,IAAI,CAACC,KAAL,CAAW,CAAX,CAAV,qBAAU,aAAeC,WAAzB;AAAA,GAAd,CAAnC;AACA,QAAMC,4BAA4B,GAAiCC,SAAS,CAACN,mBAAD,EAAuBL,WAAD,IAChGM,OAAO,CAACN,WAAD,EAAc,aAAd,CADmE,CAA5E;AAIA,QAAMY,WAAW,GAAGX,kBAAkB,GAAG,IAAzC;AAEA,QAAMY,OAAO,GAAGf,QAAQ,CAACgB,OAAT,CAAiBC,GAAjB,CAAsBC,MAAD;AACnC,UAAMP,WAAW,GAAGO,MAAM,CAACP,WAA3B;AAEA,UAAMQ,YAAY,GAAGC,GAAG,CAAChB,cAAD,EAAiBO,WAAjB,CAAH,IAAoC,EAAzD;AACA,UAAMU,WAAW,GAAoB;AACnCC,MAAAA,OAAO,EAAEF,GAAG,CAACD,YAAD,EAAe,kBAAf,CADuB;AAEnCI,MAAAA,QAAQ,EAAEH,GAAG,CAACD,YAAD,EAAe,mBAAf,CAFsB;AAGnCK,MAAAA,MAAM,EAAEJ,GAAG,CAACD,YAAD,EAAe,kBAAf,CAHwB;AAInCM,MAAAA,QAAQ,EAAEL,GAAG,CAACD,YAAD,EAAe,oBAAf,CAJsB;AAKnCO,MAAAA,KAAK,EAAEN,GAAG,CAACD,YAAD,EAAe,YAAf;AALyB,KAArC;AAQA;;AACA,QAAIQ,eAAe,GAAG,CAAtB;AACA,QAAIC,yBAAyB,GAAG,CAAhC;AAEA,UAAMC,eAAe,GAAG7B,QAAQ,CAACgB,OAAT,CACrBc,MADqB,CACbC,GAAD;AACN;AACA,UAAIA,GAAG,CAACpB,WAAJ,KAAoBA,WAAxB,EAAqC;AACnC,eAAO,KAAP;AACD;;;AAGD,aAAO,CAACX,QAAQ,CAACgC,OAAV,IAAqBD,GAAG,CAACE,MAAJ,KAAef,MAAM,CAACe,MAAlD;AACD,KATqB,EAUrBhB,GAVqB,CAUhBc,GAAD,IAASA,GAAG,CAACpB,WAVI,CAAxB;AAYA,QAAIuB,WAAW,GAAG,CAAlB;AACA,QAAIC,SAAS,GAAG,CAAhB;;AAGA7B,IAAAA,mBAAmB;AAAA,KAEhBwB,MAFH,CAEWM,UAAD,IAAgBA,UAAU,CAACzB,WAAX,KAA2BA,WAFrD,EAGG0B,OAHH,CAGYD,UAAD;AACPT,MAAAA,eAAe;;AAGf,UAAIS,UAAU,CAACE,OAAX,IAAsBF,UAAU,CAACG,SAAX,KAAyB5B,WAAnD,EAAgE;AAC9DwB,QAAAA,SAAS,IAAI,CAAb;AACD;;AACD,UAAIC,UAAU,CAAC1B,KAAX,CAAiB8B,MAAjB,GAA0B,CAA1B,IAA+BJ,UAAU,CAAC1B,KAAX,CAAiB,CAAjB,EAAqBC,WAArB,KAAqCA,WAAxE,EAAqF;AACnFiB,QAAAA,yBAAyB;AAC1B;;AACDQ,MAAAA,UAAU,CAAC1B,KAAX,CAAiB2B,OAAjB,CAA0BI,IAAD;AACvB,YAAIA,IAAI,CAAC9B,WAAL,KAAqBA,WAAzB,EAAsC;AACpCuB,UAAAA,WAAW,IAAIO,IAAI,CAACC,MAApB;AACD;AACF,OAJD;AAKD,KAlBH;AAoBA,WAAO;AACL/B,MAAAA,WAAW,EAAEA,WADR;AAELU,MAAAA,WAAW,EAAEA,WAFR;AAGLM,MAAAA,eAAe,EAAEA,eAHZ;AAILO,MAAAA,WAAW,EAAEA,WAJR;AAKLC,MAAAA,SAAS,EAAEA,SALN;AAOLQ,MAAAA,qBAAqB,EAAEC,QAAQ,CAAChB,yBAAD,EAA4BD,eAA5B,CAP1B;AAQLkB,MAAAA,eAAe,EAAED,QAAQ,CAACvB,WAAW,CAACK,KAAb,EAAoBZ,WAApB,CARpB;AASLgC,MAAAA,sBAAsB,EAAEF,QAAQ,CAACvB,WAAW,CAACC,OAAb,EAAsBR,WAAtB,CAT3B;AAULiC,MAAAA,eAAe,EAAEH,QAAQ,CAACjB,eAAD,EAAkBQ,SAAlB,CAVpB;AAWLa,MAAAA,gBAAgB,EAAEJ,QAAQ,CAACV,WAAD,EAAcP,eAAd,CAXrB;AAYLsB,MAAAA,eAAe,EAAEC,eAAe,CAACtC,4BAAD,EAA+BD,WAA/B,EAA4CkB,eAA5C,EAA6D,aAA7D,CAZ3B;AAaLsB,MAAAA,eAAe,EAAED,eAAe,CAACtC,4BAAD,EAA+BD,WAA/B,EAA4CkB,eAA5C,EAA6D,gBAA7D,CAb3B;AAcLuB,MAAAA,oBAAoB,EAAEC,uBAAuB,CAACzC,4BAAD,EAA+BD,WAA/B,EAA4CkB,eAA5C;AAdxC,KAAP;AAgBD,GApEe,CAAhB;AAsEA,SAAOd,OAAP;AACD;;AAED,SAAS6B,QAAT,CAAkBU,KAAlB,EAAiC5B,KAAjC;AACE,SAAO;AACL4B,IAAAA,KAAK,EAAEA,KADF;AAEL5B,IAAAA,KAAK,EAAEA,KAFF;AAGL6B,IAAAA,KAAK,EAAE7B,KAAK,GAAG4B,KAAK,GAAG5B,KAAX,GAAmB;AAH1B,GAAP;AAKD;;AAED,SAASwB,eAAT,CACEtC,4BADF,EAEED,WAFF,EAGEkB,eAHF,EAIE2B,IAJF;AAME,QAAMC,QAAQ,GAAGrC,GAAG,CAACR,4BAAD,EAA+B,CAACD,WAAD,EAAc6C,IAAd,CAA/B,CAAH,IAA0D,EAA3E;AAEA,QAAME,gBAAgB,GAAGC,OAAO,CAC9B9B,eAAe,CAACZ,GAAhB,CAAqB2C,aAAD,IAAmBxC,GAAG,CAACR,4BAAD,EAA+B,CAACgD,aAAD,EAAgBJ,IAAhB,CAA/B,CAAH,IAA4D,EAAnG,CAD8B,CAAhC;AAIA,SAAOZ,QAAQ,CAACa,QAAQ,CAACjB,MAAV,EAAkBiB,QAAQ,CAACjB,MAAT,GAAkBkB,gBAAgB,CAAClB,MAArD,CAAf;AACD;;AAED,SAASa,uBAAT,CACEzC,4BADF,EAEED,WAFF,EAGEkB,eAHF;AAKE,QAAMgC,YAAY,GAAGzC,GAAG,CAACR,4BAAD,EAA+B,CAACD,WAAD,EAAc,OAAd,CAA/B,CAAH,IAA6D,EAAlF;AACA,QAAMmD,cAAc,GAAGH,OAAO,CAC5B9B,eAAe,CAACZ,GAAhB,CAAqB2C,aAAD,IAAmBxC,GAAG,CAACR,4BAAD,EAA+B,CAACgD,aAAD,EAAgB,OAAhB,CAA/B,CAAH,IAA+D,EAAtG,CAD4B,CAA9B;AAIA,QAAMG,cAAc,GAAG,EAAvB;;AAGA,QAAMC,YAAY,GAAGC,GAAG,CAACJ,YAAD,EAAeC,cAAf,CAAxB;AACAE,EAAAA,YAAY,CAAC3B,OAAb,CAAsB6B,cAAD;AACnB,UAAMC,gBAAgB,GAAGC,KAAK,CAACF,cAAD,CAA9B;AACA,UAAMG,kBAAkB,GAAGC,IAAI,CAACJ,cAAD,CAA/B;;AACA,QAAIC,gBAAgB,IAAIE,kBAAxB,EAA4C;AAC1C,YAAME,YAAY,GAAGJ,gBAAgB,CAACK,cAAjB,GAAkCL,gBAAgB,CAACM,YAAxE;AACA,YAAMC,cAAc,GAAGL,kBAAkB,CAACG,cAAnB,GAAoCH,kBAAkB,CAACI,YAA9E;;AAEA,UAAIN,gBAAiB,CAAC7B,OAAlB,IAA6B,CAAC+B,kBAAmB,CAAC/B,OAAtD,EAA+D;AAC7DyB,QAAAA,cAAc,CAACY,IAAf,CAAoBR,gBAApB;AACD,OAFD,MAEO,IAAII,YAAY,GAAGG,cAAnB,EAAmC;AACxCX,QAAAA,cAAc,CAACY,IAAf,CAAoBR,gBAApB;AACD;AACF;AACF,GAbD;AAeA,SAAOvB,QAAQ,CAACmB,cAAc,CAACvB,MAAhB,EAAwBqB,YAAY,CAACrB,MAArC,CAAf;AACD;;;;"}