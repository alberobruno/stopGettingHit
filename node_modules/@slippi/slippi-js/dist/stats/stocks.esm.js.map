{"version":3,"file":"stocks.esm.js","sources":["../../src/stats/stocks.ts"],"sourcesContent":["import type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport type { PlayerIndexedType, StockType } from \"./common\";\nimport { didLoseStock, getSinglesPlayerPermutationsFromSettings, isDead } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\ninterface StockState {\n  stock?: StockType | null;\n}\n\nexport class StockComputer implements StatComputer<StockType[]> {\n  private state = new Map<PlayerIndexedType, StockState>();\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private stocks = new Array<StockType>();\n\n  public setup(settings: GameStartType): void {\n    // Reset state\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.stocks = [];\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: StockState = {\n        stock: null,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleStockCompute(allFrames, state, indices, frame, this.stocks);\n      }\n    });\n  }\n\n  public fetch(): StockType[] {\n    return this.stocks;\n  }\n}\n\nfunction handleStockCompute(\n  frames: FramesType,\n  state: StockState,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n  stocks: StockType[],\n): void {\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const currentFrameNumber = playerFrame.frame!;\n  const prevFrameNumber = currentFrameNumber - 1;\n  const prevPlayerFrame = frames[prevFrameNumber] ? frames[prevFrameNumber]!.players[indices.playerIndex]!.post : null;\n\n  // If there is currently no active stock, wait until the player is no longer spawning.\n  // Once the player is no longer spawning, start the stock\n  if (!state.stock) {\n    const isPlayerDead = isDead(playerFrame.actionStateId!);\n    if (isPlayerDead) {\n      return;\n    }\n\n    state.stock = {\n      playerIndex: indices.playerIndex,\n      startFrame: currentFrameNumber,\n      endFrame: null,\n      startPercent: 0,\n      endPercent: null,\n      currentPercent: 0,\n      count: playerFrame.stocksRemaining!,\n      deathAnimation: null,\n    };\n\n    stocks.push(state.stock);\n  } else if (prevPlayerFrame && didLoseStock(playerFrame, prevPlayerFrame)) {\n    state.stock.endFrame = playerFrame.frame;\n    state.stock.endPercent = prevPlayerFrame.percent ?? 0;\n    state.stock.deathAnimation = playerFrame.actionStateId;\n    state.stock = null;\n  } else {\n    state.stock.currentPercent = playerFrame.percent ?? 0;\n  }\n}\n"],"names":["StockComputer","state","Map","playerPermutations","Array","stocks","setup","settings","getSinglesPlayerPermutationsFromSettings","forEach","indices","playerState","stock","set","processFrame","frame","allFrames","get","handleStockCompute","fetch","frames","playerFrame","players","playerIndex","post","currentFrameNumber","prevFrameNumber","prevPlayerFrame","isPlayerDead","isDead","actionStateId","startFrame","endFrame","startPercent","endPercent","currentPercent","count","stocksRemaining","deathAnimation","push","didLoseStock","percent"],"mappings":";;MASaA;;SACHC,QAAQ,IAAIC,GAAJ;SACRC,qBAAqB,IAAIC,KAAJ;SACrBC,SAAS,IAAID,KAAJ;;;AAEVE,EAAAA,KAAK,CAACC,QAAD;AACV;AACA,SAAKN,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA,SAAKC,kBAAL,GAA0BK,wCAAwC,CAACD,QAAD,CAAlE;AACA,SAAKF,MAAL,GAAc,EAAd;AAEA,SAAKF,kBAAL,CAAwBM,OAAxB,CAAiCC,OAAD;AAC9B,YAAMC,WAAW,GAAe;AAC9BC,QAAAA,KAAK,EAAE;AADuB,OAAhC;AAGA,WAAKX,KAAL,CAAWY,GAAX,CAAeH,OAAf,EAAwBC,WAAxB;AACD,KALD;AAMD;;AAEMG,EAAAA,YAAY,CAACC,KAAD,EAAwBC,SAAxB;AACjB,SAAKb,kBAAL,CAAwBM,OAAxB,CAAiCC,OAAD;AAC9B,YAAMT,KAAK,GAAG,KAAKA,KAAL,CAAWgB,GAAX,CAAeP,OAAf,CAAd;;AACA,UAAIT,KAAJ,EAAW;AACTiB,QAAAA,kBAAkB,CAACF,SAAD,EAAYf,KAAZ,EAAmBS,OAAnB,EAA4BK,KAA5B,EAAmC,KAAKV,MAAxC,CAAlB;AACD;AACF,KALD;AAMD;;AAEMc,EAAAA,KAAK;AACV,WAAO,KAAKd,MAAZ;AACD;;;;AAGH,SAASa,kBAAT,CACEE,MADF,EAEEnB,KAFF,EAGES,OAHF,EAIEK,KAJF,EAKEV,MALF;AAOE,QAAMgB,WAAW,GAAGN,KAAK,CAACO,OAAN,CAAcZ,OAAO,CAACa,WAAtB,EAAoCC,IAAxD;AACA,QAAMC,kBAAkB,GAAGJ,WAAW,CAACN,KAAvC;AACA,QAAMW,eAAe,GAAGD,kBAAkB,GAAG,CAA7C;AACA,QAAME,eAAe,GAAGP,MAAM,CAACM,eAAD,CAAN,GAA0BN,MAAM,CAACM,eAAD,CAAN,CAAyBJ,OAAzB,CAAiCZ,OAAO,CAACa,WAAzC,EAAuDC,IAAjF,GAAwF,IAAhH;AAGA;;AACA,MAAI,CAACvB,KAAK,CAACW,KAAX,EAAkB;AAChB,UAAMgB,YAAY,GAAGC,MAAM,CAACR,WAAW,CAACS,aAAb,CAA3B;;AACA,QAAIF,YAAJ,EAAkB;AAChB;AACD;;AAED3B,IAAAA,KAAK,CAACW,KAAN,GAAc;AACZW,MAAAA,WAAW,EAAEb,OAAO,CAACa,WADT;AAEZQ,MAAAA,UAAU,EAAEN,kBAFA;AAGZO,MAAAA,QAAQ,EAAE,IAHE;AAIZC,MAAAA,YAAY,EAAE,CAJF;AAKZC,MAAAA,UAAU,EAAE,IALA;AAMZC,MAAAA,cAAc,EAAE,CANJ;AAOZC,MAAAA,KAAK,EAAEf,WAAW,CAACgB,eAPP;AAQZC,MAAAA,cAAc,EAAE;AARJ,KAAd;AAWAjC,IAAAA,MAAM,CAACkC,IAAP,CAAYtC,KAAK,CAACW,KAAlB;AACD,GAlBD,MAkBO,IAAIe,eAAe,IAAIa,YAAY,CAACnB,WAAD,EAAcM,eAAd,CAAnC,EAAmE;AAAA;;AACxE1B,IAAAA,KAAK,CAACW,KAAN,CAAYoB,QAAZ,GAAuBX,WAAW,CAACN,KAAnC;AACAd,IAAAA,KAAK,CAACW,KAAN,CAAYsB,UAAZ,4BAAyBP,eAAe,CAACc,OAAzC,oCAAoD,CAApD;AACAxC,IAAAA,KAAK,CAACW,KAAN,CAAY0B,cAAZ,GAA6BjB,WAAW,CAACS,aAAzC;AACA7B,IAAAA,KAAK,CAACW,KAAN,GAAc,IAAd;AACD,GALM,MAKA;AAAA;;AACLX,IAAAA,KAAK,CAACW,KAAN,CAAYuB,cAAZ,2BAA6Bd,WAAW,CAACoB,OAAzC,mCAAoD,CAApD;AACD;AACF;;;;"}