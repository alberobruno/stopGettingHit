{"version":3,"file":"slippi-js.cjs.development.js","sources":["../src/melee/animationUtils.ts","../src/melee/characterUtils.ts","../src/melee/moveUtils.ts","../src/melee/stageUtils.ts","../src/melee/types.ts","../src/stats/common.ts","../src/stats/actions.ts","../src/stats/combos.ts","../src/stats/conversions.ts","../src/types.ts","../src/stats/inputs.ts","../src/stats/overall.ts","../src/stats/stats.ts","../src/stats/stocks.ts","../src/console/communication.ts","../src/console/types.ts","../src/console/consoleConnection.ts","../src/console/dolphinConnection.ts","../src/utils/fullwidth.ts","../src/utils/slpReader.ts","../src/utils/slpStream.ts","../src/utils/slpFile.ts","../src/utils/slpFileWriter.ts","../src/utils/rollbackCounter.ts","../src/utils/slpParser.ts","../src/SlippiGame.ts"],"sourcesContent":["// eslint-disable-next-line\nexport function getDeathDirection(actionStateId: number) {\n  if (actionStateId > 0xa) {\n    return null;\n  }\n\n  switch (actionStateId) {\n    case 0:\n      return \"down\";\n    case 1:\n      return \"left\";\n    case 2:\n      return \"right\";\n    default:\n      return \"up\";\n  }\n}\n","import characters from \"./characters.json\";\n\nexport type CharacterColor = string;\nconst DEFAULT_COLOR: CharacterColor = \"Default\";\n\nexport interface CharacterInfo {\n  id: number;\n  name: string;\n  shortName: string;\n  colors: CharacterColor[];\n}\n\nexport const UnknownCharacter: CharacterInfo = {\n  id: -1,\n  name: \"Unknown Character\",\n  shortName: \"Unknown\",\n  colors: [DEFAULT_COLOR],\n};\n\ntype CharacterId = keyof typeof characters;\n\nfunction generateCharacterInfo(\n  id: number,\n  info?: {\n    name: string;\n    shortName?: string;\n    colors?: CharacterColor[];\n  },\n): CharacterInfo {\n  if (!info) {\n    return UnknownCharacter;\n  }\n\n  return {\n    id,\n    name: info.name,\n    shortName: info.shortName ?? info.name,\n    colors: [DEFAULT_COLOR, ...(info.colors ?? [])],\n  };\n}\n\nexport function getAllCharacters(): CharacterInfo[] {\n  return Object.entries(characters)\n    .map(([id, data]) => generateCharacterInfo(parseInt(id, 10), data))\n    .sort((a, b) => a.id - b.id);\n}\n\nexport function getCharacterInfo(externalCharacterId: number): CharacterInfo {\n  const data = characters[externalCharacterId.toString() as CharacterId];\n  return generateCharacterInfo(externalCharacterId, data);\n}\n\nexport function getCharacterShortName(externalCharacterId: number): string {\n  const character = getCharacterInfo(externalCharacterId);\n  return character.shortName;\n}\n\nexport function getCharacterName(externalCharacterId: number): string {\n  const character = getCharacterInfo(externalCharacterId);\n  return character.name;\n}\n\n// Return a human-readable color from a characterCode.\nexport function getCharacterColorName(externalCharacterId: number, characterColor: number): CharacterColor {\n  const character = getCharacterInfo(externalCharacterId);\n  const color = character.colors[characterColor];\n  if (color) {\n    return color;\n  }\n  return DEFAULT_COLOR;\n}\n","import moveNames from \"./moves.json\";\n\nexport interface Move {\n  id: number;\n  name: string;\n  shortName: string;\n}\n\nexport const UnknownMove: Move = {\n  id: -1,\n  name: \"Unknown Move\",\n  shortName: \"unknown\",\n};\n\ntype MoveId = keyof typeof moveNames;\n\nexport function getMoveInfo(moveId: number): Move {\n  const moveName = moveNames[moveId.toString() as MoveId];\n  if (!moveName) {\n    return UnknownMove;\n  }\n  return {\n    id: moveId,\n    name: moveName.name,\n    shortName: moveName.shortName,\n  };\n}\n\nexport function getMoveShortName(moveId: number): string {\n  const move = getMoveInfo(moveId);\n  return move.shortName;\n}\n\nexport function getMoveName(moveId: number): string {\n  const move = getMoveInfo(moveId);\n  return move.name;\n}\n","import stageNames from \"./stages.json\";\n\nexport interface StageInfo {\n  id: number;\n  name: string;\n}\n\nexport const UnknownStage: StageInfo = {\n  id: -1,\n  name: \"Unknown Stage\",\n};\n\ntype StageId = keyof typeof stageNames;\n\nexport function getStageInfo(stageId: number): StageInfo {\n  const stageName = stageNames[stageId.toString() as StageId];\n  if (!stageName) {\n    return UnknownStage;\n  }\n  return {\n    id: stageId,\n    name: stageName,\n  };\n}\n\nexport function getStageName(stageId: number): string {\n  const stage = getStageInfo(stageId);\n  return stage.name;\n}\n","export enum Character {\n  CAPTAIN_FALCON = 0,\n  DONKEY_KONG = 1,\n  FOX = 2,\n  GAME_AND_WATCH = 3,\n  KIRBY = 4,\n  BOWSER = 5,\n  LINK = 6,\n  LUIGI = 7,\n  MARIO = 8,\n  MARTH = 9,\n  MEWTWO = 10,\n  NESS = 11,\n  PEACH = 12,\n  PIKACHU = 13,\n  ICE_CLIMBERS = 14,\n  JIGGLYPUFF = 15,\n  SAMUS = 16,\n  YOSHI = 17,\n  ZELDA = 18,\n  SHEIK = 19,\n  FALCO = 20,\n  YOUNG_LINK = 21,\n  DR_MARIO = 22,\n  ROY = 23,\n  PICHU = 24,\n  GANONDORF = 25,\n  MASTER_HAND = 26,\n  WIREFRAME_MALE = 27,\n  WIREFRAME_FEMALE = 28,\n  GIGA_BOWSER = 29,\n  CRAZY_HAND = 30,\n  SANDBAG = 31,\n  POPO = 32,\n}\n\nexport enum Stage {\n  FOUNTAIN_OF_DREAMS = 2,\n  POKEMON_STADIUM = 3,\n  PEACHS_CASTLE = 4,\n  KONGO_JUNGLE = 5,\n  BRINSTAR = 6,\n  CORNERIA = 7,\n  YOSHIS_STORY = 8,\n  ONETT = 9,\n  MUTE_CITY = 10,\n  RAINBOW_CRUISE = 11,\n  JUNGLE_JAPES = 12,\n  GREAT_BAY = 13,\n  HYRULE_TEMPLE = 14,\n  BRINSTAR_DEPTHS = 15,\n  YOSHIS_ISLAND = 16,\n  GREEN_GREENS = 17,\n  FOURSIDE = 18,\n  MUSHROOM_KINGDOM = 19,\n  MUSHROOM_KINGDOM_2 = 20,\n  VENOM = 22,\n  POKE_FLOATS = 23,\n  BIG_BLUE = 24,\n  ICICLE_MOUNTAIN = 25,\n  ICETOP = 26,\n  FLAT_ZONE = 27,\n  DREAMLAND = 28,\n  YOSHIS_ISLAND_N64 = 29,\n  KONGO_JUNGLE_N64 = 30,\n  BATTLEFIELD = 31,\n  FINAL_DESTINATION = 32,\n  TARGET_TEST_MARIO = 33,\n  TARGET_TEST_CAPTAIN_FALCON = 34,\n  TARGET_TEST_YOUNG_LINK = 35,\n  TARGET_TEST_DONKEY_KONG = 36,\n  TARGET_TEST_DR_MARIO = 37,\n  TARGET_TEST_FALCO = 38,\n  TARGET_TEST_FOX = 39,\n  TARGET_TEST_ICE_CLIMBERS = 40,\n  TARGET_TEST_KIRBY = 41,\n  TARGET_TEST_BOWSER = 42,\n  TARGET_TEST_LINK = 43,\n  TARGET_TEST_LUIGI = 44,\n  TARGET_TEST_MARTH = 45,\n  TARGET_TEST_MEWTWO = 46,\n  TARGET_TEST_NESS = 47,\n  TARGET_TEST_PEACH = 48,\n  TARGET_TEST_PICHU = 49,\n  TARGET_TEST_PIKACHU = 50,\n  TARGET_TEST_JIGGLYPUFF = 51,\n  TARGET_TEST_SAMUS = 52,\n  TARGET_TEST_SHEIK = 53,\n  TARGET_TEST_YOSHI = 54,\n  TARGET_TEST_ZELDA = 55,\n  TARGET_TEST_GAME_AND_WATCH = 56,\n  TARGET_TEST_ROY = 57,\n  TARGET_TEST_GANONDORF = 58,\n  HOME_RUN_CONTEST = 84,\n}\n","import type { GameStartType, PostFrameUpdateType } from \"../types\";\n\nexport interface StatsType {\n  gameComplete: boolean;\n  lastFrame: number;\n  playableFrameCount: number;\n  stocks: StockType[];\n  conversions: ConversionType[];\n  combos: ComboType[];\n  actionCounts: ActionCountsType[];\n  overall: OverallType[];\n}\n\nexport interface RatioType {\n  count: number;\n  total: number;\n  ratio: number | null;\n}\n\nexport interface PlayerIndexedType {\n  playerIndex: number;\n  opponentIndex: number;\n}\n\nexport interface DurationType {\n  startFrame: number;\n  endFrame?: number | null;\n}\n\nexport interface DamageType {\n  startPercent: number;\n  currentPercent: number;\n  endPercent?: number | null;\n}\n\nexport interface StockType extends DurationType, DamageType {\n  playerIndex: number;\n  count: number;\n  deathAnimation?: number | null;\n}\n\nexport interface MoveLandedType {\n  playerIndex: number;\n  frame: number;\n  moveId: number;\n  hitCount: number;\n  damage: number;\n}\n\nexport interface ComboType extends DurationType, DamageType {\n  playerIndex: number;\n  moves: MoveLandedType[];\n  didKill: boolean;\n  lastHitBy: number | null;\n}\n\nexport interface ConversionType extends ComboType {\n  openingType: string;\n}\n\nexport interface ActionCountsType {\n  playerIndex: number;\n  wavedashCount: number;\n  wavelandCount: number;\n  airDodgeCount: number;\n  dashDanceCount: number;\n  spotDodgeCount: number;\n  ledgegrabCount: number;\n  rollCount: number;\n  lCancelCount: {\n    success: number;\n    fail: number;\n  };\n  grabCount: {\n    success: number;\n    fail: number;\n  };\n  throwCount: {\n    up: number;\n    forward: number;\n    back: number;\n    down: number;\n  };\n  groundTechCount: {\n    // tech away/in are in reference to the opponents position and not the stage\n    away: number;\n    in: number;\n    neutral: number;\n    fail: number;\n  };\n  wallTechCount: {\n    success: number;\n    fail: number;\n  };\n}\n\nexport interface InputCountsType {\n  buttons: number;\n  triggers: number;\n  joystick: number;\n  cstick: number;\n  total: number;\n}\n\nexport interface OverallType {\n  playerIndex: number;\n  inputCounts: InputCountsType;\n  conversionCount: number;\n  totalDamage: number;\n  killCount: number;\n  successfulConversions: RatioType;\n  inputsPerMinute: RatioType;\n  digitalInputsPerMinute: RatioType;\n  openingsPerKill: RatioType;\n  damagePerOpening: RatioType;\n  neutralWinRatio: RatioType;\n  counterHitRatio: RatioType;\n  beneficialTradeRatio: RatioType;\n}\n\nexport enum State {\n  // Animation ID ranges\n  DAMAGE_START = 0x4b,\n  DAMAGE_END = 0x5b,\n  CAPTURE_START = 0xdf,\n  CAPTURE_END = 0xe8,\n  GUARD_START = 0xb2,\n  GUARD_END = 0xb6,\n  GROUNDED_CONTROL_START = 0xe,\n  GROUNDED_CONTROL_END = 0x18,\n  SQUAT_START = 0x27,\n  SQUAT_END = 0x29,\n  DOWN_START = 0xb7,\n  DOWN_END = 0xc6,\n  TECH_START = 0xc7,\n  TECH_END = 0xcc,\n  DYING_START = 0x0,\n  DYING_END = 0xa,\n  CONTROLLED_JUMP_START = 0x18,\n  CONTROLLED_JUMP_END = 0x22,\n  GROUND_ATTACK_START = 0x2c,\n  GROUND_ATTACK_END = 0x40,\n  AERIAL_ATTACK_START = 0x41,\n  AERIAL_ATTACK_END = 0x4a,\n\n  // Animation ID specific\n  ROLL_FORWARD = 0xe9,\n  ROLL_BACKWARD = 0xea,\n  SPOT_DODGE = 0xeb,\n  AIR_DODGE = 0xec,\n  ACTION_WAIT = 0xe,\n  ACTION_DASH = 0x14,\n  ACTION_KNEE_BEND = 0x18,\n  GUARD_ON = 0xb2,\n  TECH_MISS_UP = 0xb7,\n  TECH_MISS_DOWN = 0xbf,\n  NEUTRAL_TECH = 0xc7,\n  FORWARD_TECH = 0xc8,\n  BACKWARD_TECH = 0xc9,\n  WALL_TECH = 0xca,\n  MISSED_WALL_TECH = 0xf7,\n  DASH = 0x14,\n  TURN = 0x12,\n  LANDING_FALL_SPECIAL = 0x2b,\n  JUMP_FORWARD = 0x19,\n  JUMP_BACKWARD = 0x1a,\n  FALL_FORWARD = 0x1e,\n  FALL_BACKWARD = 0x1f,\n  GRAB = 0xd4,\n  GRAB_WAIT = 0xd8,\n  PUMMEL = 0xd9,\n  CLIFF_CATCH = 0xfc,\n  THROW_UP = 0xdd,\n  THROW_FORWARD = 0xdb,\n  THROW_DOWN = 0xde,\n  THROW_BACK = 0xdc,\n  DAMAGE_FALL = 0x26,\n\n  // Command Grabs\n  BARREL_WAIT = 0x125,\n  COMMAND_GRAB_RANGE1_START = 0x10a,\n  COMMAND_GRAB_RANGE1_END = 0x130,\n\n  COMMAND_GRAB_RANGE2_START = 0x147,\n  COMMAND_GRAB_RANGE2_END = 0x152,\n}\n\nexport const Timers = {\n  PUNISH_RESET_FRAMES: 45,\n  RECOVERY_RESET_FRAMES: 45,\n  COMBO_STRING_RESET_FRAMES: 45,\n};\n\nexport function getSinglesPlayerPermutationsFromSettings(settings: GameStartType): PlayerIndexedType[] {\n  if (!settings || settings.players.length !== 2) {\n    // Only return opponent indices for singles\n    return [];\n  }\n\n  return [\n    {\n      playerIndex: settings.players[0]!.playerIndex,\n      opponentIndex: settings.players[1]!.playerIndex,\n    },\n    {\n      playerIndex: settings.players[1]!.playerIndex,\n      opponentIndex: settings.players[0]!.playerIndex,\n    },\n  ];\n}\n\nexport function didLoseStock(frame: PostFrameUpdateType, prevFrame: PostFrameUpdateType): boolean {\n  if (!frame || !prevFrame) {\n    return false;\n  }\n\n  return prevFrame.stocksRemaining! - frame.stocksRemaining! > 0;\n}\n\nexport function isInControl(state: number): boolean {\n  const ground = state >= State.GROUNDED_CONTROL_START && state <= State.GROUNDED_CONTROL_END;\n  const squat = state >= State.SQUAT_START && state <= State.SQUAT_END;\n  const groundAttack = state > State.GROUND_ATTACK_START && state <= State.GROUND_ATTACK_END;\n  const isGrab = state === State.GRAB;\n  // TODO: Add grounded b moves?\n  return ground || squat || groundAttack || isGrab;\n}\n\nexport function isTeching(state: number): boolean {\n  return state >= State.TECH_START && state <= State.TECH_END;\n}\n\nexport function isDown(state: number): boolean {\n  return state >= State.DOWN_START && state <= State.DOWN_END;\n}\n\nexport function isDamaged(state: number): boolean {\n  return (state >= State.DAMAGE_START && state <= State.DAMAGE_END) || state === State.DAMAGE_FALL;\n}\n\nexport function isGrabbed(state: number): boolean {\n  return state >= State.CAPTURE_START && state <= State.CAPTURE_END;\n}\n\n// TODO: Find better implementation of 3 seperate ranges\nexport function isCommandGrabbed(state: number): boolean {\n  return (\n    ((state >= State.COMMAND_GRAB_RANGE1_START && state <= State.COMMAND_GRAB_RANGE1_END) ||\n      (state >= State.COMMAND_GRAB_RANGE2_START && state <= State.COMMAND_GRAB_RANGE2_END)) &&\n    state !== State.BARREL_WAIT\n  );\n}\n\nexport function isDead(state: number): boolean {\n  return state >= State.DYING_START && state <= State.DYING_END;\n}\n\nexport function calcDamageTaken(frame: PostFrameUpdateType, prevFrame: PostFrameUpdateType): number {\n  const percent = frame.percent ?? 0;\n  const prevPercent = prevFrame.percent ?? 0;\n\n  return percent - prevPercent;\n}\n","import { get, isEqual, keyBy, last, set, size } from \"lodash\";\n\nimport type { FrameEntryType, GameStartType } from \"../types\";\nimport type { ActionCountsType, PlayerIndexedType } from \"./common\";\nimport { getSinglesPlayerPermutationsFromSettings, State } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\n// Frame pattern that indicates a dash dance turn was executed\nconst dashDanceAnimations = [State.DASH, State.TURN, State.DASH];\n\ninterface PlayerActionState {\n  playerCounts: ActionCountsType;\n  animations: number[];\n}\n\nexport class ActionsComputer implements StatComputer<ActionCountsType[]> {\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private state = new Map<PlayerIndexedType, PlayerActionState>();\n\n  public setup(settings: GameStartType): void {\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.playerPermutations.forEach((indices) => {\n      const playerCounts: ActionCountsType = {\n        playerIndex: indices.playerIndex,\n        wavedashCount: 0,\n        wavelandCount: 0,\n        airDodgeCount: 0,\n        dashDanceCount: 0,\n        spotDodgeCount: 0,\n        ledgegrabCount: 0,\n        rollCount: 0,\n        lCancelCount: {\n          success: 0,\n          fail: 0,\n        },\n        grabCount: {\n          success: 0,\n          fail: 0,\n        },\n        throwCount: {\n          up: 0,\n          forward: 0,\n          back: 0,\n          down: 0,\n        },\n        groundTechCount: {\n          // tech away/in are in reference to the opponents position and not the stage\n          away: 0,\n          in: 0,\n          neutral: 0,\n          fail: 0,\n        },\n        wallTechCount: {\n          success: 0,\n          fail: 0,\n        },\n      };\n      const playerState: PlayerActionState = {\n        playerCounts: playerCounts,\n        animations: [],\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleActionCompute(state, indices, frame);\n      }\n    });\n  }\n\n  public fetch(): ActionCountsType[] {\n    return Array.from(this.state.values()).map((val) => val.playerCounts);\n  }\n}\n\nfunction didMissGroundTech(animation: State): boolean {\n  return animation === State.TECH_MISS_DOWN || animation === State.TECH_MISS_UP;\n}\n\nfunction isRolling(animation: State): boolean {\n  return animation === State.ROLL_BACKWARD || animation === State.ROLL_FORWARD;\n}\n\nfunction didStartRoll(currentAnimation: number, previousAnimation: number): boolean {\n  const isCurrentlyRolling = isRolling(currentAnimation);\n  const wasPreviouslyRolling = isRolling(previousAnimation);\n\n  return isCurrentlyRolling && !wasPreviouslyRolling;\n}\n\nfunction isSpotDodging(animation: State): boolean {\n  return animation === State.SPOT_DODGE;\n}\n\nfunction didStartGrabSuccess(currentAnimation: State, previousAnimation: State): boolean {\n  return previousAnimation === State.GRAB && currentAnimation <= State.GRAB_WAIT && currentAnimation > State.GRAB;\n}\nfunction didStartGrabFail(currentAnimation: State, previousAnimation: State): boolean {\n  return previousAnimation === State.GRAB && (currentAnimation > State.GRAB_WAIT || currentAnimation < State.GRAB);\n}\n\nfunction didStartSpotDodge(currentAnimation: State, previousAnimation: State): boolean {\n  const isCurrentlyDodging = isSpotDodging(currentAnimation);\n  const wasPreviouslyDodging = isSpotDodging(previousAnimation);\n\n  return isCurrentlyDodging && !wasPreviouslyDodging;\n}\n\nfunction isAirDodging(animation: State): boolean {\n  return animation === State.AIR_DODGE;\n}\n\nfunction didStartAirDodge(currentAnimation: State, previousAnimation: State): boolean {\n  const isCurrentlyDodging = isAirDodging(currentAnimation);\n  const wasPreviouslyDodging = isAirDodging(previousAnimation);\n\n  return isCurrentlyDodging && !wasPreviouslyDodging;\n}\n\nfunction isGrabbingLedge(animation: State): boolean {\n  return animation === State.CLIFF_CATCH;\n}\n\nfunction isAerialAttack(animation: State): boolean {\n  return animation >= State.AERIAL_ATTACK_START && animation <= State.AERIAL_ATTACK_END;\n}\n\nfunction didStartLedgegrab(currentAnimation: State, previousAnimation: State): boolean {\n  const isCurrentlyGrabbingLedge = isGrabbingLedge(currentAnimation);\n  const wasPreviouslyGrabbingLedge = isGrabbingLedge(previousAnimation);\n\n  return isCurrentlyGrabbingLedge && !wasPreviouslyGrabbingLedge;\n}\n\nfunction handleActionCompute(state: PlayerActionState, indices: PlayerIndexedType, frame: FrameEntryType): void {\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const opponentFrame = frame.players[indices.opponentIndex]!.post;\n  const incrementCount = (field: string, condition: boolean): void => {\n    if (!condition) {\n      return;\n    }\n\n    const current: number = get(state.playerCounts, field, 0);\n    set(state.playerCounts, field, current + 1);\n  };\n\n  // Manage animation state\n  const currentAnimation = playerFrame.actionStateId!;\n  state.animations.push(currentAnimation);\n\n  // Grab last 3 frames\n  const last3Frames = state.animations.slice(-3);\n  const prevAnimation = last3Frames[last3Frames.length - 2] as number;\n  const newAnimation = currentAnimation !== prevAnimation;\n\n  // Increment counts based on conditions\n  const didDashDance = isEqual(last3Frames, dashDanceAnimations);\n  incrementCount(\"dashDanceCount\", didDashDance);\n\n  const didRoll = didStartRoll(currentAnimation, prevAnimation);\n  incrementCount(\"rollCount\", didRoll);\n\n  const didSpotDodge = didStartSpotDodge(currentAnimation, prevAnimation);\n  incrementCount(\"spotDodgeCount\", didSpotDodge);\n\n  const didAirDodge = didStartAirDodge(currentAnimation, prevAnimation);\n  incrementCount(\"airDodgeCount\", didAirDodge);\n\n  const didGrabLedge = didStartLedgegrab(currentAnimation, prevAnimation);\n  incrementCount(\"ledgegrabCount\", didGrabLedge);\n\n  const didGrabSucceed = didStartGrabSuccess(currentAnimation, prevAnimation);\n  incrementCount(\"grabCount.success\", didGrabSucceed);\n  const didGrabFail = didStartGrabFail(currentAnimation, prevAnimation);\n  incrementCount(\"grabCount.fail\", didGrabFail);\n\n  incrementCount(\"throwCount.up\", currentAnimation === State.THROW_UP && newAnimation);\n  incrementCount(\"throwCount.forward\", currentAnimation === State.THROW_FORWARD && newAnimation);\n  incrementCount(\"throwCount.down\", currentAnimation === State.THROW_DOWN && newAnimation);\n  incrementCount(\"throwCount.back\", currentAnimation === State.THROW_BACK && newAnimation);\n\n  if (newAnimation) {\n    const didMissTech = didMissGroundTech(currentAnimation);\n    incrementCount(\"groundTechCount.fail\", didMissTech);\n    let opponentDir = 1;\n    let facingOpponent = false;\n\n    if (playerFrame.positionX! > opponentFrame.positionX!) {\n      opponentDir = -1;\n    }\n    if (playerFrame.facingDirection == opponentDir) {\n      facingOpponent = true;\n    }\n\n    incrementCount(\"groundTechCount.in\", currentAnimation === State.FORWARD_TECH && facingOpponent);\n    incrementCount(\"groundTechCount.in\", currentAnimation === State.BACKWARD_TECH && !facingOpponent);\n    incrementCount(\"groundTechCount.neutral\", currentAnimation === State.NEUTRAL_TECH);\n    incrementCount(\"groundTechCount.away\", currentAnimation === State.BACKWARD_TECH && facingOpponent);\n    incrementCount(\"groundTechCount.away\", currentAnimation === State.FORWARD_TECH && !facingOpponent);\n\n    incrementCount(\"wallTechCount.success\", currentAnimation === State.WALL_TECH);\n    incrementCount(\"wallTechCount.fail\", currentAnimation === State.MISSED_WALL_TECH);\n  }\n\n  if (isAerialAttack(currentAnimation)) {\n    incrementCount(\"lCancelCount.success\", playerFrame.lCancelStatus === 1);\n    incrementCount(\"lCancelCount.fail\", playerFrame.lCancelStatus === 2);\n  }\n\n  // Handles wavedash detection (and waveland)\n  handleActionWavedash(state.playerCounts, state.animations);\n}\n\nfunction handleActionWavedash(counts: ActionCountsType, animations: State[]): void {\n  const currentAnimation = last(animations);\n  const prevAnimation = animations[animations.length - 2] as number;\n\n  const isSpecialLanding = currentAnimation === State.LANDING_FALL_SPECIAL;\n  const isAcceptablePrevious = isWavedashInitiationAnimation(prevAnimation);\n  const isPossibleWavedash = isSpecialLanding && isAcceptablePrevious;\n\n  if (!isPossibleWavedash) {\n    return;\n  }\n\n  // Here we special landed, it might be a wavedash, let's check\n  // We grab the last 8 frames here because that should be enough time to execute a\n  // wavedash. This number could be tweaked if we find false negatives\n  const recentFrames = animations.slice(-8);\n  const recentAnimations = keyBy(recentFrames, (animation) => animation);\n\n  if (size(recentAnimations) === 2 && recentAnimations[State.AIR_DODGE]) {\n    // If the only other animation is air dodge, this might be really late to the point\n    // where it was actually an air dodge. Air dodge animation is really long\n    return;\n  }\n\n  if (recentAnimations[State.AIR_DODGE]) {\n    // If one of the recent animations was an air dodge, let's remove that from the\n    // air dodge counter, we don't want to count air dodges used to wavedash/land\n    counts.airDodgeCount -= 1;\n  }\n\n  if (recentAnimations[State.ACTION_KNEE_BEND]) {\n    // If a jump was started recently, we will consider this a wavedash\n    counts.wavedashCount += 1;\n  } else {\n    // If there was no jump recently, this is a waveland\n    counts.wavelandCount += 1;\n  }\n}\n\nfunction isWavedashInitiationAnimation(animation: State): boolean {\n  if (animation === State.AIR_DODGE) {\n    return true;\n  }\n\n  const isAboveMin = animation >= State.CONTROLLED_JUMP_START;\n  const isBelowMax = animation <= State.CONTROLLED_JUMP_END;\n  return isAboveMin && isBelowMax;\n}\n","import { EventEmitter } from \"events\";\nimport { last } from \"lodash\";\n\nimport type { FrameEntryType, FramesType, GameStartType, PostFrameUpdateType } from \"../types\";\nimport type { ComboType, MoveLandedType, PlayerIndexedType } from \"./common\";\nimport {\n  calcDamageTaken,\n  didLoseStock,\n  getSinglesPlayerPermutationsFromSettings,\n  isCommandGrabbed,\n  isDamaged,\n  isDead,\n  isDown,\n  isGrabbed,\n  isTeching,\n  Timers,\n} from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\nexport enum ComboEvent {\n  COMBO_START = \"COMBO_START\",\n  COMBO_EXTEND = \"COMBO_EXTEND\",\n  COMBO_END = \"COMBO_END\",\n}\n\ninterface ComboState {\n  combo: ComboType | null;\n  move: MoveLandedType | null;\n  resetCounter: number;\n  lastHitAnimation: number | null;\n  event: ComboEvent | null;\n}\n\nexport class ComboComputer extends EventEmitter implements StatComputer<ComboType[]> {\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private state = new Map<PlayerIndexedType, ComboState>();\n  private combos = new Array<ComboType>();\n  private settings: GameStartType | null = null;\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.settings = settings;\n    this.state = new Map();\n    this.combos = [];\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: ComboState = {\n        combo: null,\n        move: null,\n        resetCounter: 0,\n        lastHitAnimation: null,\n        event: null,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleComboCompute(allFrames, state, indices, frame, this.combos);\n\n        // Emit an event for the new combo\n        if (state.event !== null) {\n          this.emit(state.event, {\n            combo: last(this.combos),\n            settings: this.settings,\n          });\n          state.event = null;\n        }\n      }\n    });\n  }\n\n  public fetch(): ComboType[] {\n    return this.combos;\n  }\n}\n\nfunction handleComboCompute(\n  frames: FramesType,\n  state: ComboState,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n  combos: ComboType[],\n): void {\n  const currentFrameNumber = frame.frame;\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const opponentFrame = frame.players[indices.opponentIndex]!.post;\n\n  const prevFrameNumber = currentFrameNumber - 1;\n  let prevPlayerFrame: PostFrameUpdateType | null = null;\n  let prevOpponentFrame: PostFrameUpdateType | null = null;\n\n  if (frames[prevFrameNumber]) {\n    prevPlayerFrame = frames[prevFrameNumber]!.players[indices.playerIndex]!.post;\n    prevOpponentFrame = frames[prevFrameNumber]!.players[indices.opponentIndex]!.post;\n  }\n\n  const oppActionStateId = opponentFrame.actionStateId!;\n  const opntIsDamaged = isDamaged(oppActionStateId);\n  const opntIsGrabbed = isGrabbed(oppActionStateId);\n  const opntIsCommandGrabbed = isCommandGrabbed(oppActionStateId);\n  const opntDamageTaken = prevOpponentFrame ? calcDamageTaken(opponentFrame, prevOpponentFrame) : 0;\n\n  // Keep track of whether actionState changes after a hit. Used to compute move count\n  // When purely using action state there was a bug where if you did two of the same\n  // move really fast (such as ganon's jab), it would count as one move. Added\n  // the actionStateCounter at this point which counts the number of frames since\n  // an animation started. Should be more robust, for old files it should always be\n  // null and null < null = false\n  const actionChangedSinceHit = playerFrame.actionStateId !== state.lastHitAnimation;\n  const actionCounter = playerFrame.actionStateCounter!;\n  const prevActionCounter = prevPlayerFrame ? prevPlayerFrame.actionStateCounter! : 0;\n  const actionFrameCounterReset = actionCounter < prevActionCounter;\n  if (actionChangedSinceHit || actionFrameCounterReset) {\n    state.lastHitAnimation = null;\n  }\n\n  // If opponent took damage and was put in some kind of stun this frame, either\n  // start a combo or count the moves for the existing combo\n  if (opntIsDamaged || opntIsGrabbed || opntIsCommandGrabbed) {\n    let comboStarted = false;\n    if (!state.combo) {\n      state.combo = {\n        playerIndex: indices.opponentIndex,\n        startFrame: currentFrameNumber,\n        endFrame: null,\n        startPercent: prevOpponentFrame ? prevOpponentFrame.percent ?? 0 : 0,\n        currentPercent: opponentFrame.percent ?? 0,\n        endPercent: null,\n        moves: [],\n        didKill: false,\n        lastHitBy: indices.playerIndex,\n      };\n\n      combos.push(state.combo);\n\n      // Track whether this is a new combo or not\n      comboStarted = true;\n    }\n\n    if (opntDamageTaken) {\n      // If animation of last hit has been cleared that means this is a new move. This\n      // prevents counting multiple hits from the same move such as fox's drill\n      if (state.lastHitAnimation === null) {\n        state.move = {\n          playerIndex: indices.playerIndex,\n          frame: currentFrameNumber,\n          moveId: playerFrame.lastAttackLanded!,\n          hitCount: 0,\n          damage: 0,\n        };\n\n        state.combo.moves.push(state.move);\n\n        // Make sure we don't overwrite the START event\n        if (!comboStarted) {\n          state.event = ComboEvent.COMBO_EXTEND;\n        }\n      }\n\n      if (state.move) {\n        state.move.hitCount += 1;\n        state.move.damage += opntDamageTaken;\n      }\n\n      // Store previous frame animation to consider the case of a trade, the previous\n      // frame should always be the move that actually connected... I hope\n      state.lastHitAnimation = prevPlayerFrame ? prevPlayerFrame.actionStateId : null;\n    }\n\n    if (comboStarted) {\n      state.event = ComboEvent.COMBO_START;\n    }\n  }\n\n  if (!state.combo) {\n    // The rest of the function handles combo termination logic, so if we don't\n    // have a combo started, there is no need to continue\n    return;\n  }\n\n  const opntIsTeching = isTeching(oppActionStateId);\n  const opntIsDowned = isDown(oppActionStateId);\n  const opntDidLoseStock = prevOpponentFrame && didLoseStock(opponentFrame, prevOpponentFrame);\n  const opntIsDying = isDead(oppActionStateId);\n\n  // Update percent if opponent didn't lose stock\n  if (!opntDidLoseStock) {\n    state.combo.currentPercent = opponentFrame.percent ?? 0;\n  }\n\n  if (opntIsDamaged || opntIsGrabbed || opntIsCommandGrabbed || opntIsTeching || opntIsDowned || opntIsDying) {\n    // If opponent got grabbed or damaged, reset the reset counter\n    state.resetCounter = 0;\n  } else {\n    state.resetCounter += 1;\n  }\n\n  let shouldTerminate = false;\n\n  // Termination condition 1 - player kills opponent\n  if (opntDidLoseStock) {\n    state.combo.didKill = true;\n    shouldTerminate = true;\n  }\n\n  // Termination condition 2 - combo resets on time\n  if (state.resetCounter > Timers.COMBO_STRING_RESET_FRAMES) {\n    shouldTerminate = true;\n  }\n\n  // If combo should terminate, mark the end states and add it to list\n  if (shouldTerminate) {\n    state.combo.endFrame = playerFrame.frame;\n    state.combo.endPercent = prevOpponentFrame ? prevOpponentFrame.percent ?? 0 : 0;\n    state.event = ComboEvent.COMBO_END;\n\n    state.combo = null;\n    state.move = null;\n  }\n}\n","import { EventEmitter } from \"events\";\nimport { filter, get, groupBy, last, orderBy } from \"lodash\";\n\nimport type { FrameEntryType, FramesType, GameStartType, PostFrameUpdateType } from \"../types\";\nimport type { ConversionType, MoveLandedType, PlayerIndexedType } from \"./common\";\nimport {\n  calcDamageTaken,\n  didLoseStock,\n  getSinglesPlayerPermutationsFromSettings,\n  isCommandGrabbed,\n  isDamaged,\n  isGrabbed,\n  isInControl,\n  Timers,\n} from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\ninterface PlayerConversionState {\n  conversion: ConversionType | null;\n  move: MoveLandedType | null;\n  resetCounter: number;\n  lastHitAnimation: number | null;\n}\n\ninterface MetadataType {\n  lastEndFrameByOppIdx: {\n    [oppIdx: number]: number;\n  };\n}\n\nexport class ConversionComputer extends EventEmitter implements StatComputer<ConversionType[]> {\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private conversions = new Array<ConversionType>();\n  private state = new Map<PlayerIndexedType, PlayerConversionState>();\n  private metadata: MetadataType;\n  private settings: GameStartType | null = null;\n\n  public constructor() {\n    super();\n    this.metadata = {\n      lastEndFrameByOppIdx: {},\n    };\n  }\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.conversions = [];\n    this.state = new Map();\n    this.metadata = {\n      lastEndFrameByOppIdx: {},\n    };\n    this.settings = settings;\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: PlayerConversionState = {\n        conversion: null,\n        move: null,\n        resetCounter: 0,\n        lastHitAnimation: null,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        const terminated = handleConversionCompute(allFrames, state, indices, frame, this.conversions);\n        if (terminated) {\n          this.emit(\"CONVERSION\", {\n            combo: last(this.conversions),\n            settings: this.settings,\n          });\n        }\n      }\n    });\n  }\n\n  public fetch(): ConversionType[] {\n    this._populateConversionTypes();\n    return this.conversions;\n  }\n\n  private _populateConversionTypes(): void {\n    // Post-processing step: set the openingTypes\n    const conversionsToHandle = filter(this.conversions, (conversion) => {\n      return conversion.openingType === \"unknown\";\n    });\n\n    // Group new conversions by startTime and sort\n    const groupedConversions = groupBy(conversionsToHandle, \"startFrame\");\n    const sortedConversions = orderBy(groupedConversions, (conversions) => get(conversions, [0, \"startFrame\"]));\n\n    // Set the opening types on the conversions we need to handle\n    sortedConversions.forEach((conversions) => {\n      const isTrade = conversions.length >= 2;\n      conversions.forEach((conversion) => {\n        // Set end frame for this conversion\n        this.metadata.lastEndFrameByOppIdx[conversion.playerIndex] = conversion.endFrame!;\n\n        if (isTrade) {\n          // If trade, just short-circuit\n          conversion.openingType = \"trade\";\n          return;\n        }\n\n        // If not trade, check the opponent endFrame\n        const lastMove = last(conversion.moves);\n        const oppEndFrame =\n          this.metadata.lastEndFrameByOppIdx[lastMove ? lastMove.playerIndex : conversion.playerIndex];\n        const isCounterAttack = oppEndFrame && oppEndFrame > conversion.startFrame;\n        conversion.openingType = isCounterAttack ? \"counter-attack\" : \"neutral-win\";\n      });\n    });\n  }\n}\n\nfunction handleConversionCompute(\n  frames: FramesType,\n  state: PlayerConversionState,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n  conversions: ConversionType[],\n): boolean {\n  const currentFrameNumber = frame.frame;\n  const playerFrame: PostFrameUpdateType = frame.players[indices.playerIndex]!.post;\n  const opponentFrame = frame.players[indices.opponentIndex]!.post;\n\n  const prevFrameNumber = currentFrameNumber - 1;\n  let prevPlayerFrame: PostFrameUpdateType | null = null;\n  let prevOpponentFrame: PostFrameUpdateType | null = null;\n\n  if (frames[prevFrameNumber]) {\n    prevPlayerFrame = frames[prevFrameNumber]!.players[indices.playerIndex]!.post;\n    prevOpponentFrame = frames[prevFrameNumber]!.players[indices.opponentIndex]!.post;\n  }\n\n  const oppActionStateId = opponentFrame.actionStateId!;\n  const opntIsDamaged = isDamaged(oppActionStateId);\n  const opntIsGrabbed = isGrabbed(oppActionStateId);\n  const opntIsCommandGrabbed = isCommandGrabbed(oppActionStateId);\n  const opntDamageTaken = prevOpponentFrame ? calcDamageTaken(opponentFrame, prevOpponentFrame) : 0;\n\n  // Keep track of whether actionState changes after a hit. Used to compute move count\n  // When purely using action state there was a bug where if you did two of the same\n  // move really fast (such as ganon's jab), it would count as one move. Added\n  // the actionStateCounter at this point which counts the number of frames since\n  // an animation started. Should be more robust, for old files it should always be\n  // null and null < null = false\n  const actionChangedSinceHit = playerFrame.actionStateId !== state.lastHitAnimation;\n  const actionCounter = playerFrame.actionStateCounter!;\n  const prevActionCounter = prevPlayerFrame ? prevPlayerFrame.actionStateCounter! : 0;\n  const actionFrameCounterReset = actionCounter < prevActionCounter;\n  if (actionChangedSinceHit || actionFrameCounterReset) {\n    state.lastHitAnimation = null;\n  }\n\n  // If opponent took damage and was put in some kind of stun this frame, either\n  // start a conversion or\n  if (opntIsDamaged || opntIsGrabbed || opntIsCommandGrabbed) {\n    if (!state.conversion) {\n      state.conversion = {\n        playerIndex: indices.opponentIndex,\n        lastHitBy: indices.playerIndex,\n        startFrame: currentFrameNumber,\n        endFrame: null,\n        startPercent: prevOpponentFrame ? prevOpponentFrame.percent ?? 0 : 0,\n        currentPercent: opponentFrame.percent ?? 0,\n        endPercent: null,\n        moves: [],\n        didKill: false,\n        openingType: \"unknown\", // Will be updated later\n      };\n\n      conversions.push(state.conversion);\n    }\n\n    if (opntDamageTaken) {\n      // If animation of last hit has been cleared that means this is a new move. This\n      // prevents counting multiple hits from the same move such as fox's drill\n      if (state.lastHitAnimation === null) {\n        state.move = {\n          playerIndex: indices.playerIndex,\n          frame: currentFrameNumber,\n          moveId: playerFrame.lastAttackLanded!,\n          hitCount: 0,\n          damage: 0,\n        };\n\n        state.conversion.moves.push(state.move);\n      }\n\n      if (state.move) {\n        state.move.hitCount += 1;\n        state.move.damage += opntDamageTaken;\n      }\n\n      // Store previous frame animation to consider the case of a trade, the previous\n      // frame should always be the move that actually connected... I hope\n      state.lastHitAnimation = prevPlayerFrame ? prevPlayerFrame.actionStateId : null;\n    }\n  }\n\n  if (!state.conversion) {\n    // The rest of the function handles conversion termination logic, so if we don't\n    // have a conversion started, there is no need to continue\n    return false;\n  }\n\n  const opntInControl = isInControl(oppActionStateId);\n  const opntDidLoseStock = prevOpponentFrame && didLoseStock(opponentFrame, prevOpponentFrame);\n\n  // Update percent if opponent didn't lose stock\n  if (!opntDidLoseStock) {\n    state.conversion.currentPercent = opponentFrame.percent ?? 0;\n  }\n\n  if (opntIsDamaged || opntIsGrabbed || opntIsCommandGrabbed) {\n    // If opponent got grabbed or damaged, reset the reset counter\n    state.resetCounter = 0;\n  }\n\n  const shouldStartResetCounter = state.resetCounter === 0 && opntInControl;\n  const shouldContinueResetCounter = state.resetCounter > 0;\n  if (shouldStartResetCounter || shouldContinueResetCounter) {\n    // This will increment the reset timer under the following conditions:\n    // 1) if we were punishing opponent but they have now entered an actionable state\n    // 2) if counter has already started counting meaning opponent has entered actionable state\n    state.resetCounter += 1;\n  }\n\n  let shouldTerminate = false;\n\n  // Termination condition 1 - player kills opponent\n  if (opntDidLoseStock) {\n    state.conversion.didKill = true;\n    shouldTerminate = true;\n  }\n\n  // Termination condition 2 - conversion resets on time\n  if (state.resetCounter > Timers.PUNISH_RESET_FRAMES) {\n    shouldTerminate = true;\n  }\n\n  // If conversion should terminate, mark the end states and add it to list\n  if (shouldTerminate) {\n    state.conversion.endFrame = playerFrame.frame;\n    state.conversion.endPercent = prevOpponentFrame ? prevOpponentFrame.percent ?? 0 : 0;\n\n    state.conversion = null;\n    state.move = null;\n  }\n\n  return shouldTerminate;\n}\n","export enum Command {\n  MESSAGE_SIZES = 0x35,\n  GAME_START = 0x36,\n  PRE_FRAME_UPDATE = 0x37,\n  POST_FRAME_UPDATE = 0x38,\n  GAME_END = 0x39,\n  ITEM_UPDATE = 0x3b,\n  FRAME_BOOKEND = 0x3c,\n}\n\nexport interface PlayerType {\n  playerIndex: number;\n  port: number;\n  characterId: number | null;\n  characterColor: number | null;\n  startStocks: number | null;\n  type: number | null;\n  teamId: number | null;\n  controllerFix: string | null;\n  nametag: string | null;\n  displayName: string;\n  connectCode: string;\n  userId: string;\n}\n\nexport enum GameMode {\n  VS = 0x02,\n  ONLINE = 0x08,\n}\n\nexport interface GameStartType {\n  slpVersion: string | null;\n  isTeams: boolean | null;\n  isPAL: boolean | null;\n  stageId: number | null;\n  players: PlayerType[];\n  scene: number | null;\n  gameMode: GameMode | null;\n}\n\nexport interface PreFrameUpdateType {\n  frame: number | null;\n  playerIndex: number | null;\n  isFollower: boolean | null;\n  seed: number | null;\n  actionStateId: number | null;\n  positionX: number | null;\n  positionY: number | null;\n  facingDirection: number | null;\n  joystickX: number | null;\n  joystickY: number | null;\n  cStickX: number | null;\n  cStickY: number | null;\n  trigger: number | null;\n  buttons: number | null;\n  physicalButtons: number | null;\n  physicalLTrigger: number | null;\n  physicalRTrigger: number | null;\n  percent: number | null;\n}\n\nexport interface PostFrameUpdateType {\n  frame: number | null;\n  playerIndex: number | null;\n  isFollower: boolean | null;\n  internalCharacterId: number | null;\n  actionStateId: number | null;\n  positionX: number | null;\n  positionY: number | null;\n  facingDirection: number | null;\n  percent: number | null;\n  shieldSize: number | null;\n  lastAttackLanded: number | null;\n  currentComboCount: number | null;\n  lastHitBy: number | null;\n  stocksRemaining: number | null;\n  actionStateCounter: number | null;\n  miscActionState: number | null;\n  isAirborne: boolean | null;\n  lastGroundId: number | null;\n  jumpsRemaining: number | null;\n  lCancelStatus: number | null;\n  hurtboxCollisionState: number | null;\n  selfInducedSpeeds: SelfInducedSpeedsType | null;\n}\n\nexport interface SelfInducedSpeedsType {\n  airX: number | null;\n  y: number | null;\n  attackX: number | null;\n  attackY: number | null;\n  groundX: number | null;\n}\n\nexport interface ItemUpdateType {\n  frame: number | null;\n  typeId: number | null;\n  state: number | null;\n  facingDirection: number | null;\n  velocityX: number | null;\n  velocityY: number | null;\n  positionX: number | null;\n  positionY: number | null;\n  damageTaken: number | null;\n  expirationTimer: number | null;\n  spawnId: number | null;\n  missileType: number | null;\n  turnipFace: number | null;\n  chargeShotLaunched: number | null;\n  chargePower: number | null;\n  owner: number | null;\n}\n\nexport interface FrameBookendType {\n  frame: number | null;\n  latestFinalizedFrame: number | null;\n}\n\nexport interface GameEndType {\n  gameEndMethod: number | null;\n  lrasInitiatorIndex: number | null;\n}\n\nexport interface MetadataType {\n  startAt?: string | null;\n  playedOn?: string | null;\n  lastFrame?: number | null;\n  players?: {\n    [playerIndex: number]: {\n      characters: {\n        [internalCharacterId: number]: number;\n      };\n      names?: {\n        netplay?: string | null;\n        code?: string | null;\n      };\n    };\n  } | null;\n  consoleNick?: string | null;\n}\n\nexport type EventPayloadTypes =\n  | GameStartType\n  | PreFrameUpdateType\n  | PostFrameUpdateType\n  | ItemUpdateType\n  | FrameBookendType\n  | GameEndType;\n\nexport type EventCallbackFunc = (command: Command, payload?: EventPayloadTypes | null) => boolean;\n\nexport interface FrameEntryType {\n  frame: number;\n  players: {\n    [playerIndex: number]: {\n      pre: PreFrameUpdateType;\n      post: PostFrameUpdateType;\n    } | null;\n  };\n  followers: {\n    [playerIndex: number]: {\n      pre: PreFrameUpdateType;\n      post: PostFrameUpdateType;\n    } | null;\n  };\n  items?: ItemUpdateType[];\n}\n\nexport enum Frames {\n  FIRST = -123,\n  FIRST_PLAYABLE = -39,\n}\n\nexport interface FramesType {\n  [frameIndex: number]: FrameEntryType;\n}\n\nexport interface RollbackFramesType {\n  [frameIndex: number]: FrameEntryType[];\n}\n\nexport interface RollbackFrames {\n  frames: RollbackFramesType;\n  count: number;\n  lengths: number[];\n}\n","import type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport { Frames } from \"../types\";\nimport type { PlayerIndexedType } from \"./common\";\nimport { getSinglesPlayerPermutationsFromSettings } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\nenum JoystickRegion {\n  DZ = 0,\n  NE = 1,\n  SE = 2,\n  SW = 3,\n  NW = 4,\n  N = 5,\n  E = 6,\n  S = 7,\n  W = 8,\n}\n\nexport interface PlayerInput {\n  playerIndex: number;\n  opponentIndex: number;\n  inputCount: number;\n  joystickInputCount: number;\n  cstickInputCount: number;\n  buttonInputCount: number;\n  triggerInputCount: number;\n}\n\nexport class InputComputer implements StatComputer<PlayerInput[]> {\n  private state = new Map<PlayerIndexedType, PlayerInput>();\n  private playerPermutations = new Array<PlayerIndexedType>();\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: PlayerInput = {\n        playerIndex: indices.playerIndex,\n        opponentIndex: indices.opponentIndex,\n        inputCount: 0,\n        joystickInputCount: 0,\n        cstickInputCount: 0,\n        buttonInputCount: 0,\n        triggerInputCount: 0,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleInputCompute(allFrames, state, indices, frame);\n      }\n    });\n  }\n\n  public fetch(): PlayerInput[] {\n    return Array.from(this.state.values());\n  }\n}\n\nfunction handleInputCompute(\n  frames: FramesType,\n  state: PlayerInput,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n): void {\n  const playerFrame = frame.players[indices.playerIndex]!.pre;\n  const currentFrameNumber = playerFrame.frame!;\n  const prevFrameNumber = currentFrameNumber - 1;\n  const prevPlayerFrame = frames[prevFrameNumber] ? frames[prevFrameNumber]!.players[indices.playerIndex]!.pre : null;\n\n  if (currentFrameNumber < Frames.FIRST_PLAYABLE || !prevPlayerFrame) {\n    // Don't count inputs until the game actually starts\n    return;\n  }\n\n  // First count the number of buttons that go from 0 to 1\n  // Increment action count by amount of button presses\n  const invertedPreviousButtons = ~prevPlayerFrame.physicalButtons!;\n  const currentButtons = playerFrame.physicalButtons!;\n  const buttonChanges = invertedPreviousButtons & currentButtons & 0xfff;\n  const newInputsPressed = countSetBits(buttonChanges);\n  state.inputCount += newInputsPressed;\n  state.buttonInputCount += newInputsPressed;\n\n  // Increment action count when sticks change from one region to another.\n  // Don't increment when stick returns to deadzone\n  const prevAnalogRegion = getJoystickRegion(prevPlayerFrame.joystickX!, prevPlayerFrame.joystickY!);\n  const currentAnalogRegion = getJoystickRegion(playerFrame.joystickX!, playerFrame.joystickY!);\n  if (prevAnalogRegion !== currentAnalogRegion && currentAnalogRegion !== JoystickRegion.DZ) {\n    state.inputCount += 1;\n    state.joystickInputCount += 1;\n  }\n\n  // Do the same for c-stick\n  const prevCstickRegion = getJoystickRegion(prevPlayerFrame.cStickX!, prevPlayerFrame.cStickY!);\n  const currentCstickRegion = getJoystickRegion(playerFrame.cStickX!, playerFrame.cStickY!);\n  if (prevCstickRegion !== currentCstickRegion && currentCstickRegion !== JoystickRegion.DZ) {\n    state.inputCount += 1;\n    state.cstickInputCount += 1;\n  }\n\n  // Increment action on analog trigger... I'm not sure when. This needs revision\n  // Currently will update input count when the button gets pressed past 0.3\n  // Changes from hard shield to light shield should probably count as inputs but\n  // are not counted here\n  if (prevPlayerFrame.physicalLTrigger! < 0.3 && playerFrame.physicalLTrigger! >= 0.3) {\n    state.inputCount += 1;\n    state.triggerInputCount += 1;\n  }\n  if (prevPlayerFrame.physicalRTrigger! < 0.3 && playerFrame.physicalRTrigger! >= 0.3) {\n    state.inputCount += 1;\n    state.triggerInputCount += 1;\n  }\n}\n\nfunction countSetBits(x: number): number {\n  // This function solves the Hamming Weight problem. Effectively it counts the number of\n  // bits in the input that are set to 1\n  // This implementation is supposedly very efficient when most bits are zero.\n  // Found: https://en.wikipedia.org/wiki/Hamming_weight#Efficient_implementation\n  let bits = x;\n\n  let count;\n  for (count = 0; bits; count += 1) {\n    bits &= bits - 1;\n  }\n  return count;\n}\n\nfunction getJoystickRegion(x: number, y: number): JoystickRegion {\n  let region = JoystickRegion.DZ;\n\n  if (x >= 0.2875 && y >= 0.2875) {\n    region = JoystickRegion.NE;\n  } else if (x >= 0.2875 && y <= -0.2875) {\n    region = JoystickRegion.SE;\n  } else if (x <= -0.2875 && y <= -0.2875) {\n    region = JoystickRegion.SW;\n  } else if (x <= -0.2875 && y >= 0.2875) {\n    region = JoystickRegion.NW;\n  } else if (y >= 0.2875) {\n    region = JoystickRegion.N;\n  } else if (x >= 0.2875) {\n    region = JoystickRegion.E;\n  } else if (y <= -0.2875) {\n    region = JoystickRegion.S;\n  } else if (x <= -0.2875) {\n    region = JoystickRegion.W;\n  }\n\n  return region;\n}\n","import { first, flatten, get, groupBy, keyBy, last, mapValues, zip } from \"lodash\";\n\nimport type { GameStartType } from \"../types\";\nimport type { ConversionType, InputCountsType, OverallType, RatioType } from \"./common\";\nimport type { PlayerInput } from \"./inputs\";\n\ninterface ConversionsByPlayerByOpening {\n  [playerIndex: string]: {\n    [openingType: string]: ConversionType[];\n  };\n}\n\nexport function generateOverallStats({\n  settings,\n  inputs,\n  conversions,\n  playableFrameCount,\n}: {\n  settings: GameStartType;\n  inputs: PlayerInput[];\n  conversions: ConversionType[];\n  playableFrameCount: number;\n}): OverallType[] {\n  const inputsByPlayer = keyBy(inputs, \"playerIndex\");\n  const originalConversions = conversions;\n  const conversionsByPlayer = groupBy(conversions, (conv) => conv.moves[0]?.playerIndex);\n  const conversionsByPlayerByOpening: ConversionsByPlayerByOpening = mapValues(conversionsByPlayer, (conversions) =>\n    groupBy(conversions, \"openingType\"),\n  );\n\n  const gameMinutes = playableFrameCount / 3600;\n\n  const overall = settings.players.map((player) => {\n    const playerIndex = player.playerIndex;\n\n    const playerInputs = get(inputsByPlayer, playerIndex) || {};\n    const inputCounts: InputCountsType = {\n      buttons: get(playerInputs, \"buttonInputCount\"),\n      triggers: get(playerInputs, \"triggerInputCount\"),\n      cstick: get(playerInputs, \"cstickInputCount\"),\n      joystick: get(playerInputs, \"joystickInputCount\"),\n      total: get(playerInputs, \"inputCount\"),\n    };\n    // const conversions = get(conversionsByPlayer, playerIndex) || [];\n    // const successfulConversions = conversions.filter((conversion) => conversion.moves.length > 1);\n    let conversionCount = 0;\n    let successfulConversionCount = 0;\n\n    const opponentIndices = settings.players\n      .filter((opp) => {\n        // We want players which aren't ourselves\n        if (opp.playerIndex === playerIndex) {\n          return false;\n        }\n\n        // Make sure they're not on our team either\n        return !settings.isTeams || opp.teamId !== player.teamId;\n      })\n      .map((opp) => opp.playerIndex);\n\n    let totalDamage = 0;\n    let killCount = 0;\n\n    // These are the conversions that we did on our opponents\n    originalConversions\n      // Filter down to conversions of our opponent\n      .filter((conversion) => conversion.playerIndex !== playerIndex)\n      .forEach((conversion) => {\n        conversionCount++;\n\n        // We killed the opponent\n        if (conversion.didKill && conversion.lastHitBy === playerIndex) {\n          killCount += 1;\n        }\n        if (conversion.moves.length > 1 && conversion.moves[0]!.playerIndex === playerIndex) {\n          successfulConversionCount++;\n        }\n        conversion.moves.forEach((move) => {\n          if (move.playerIndex === playerIndex) {\n            totalDamage += move.damage;\n          }\n        });\n      });\n\n    return {\n      playerIndex: playerIndex,\n      inputCounts: inputCounts,\n      conversionCount: conversionCount,\n      totalDamage: totalDamage,\n      killCount: killCount,\n\n      successfulConversions: getRatio(successfulConversionCount, conversionCount),\n      inputsPerMinute: getRatio(inputCounts.total, gameMinutes),\n      digitalInputsPerMinute: getRatio(inputCounts.buttons, gameMinutes),\n      openingsPerKill: getRatio(conversionCount, killCount),\n      damagePerOpening: getRatio(totalDamage, conversionCount),\n      neutralWinRatio: getOpeningRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices, \"neutral-win\"),\n      counterHitRatio: getOpeningRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices, \"counter-attack\"),\n      beneficialTradeRatio: getBeneficialTradeRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices),\n    };\n  });\n\n  return overall;\n}\n\nfunction getRatio(count: number, total: number): RatioType {\n  return {\n    count: count,\n    total: total,\n    ratio: total ? count / total : null,\n  };\n}\n\nfunction getOpeningRatio(\n  conversionsByPlayerByOpening: ConversionsByPlayerByOpening,\n  playerIndex: number,\n  opponentIndices: number[],\n  type: string,\n): RatioType {\n  const openings = get(conversionsByPlayerByOpening, [playerIndex, type]) || [];\n\n  const opponentOpenings = flatten(\n    opponentIndices.map((opponentIndex) => get(conversionsByPlayerByOpening, [opponentIndex, type]) || []),\n  );\n\n  return getRatio(openings.length, openings.length + opponentOpenings.length);\n}\n\nfunction getBeneficialTradeRatio(\n  conversionsByPlayerByOpening: ConversionsByPlayerByOpening,\n  playerIndex: number,\n  opponentIndices: number[],\n): RatioType {\n  const playerTrades = get(conversionsByPlayerByOpening, [playerIndex, \"trade\"]) || [];\n  const opponentTrades = flatten(\n    opponentIndices.map((opponentIndex) => get(conversionsByPlayerByOpening, [opponentIndex, \"trade\"]) || []),\n  );\n\n  const benefitsPlayer = [];\n\n  // Figure out which punishes benefited this player\n  const zippedTrades = zip(playerTrades, opponentTrades);\n  zippedTrades.forEach((conversionPair) => {\n    const playerConversion = first(conversionPair);\n    const opponentConversion = last(conversionPair);\n    if (playerConversion && opponentConversion) {\n      const playerDamage = playerConversion.currentPercent - playerConversion.startPercent;\n      const opponentDamage = opponentConversion.currentPercent - opponentConversion.startPercent;\n\n      if (playerConversion!.didKill && !opponentConversion!.didKill) {\n        benefitsPlayer.push(playerConversion);\n      } else if (playerDamage > opponentDamage) {\n        benefitsPlayer.push(playerConversion);\n      }\n    }\n  });\n\n  return getRatio(benefitsPlayer.length, playerTrades.length);\n}\n","import { get } from \"lodash\";\n\nimport type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport { Frames } from \"../types\";\n\nexport interface StatComputer<T> {\n  setup(settings: GameStartType): void;\n  processFrame(newFrame: FrameEntryType, allFrames: FramesType): void;\n  fetch(): T;\n}\n\nexport interface StatOptions {\n  processOnTheFly: boolean;\n}\n\nconst defaultOptions: StatOptions = {\n  processOnTheFly: false,\n};\n\nexport class Stats {\n  private options: StatOptions;\n  private lastProcessedFrame: number | null = null;\n  private frames: FramesType = {};\n  private players: number[] = [];\n  private allComputers = new Array<StatComputer<unknown>>();\n\n  public constructor(options?: StatOptions) {\n    this.options = Object.assign({}, defaultOptions, options);\n  }\n\n  /**\n   * Should reset the frames to their default values.\n   */\n  public setup(settings: GameStartType): void {\n    // Reset the frames since it's a new game\n    this.frames = {};\n    this.players = settings.players.map((v) => v.playerIndex);\n\n    // Forward the settings on to the individual stat computer\n    this.allComputers.forEach((comp) => comp.setup(settings));\n  }\n\n  public register(...computer: StatComputer<unknown>[]): void {\n    this.allComputers.push(...computer);\n  }\n\n  public process(): void {\n    if (this.players.length === 0) {\n      return;\n    }\n\n    let i = this.lastProcessedFrame !== null ? this.lastProcessedFrame + 1 : Frames.FIRST;\n    while (this.frames[i]) {\n      const frame = this.frames[i];\n      // Don't attempt to compute stats on frames that have not been fully received\n      if (!isCompletedFrame(this.players, frame)) {\n        return;\n      }\n      this.allComputers.forEach((comp) => comp.processFrame(frame, this.frames));\n      this.lastProcessedFrame = i;\n      i++;\n    }\n  }\n\n  public addFrame(frame: FrameEntryType): void {\n    this.frames[frame.frame] = frame;\n\n    if (this.options.processOnTheFly) {\n      this.process();\n    }\n  }\n}\n\nfunction isCompletedFrame(players: number[], frame?: FrameEntryType): frame is FrameEntryType {\n  if (!frame) {\n    return false;\n  }\n\n  // This function checks whether we have successfully received an entire frame.\n  // It is not perfect because it does not wait for follower frames. Fortunately,\n  // follower frames are not used for any stat calculations so this doesn't matter\n  // for our purposes.\n  for (const player of players) {\n    const playerPostFrame = get(frame, [\"players\", player, \"post\"]);\n    if (!playerPostFrame) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport type { PlayerIndexedType, StockType } from \"./common\";\nimport { didLoseStock, getSinglesPlayerPermutationsFromSettings, isDead } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\ninterface StockState {\n  stock?: StockType | null;\n}\n\nexport class StockComputer implements StatComputer<StockType[]> {\n  private state = new Map<PlayerIndexedType, StockState>();\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private stocks = new Array<StockType>();\n\n  public setup(settings: GameStartType): void {\n    // Reset state\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.stocks = [];\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: StockState = {\n        stock: null,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleStockCompute(allFrames, state, indices, frame, this.stocks);\n      }\n    });\n  }\n\n  public fetch(): StockType[] {\n    return this.stocks;\n  }\n}\n\nfunction handleStockCompute(\n  frames: FramesType,\n  state: StockState,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n  stocks: StockType[],\n): void {\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const currentFrameNumber = playerFrame.frame!;\n  const prevFrameNumber = currentFrameNumber - 1;\n  const prevPlayerFrame = frames[prevFrameNumber] ? frames[prevFrameNumber]!.players[indices.playerIndex]!.post : null;\n\n  // If there is currently no active stock, wait until the player is no longer spawning.\n  // Once the player is no longer spawning, start the stock\n  if (!state.stock) {\n    const isPlayerDead = isDead(playerFrame.actionStateId!);\n    if (isPlayerDead) {\n      return;\n    }\n\n    state.stock = {\n      playerIndex: indices.playerIndex,\n      startFrame: currentFrameNumber,\n      endFrame: null,\n      startPercent: 0,\n      endPercent: null,\n      currentPercent: 0,\n      count: playerFrame.stocksRemaining!,\n      deathAnimation: null,\n    };\n\n    stocks.push(state.stock);\n  } else if (prevPlayerFrame && didLoseStock(playerFrame, prevPlayerFrame)) {\n    state.stock.endFrame = playerFrame.frame;\n    state.stock.endPercent = prevPlayerFrame.percent ?? 0;\n    state.stock.deathAnimation = playerFrame.actionStateId;\n    state.stock = null;\n  } else {\n    state.stock.currentPercent = playerFrame.percent ?? 0;\n  }\n}\n","import { decode, encode } from \"@shelacek/ubjson\";\n\nexport enum CommunicationType {\n  HANDSHAKE = 1,\n  REPLAY = 2,\n  KEEP_ALIVE = 3,\n}\n\nexport interface CommunicationMessage {\n  type: CommunicationType;\n  payload: {\n    cursor: Uint8Array;\n    clientToken: Uint8Array;\n    pos: Uint8Array;\n    nextPos: Uint8Array;\n    data: Uint8Array;\n    nick: string | null;\n    forcePos: boolean;\n    nintendontVersion: string | null;\n  };\n}\n\n// This class is responsible for handling the communication protocol between the Wii and the\n// desktop app\nexport class ConsoleCommunication {\n  private receiveBuf = Buffer.from([]);\n  private messages = new Array<CommunicationMessage>();\n\n  public receive(data: Buffer): void {\n    this.receiveBuf = Buffer.concat([this.receiveBuf, data]);\n\n    while (this.receiveBuf.length >= 4) {\n      // First get the size of the message we are expecting\n      const msgSize = this.receiveBuf.readUInt32BE(0);\n\n      if (this.receiveBuf.length < msgSize + 4) {\n        // If we haven't received all the data yet, let's wait for more\n        return;\n      }\n\n      // Here we have received all the data, so let's decode it\n      const ubjsonData = this.receiveBuf.slice(4, msgSize + 4);\n      this.messages.push(decode(ubjsonData));\n\n      // Remove the processed data from receiveBuf\n      this.receiveBuf = this.receiveBuf.slice(msgSize + 4);\n    }\n  }\n\n  public getReceiveBuffer(): Buffer {\n    return this.receiveBuf;\n  }\n\n  public getMessages(): Array<CommunicationMessage> {\n    const toReturn = this.messages;\n    this.messages = [];\n\n    return toReturn;\n  }\n\n  public genHandshakeOut(cursor: Uint8Array, clientToken: number, isRealtime = false): Buffer {\n    const clientTokenBuf = Buffer.from([0, 0, 0, 0]);\n    clientTokenBuf.writeUInt32BE(clientToken, 0);\n\n    const message = {\n      type: CommunicationType.HANDSHAKE,\n      payload: {\n        cursor: cursor,\n        clientToken: Uint8Array.from(clientTokenBuf), // TODO: Use real instance token\n        isRealtime: isRealtime,\n      },\n    };\n\n    const buf = encode(message, {\n      optimizeArrays: true,\n    });\n\n    const msg = Buffer.concat([Buffer.from([0, 0, 0, 0]), Buffer.from(buf)]);\n\n    msg.writeUInt32BE(buf.byteLength, 0);\n\n    return msg;\n  }\n}\n","import type { EventEmitter } from \"events\";\n\nexport enum ConnectionEvent {\n  CONNECT = \"connect\",\n  MESSAGE = \"message\",\n  HANDSHAKE = \"handshake\",\n  STATUS_CHANGE = \"statusChange\",\n  DATA = \"data\",\n  ERROR = \"error\",\n}\n\nexport enum ConnectionStatus {\n  DISCONNECTED = 0,\n  CONNECTING = 1,\n  CONNECTED = 2,\n  RECONNECT_WAIT = 3,\n}\n\nexport enum Ports {\n  DEFAULT = 51441,\n  LEGACY = 666,\n  RELAY_START = 53741,\n}\n\nexport interface ConnectionDetails {\n  consoleNick: string;\n  gameDataCursor: number | Uint8Array;\n  version: string;\n  clientToken?: number;\n}\n\nexport interface ConnectionSettings {\n  ipAddress: string;\n  port: number;\n}\n\nexport interface Connection extends EventEmitter {\n  getStatus(): ConnectionStatus;\n  getSettings(): ConnectionSettings;\n  getDetails(): ConnectionDetails;\n  connect(ip: string, port: number): void;\n  disconnect(): void;\n}\n","import { EventEmitter } from \"events\";\nimport net from \"net\";\nimport inject from \"reconnect-core\";\n\nimport type { CommunicationMessage } from \"./communication\";\nimport { CommunicationType, ConsoleCommunication } from \"./communication\";\nimport type { Connection, ConnectionDetails, ConnectionSettings } from \"./types\";\nimport { ConnectionEvent, ConnectionStatus, Ports } from \"./types\";\n\nexport const NETWORK_MESSAGE = \"HELO\\0\";\n\nconst DEFAULT_CONNECTION_TIMEOUT_MS = 20000;\n\nenum CommunicationState {\n  INITIAL = \"initial\",\n  LEGACY = \"legacy\",\n  NORMAL = \"normal\",\n}\n\nconst defaultConnectionDetails: ConnectionDetails = {\n  consoleNick: \"unknown\",\n  gameDataCursor: Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0]),\n  version: \"\",\n  clientToken: 0,\n};\n\nconst consoleConnectionOptions = {\n  autoReconnect: true,\n};\n\nexport type ConsoleConnectionOptions = typeof consoleConnectionOptions;\n\n/**\n * Responsible for maintaining connection to a Slippi relay connection or Wii connection.\n * Events are emitted whenever data is received.\n *\n * Basic usage example:\n *\n * ```javascript\n * const { ConsoleConnection } = require(\"@slippi/slippi-js\");\n *\n * const connection = new ConsoleConnection();\n * connection.connect(\"localhost\", 667); // You should set these values appropriately\n *\n * connection.on(\"data\", (data) => {\n *   // Received data from console\n *   console.log(data);\n * });\n *\n * connection.on(\"statusChange\", (status) => {\n *   console.log(`status changed: ${status}`);\n * });\n * ```\n */\nexport class ConsoleConnection extends EventEmitter implements Connection {\n  private ipAddress: string;\n  private port: number;\n  private isRealtime: boolean;\n  private connectionStatus = ConnectionStatus.DISCONNECTED;\n  private connDetails: ConnectionDetails = { ...defaultConnectionDetails };\n  private client: net.Socket | null = null;\n  private connection: inject.Instance<unknown, net.Socket> | null = null;\n  private options: ConsoleConnectionOptions;\n  private shouldReconnect = false;\n\n  public constructor(options?: Partial<ConsoleConnectionOptions>) {\n    super();\n    this.ipAddress = \"0.0.0.0\";\n    this.port = Ports.DEFAULT;\n    this.isRealtime = false;\n    this.options = Object.assign({}, consoleConnectionOptions, options);\n  }\n\n  /**\n   * @returns The current connection status.\n   */\n  public getStatus(): ConnectionStatus {\n    return this.connectionStatus;\n  }\n\n  /**\n   * @returns The IP address and port of the current connection.\n   */\n  public getSettings(): ConnectionSettings {\n    return {\n      ipAddress: this.ipAddress,\n      port: this.port,\n    };\n  }\n\n  /**\n   * @returns The specific details about the connected console.\n   */\n  public getDetails(): ConnectionDetails {\n    return { ...this.connDetails };\n  }\n\n  /**\n   * Initiate a connection to the Wii or Slippi relay.\n   * @param ip   The IP address of the Wii or Slippi relay.\n   * @param port The port to connect to.\n   * @param isRealtime Optional. A flag to tell the Wii to send data as quickly as possible\n   * @param timeout Optional. The timeout in milliseconds when attempting to connect\n   *                to the Wii or relay.\n   */\n  public connect(ip: string, port: number, isRealtime = false, timeout = DEFAULT_CONNECTION_TIMEOUT_MS): void {\n    this.ipAddress = ip;\n    this.port = port;\n    this.isRealtime = isRealtime;\n    this._connectOnPort(ip, port, timeout);\n  }\n\n  private _connectOnPort(ip: string, port: number, timeout: number): void {\n    // set up reconnect\n    const reconnect = inject(() =>\n      net.connect({\n        host: ip,\n        port: port,\n        timeout: timeout,\n      }),\n    );\n\n    // Indicate we are connecting\n    this._setStatus(ConnectionStatus.CONNECTING);\n\n    // Prepare console communication obj for talking UBJSON\n    const consoleComms = new ConsoleCommunication();\n\n    // TODO: reconnect on failed reconnect, not sure how\n    // TODO: to do this\n    const connection = reconnect(\n      {\n        initialDelay: 2000,\n        maxDelay: 10000,\n        strategy: \"fibonacci\",\n        failAfter: Infinity,\n      },\n      (client) => {\n        this.emit(ConnectionEvent.CONNECT);\n        // We successfully connected so turn on auto-reconnect\n        this.shouldReconnect = this.options.autoReconnect;\n        this.client = client;\n\n        let commState: CommunicationState = CommunicationState.INITIAL;\n        client.on(\"data\", (data) => {\n          if (commState === CommunicationState.INITIAL) {\n            commState = this._getInitialCommState(data);\n            console.log(`Connected to ${ip}:${port} with type: ${commState}`);\n            this._setStatus(ConnectionStatus.CONNECTED);\n            console.log(data.toString(\"hex\"));\n          }\n\n          if (commState === CommunicationState.LEGACY) {\n            // If the first message received was not a handshake message, either we\n            // connected to an old Nintendont version or a relay instance\n            this._handleReplayData(data);\n            return;\n          }\n\n          try {\n            consoleComms.receive(data);\n          } catch (err) {\n            console.error(\"Failed to process new data from server...\", {\n              error: err,\n              prevDataBuf: consoleComms.getReceiveBuffer(),\n              rcvData: data,\n            });\n            client.destroy();\n            this.emit(ConnectionEvent.ERROR, err);\n            return;\n          }\n          const messages = consoleComms.getMessages();\n\n          // Process all of the received messages\n          try {\n            messages.forEach((message) => this._processMessage(message));\n          } catch (err) {\n            // Disconnect client to send another handshake message\n            console.error(err);\n            client.destroy();\n            this.emit(ConnectionEvent.ERROR, err);\n          }\n        });\n\n        client.on(\"timeout\", () => {\n          // const previouslyConnected = this.connectionStatus === ConnectionStatus.CONNECTED;\n          console.warn(`Attempted connection to ${ip}:${port} timed out after ${timeout}ms`);\n          client.destroy();\n        });\n\n        client.on(\"end\", () => {\n          console.log(\"disconnect\");\n          if (!this.shouldReconnect) {\n            client.destroy();\n          }\n        });\n\n        client.on(\"close\", () => {\n          console.log(\"connection was closed\");\n        });\n\n        const handshakeMsgOut = consoleComms.genHandshakeOut(\n          this.connDetails.gameDataCursor as Uint8Array,\n          this.connDetails.clientToken ?? 0,\n          this.isRealtime,\n        );\n\n        client.write(handshakeMsgOut);\n      },\n    );\n\n    const setConnectingStatus = (): void => {\n      // Indicate we are connecting\n      this._setStatus(this.shouldReconnect ? ConnectionStatus.RECONNECT_WAIT : ConnectionStatus.CONNECTING);\n    };\n\n    connection.on(\"connect\", setConnectingStatus);\n    connection.on(\"reconnect\", setConnectingStatus);\n\n    connection.on(\"disconnect\", () => {\n      if (!this.shouldReconnect) {\n        connection.reconnect = false;\n        connection.disconnect();\n        this._setStatus(ConnectionStatus.DISCONNECTED);\n      }\n      // TODO: Figure out how to set RECONNECT_WAIT state here. Currently it will stay on\n      // TODO: Connecting... forever\n    });\n\n    connection.on(\"error\", (err) => {\n      console.warn(`Connection on port ${port} encountered an error.`, err);\n\n      this._setStatus(ConnectionStatus.DISCONNECTED);\n      this.emit(ConnectionEvent.ERROR, `Connection on port ${port} encountered an error.\\n${err}`);\n    });\n\n    this.connection = connection;\n    connection.connect(port);\n  }\n\n  /**\n   * Terminate the current connection.\n   */\n  public disconnect(): void {\n    // Prevent reconnections and disconnect\n    if (this.connection) {\n      this.connection.reconnect = false;\n      this.connection.disconnect();\n      this.connection = null;\n    }\n\n    if (this.client) {\n      this.client.destroy();\n    }\n  }\n\n  private _getInitialCommState(data: Buffer): CommunicationState {\n    if (data.length < 13) {\n      return CommunicationState.LEGACY;\n    }\n\n    const openingBytes = Buffer.from([0x7b, 0x69, 0x04, 0x74, 0x79, 0x70, 0x65, 0x55, 0x01]);\n\n    const dataStart = data.slice(4, 13);\n\n    return dataStart.equals(openingBytes) ? CommunicationState.NORMAL : CommunicationState.LEGACY;\n  }\n\n  private _processMessage(message: CommunicationMessage): void {\n    this.emit(ConnectionEvent.MESSAGE, message);\n    switch (message.type) {\n      case CommunicationType.KEEP_ALIVE:\n        // console.log(\"Keep alive message received\");\n\n        // TODO: This is the jankiest shit ever but it will allow for relay connections not\n        // TODO: to time out as long as the main connection is still receving keep alive messages\n        // TODO: Need to figure out a better solution for this. There should be no need to have an\n        // TODO: active Wii connection for the relay connection to keep itself alive\n        const fakeKeepAlive = Buffer.from(NETWORK_MESSAGE);\n        this._handleReplayData(fakeKeepAlive);\n\n        break;\n      case CommunicationType.REPLAY:\n        const readPos = Uint8Array.from(message.payload.pos);\n        const cmp = Buffer.compare(this.connDetails.gameDataCursor as Uint8Array, readPos);\n        if (!message.payload.forcePos && cmp !== 0) {\n          // The readPos is not the one we are waiting on, throw error\n          throw new Error(\n            `Position of received data is incorrect. Expected: ${this.connDetails.gameDataCursor.toString()}, Received: ${readPos.toString()}`,\n          );\n        }\n\n        if (message.payload.forcePos) {\n          console.warn(\n            \"Overflow occured in Nintendont, data has likely been skipped and replay corrupted. \" +\n              \"Expected, Received:\",\n            this.connDetails.gameDataCursor,\n            readPos,\n          );\n        }\n\n        this.connDetails.gameDataCursor = Uint8Array.from(message.payload.nextPos);\n\n        const data = Uint8Array.from(message.payload.data);\n        this._handleReplayData(data);\n        break;\n      case CommunicationType.HANDSHAKE:\n        const { nick, nintendontVersion } = message.payload;\n        if (nick) {\n          this.connDetails.consoleNick = nick;\n        }\n        const tokenBuf = Buffer.from(message.payload.clientToken);\n        this.connDetails.clientToken = tokenBuf.readUInt32BE(0);\n        if (nintendontVersion) {\n          this.connDetails.version = nintendontVersion;\n        }\n        this.connDetails.gameDataCursor = Uint8Array.from(message.payload.pos);\n        this.emit(ConnectionEvent.HANDSHAKE, this.connDetails);\n        break;\n      default:\n        // Should this be an error?\n        break;\n    }\n  }\n\n  private _handleReplayData(data: Uint8Array): void {\n    this.emit(ConnectionEvent.DATA, data);\n  }\n\n  private _setStatus(status: ConnectionStatus): void {\n    // Don't fire the event if the status hasn't actually changed\n    if (this.connectionStatus !== status) {\n      this.connectionStatus = status;\n      this.emit(ConnectionEvent.STATUS_CHANGE, this.connectionStatus);\n    }\n  }\n}\n","import { EventEmitter } from \"events\";\n\nimport type { Connection, ConnectionDetails, ConnectionSettings } from \"./types\";\nimport { ConnectionEvent, ConnectionStatus, Ports } from \"./types\";\n\nconst MAX_PEERS = 32;\n\nexport enum DolphinMessageType {\n  CONNECT_REPLY = \"connect_reply\",\n  GAME_EVENT = \"game_event\",\n  START_GAME = \"start_game\",\n  END_GAME = \"end_game\",\n}\n\nexport class DolphinConnection extends EventEmitter implements Connection {\n  private ipAddress: string;\n  private port: number;\n  private connectionStatus = ConnectionStatus.DISCONNECTED;\n  private gameCursor = 0;\n  private nickname = \"unknown\";\n  private version = \"\";\n  private peer: any | null = null;\n\n  public constructor() {\n    super();\n    this.ipAddress = \"0.0.0.0\";\n    this.port = Ports.DEFAULT;\n  }\n\n  /**\n   * @returns The current connection status.\n   */\n  public getStatus(): ConnectionStatus {\n    return this.connectionStatus;\n  }\n\n  /**\n   * @returns The IP address and port of the current connection.\n   */\n  public getSettings(): ConnectionSettings {\n    return {\n      ipAddress: this.ipAddress,\n      port: this.port,\n    };\n  }\n\n  public getDetails(): ConnectionDetails {\n    return {\n      consoleNick: this.nickname,\n      gameDataCursor: this.gameCursor,\n      version: this.version,\n    };\n  }\n\n  public async connect(ip: string, port: number): Promise<void> {\n    console.log(`Connecting to: ${ip}:${port}`);\n    this.ipAddress = ip;\n    this.port = port;\n\n    const enet = await import(\"enet\");\n    // Create the enet client\n    const client = enet.createClient({ peers: MAX_PEERS, channels: 3, down: 0, up: 0 }, (err) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n    });\n\n    this.peer = client.connect(\n      {\n        address: this.ipAddress,\n        port: this.port,\n      },\n      3,\n      1337, // Data to send, not sure what this is or what this represents\n      (err: any, newPeer: any) => {\n        if (err) {\n          console.error(err);\n          return;\n        }\n\n        newPeer.ping();\n        this.emit(ConnectionEvent.CONNECT);\n        this._setStatus(ConnectionStatus.CONNECTED);\n      },\n    );\n\n    this.peer.on(\"connect\", () => {\n      // Reset the game cursor to the beginning of the game. Do we need to do this or\n      // should it just continue from where it left off?\n      this.gameCursor = 0;\n\n      const request = {\n        type: \"connect_request\",\n        cursor: this.gameCursor,\n      };\n      const packet = new enet.Packet(JSON.stringify(request), enet.PACKET_FLAG.RELIABLE);\n      this.peer.send(0, packet);\n    });\n\n    this.peer.on(\"message\", (packet: any) => {\n      const data = packet.data();\n      if (data.length === 0) {\n        return;\n      }\n\n      const dataString = data.toString(\"ascii\");\n      const message = JSON.parse(dataString);\n      const { dolphin_closed } = message;\n      if (dolphin_closed) {\n        // We got a disconnection request\n        this.disconnect();\n        return;\n      }\n      this.emit(ConnectionEvent.MESSAGE, message);\n      switch (message.type) {\n        case DolphinMessageType.CONNECT_REPLY:\n          this.connectionStatus = ConnectionStatus.CONNECTED;\n          this.gameCursor = message.cursor;\n          this.nickname = message.nick;\n          this.version = message.version;\n          this.emit(ConnectionEvent.HANDSHAKE, this.getDetails());\n          break;\n        case DolphinMessageType.GAME_EVENT: {\n          const { payload } = message;\n          //TODO: remove after game start and end messages have been in stable Ishii for a bit\n          if (!payload) {\n            // We got a disconnection request\n            this.disconnect();\n            return;\n          }\n\n          this._updateCursor(message, dataString);\n\n          const gameData = Buffer.from(payload, \"base64\");\n          this._handleReplayData(gameData);\n          break;\n        }\n        case DolphinMessageType.START_GAME: {\n          this._updateCursor(message, dataString);\n          break;\n        }\n        case DolphinMessageType.END_GAME: {\n          this._updateCursor(message, dataString);\n          break;\n        }\n      }\n    });\n\n    this.peer.on(\"disconnect\", () => {\n      this.disconnect();\n    });\n\n    this._setStatus(ConnectionStatus.CONNECTING);\n  }\n\n  public disconnect(): void {\n    if (this.peer) {\n      this.peer.disconnect();\n      this.peer = null;\n    }\n    this._setStatus(ConnectionStatus.DISCONNECTED);\n  }\n\n  private _handleReplayData(data: Uint8Array): void {\n    this.emit(ConnectionEvent.DATA, data);\n  }\n\n  private _setStatus(status: ConnectionStatus): void {\n    // Don't fire the event if the status hasn't actually changed\n    if (this.connectionStatus !== status) {\n      this.connectionStatus = status;\n      this.emit(ConnectionEvent.STATUS_CHANGE, this.connectionStatus);\n    }\n  }\n\n  private _updateCursor(message: { cursor: number; next_cursor: number }, dataString: string): void {\n    const { cursor, next_cursor } = message;\n\n    if (this.gameCursor !== cursor) {\n      const err = new Error(\n        `Unexpected game data cursor. Expected: ${this.gameCursor} but got: ${cursor}. Payload: ${dataString}`,\n      );\n      console.warn(err);\n      this.emit(ConnectionEvent.ERROR, err);\n    }\n\n    this.gameCursor = next_cursor;\n  }\n}\n","import { map } from \"lodash\";\n\nexport function toHalfwidth(str: string): string {\n  // Converts a fullwidth character to halfwidth\n  const convertChar = (charCode: number): number => {\n    /**\n     * Standard full width encodings\n     * https://en.wikipedia.org/wiki/Halfwidth_and_Fullwidth_Forms_(Unicode_block)\n     */\n    if (charCode > 0xff00 && charCode < 0xff5f) {\n      return 0x0020 + (charCode - 0xff00);\n    }\n\n    // space:\n    if (charCode === 0x3000) {\n      return 0x0020;\n    }\n\n    /**\n     * Exceptions found in Melee/Japanese keyboards\n     */\n    // single quote: '\n    if (charCode === 0x2019) {\n      return 0x0027;\n    }\n\n    // double quote: \"\n    if (charCode === 0x201d) {\n      return 0x0022;\n    }\n\n    return charCode;\n  };\n\n  const ret = map(str, (char) => convertChar(char.charCodeAt(0)));\n\n  return String.fromCharCode(...ret);\n}\n","import { decode } from \"@shelacek/ubjson\";\nimport fs from \"fs\";\nimport iconv from \"iconv-lite\";\nimport { mapValues } from \"lodash\";\n\nimport type { EventCallbackFunc, EventPayloadTypes, MetadataType, PlayerType, SelfInducedSpeedsType } from \"../types\";\nimport { Command } from \"../types\";\nimport { toHalfwidth } from \"./fullwidth\";\n\nexport enum SlpInputSource {\n  BUFFER = \"buffer\",\n  FILE = \"file\",\n}\n\nexport interface SlpReadInput {\n  source: SlpInputSource;\n  filePath?: string;\n  buffer?: Buffer;\n}\n\nexport type SlpRefType = SlpFileSourceRef | SlpBufferSourceRef;\n\nexport interface SlpFileType {\n  ref: SlpRefType;\n  rawDataPosition: number;\n  rawDataLength: number;\n  metadataPosition: number;\n  metadataLength: number;\n  messageSizes: {\n    [command: number]: number;\n  };\n}\n\nexport interface SlpFileSourceRef {\n  source: SlpInputSource;\n  fileDescriptor: number;\n}\n\nexport interface SlpBufferSourceRef {\n  source: SlpInputSource;\n  buffer: Buffer;\n}\n\nfunction getRef(input: SlpReadInput): SlpRefType {\n  switch (input.source) {\n    case SlpInputSource.FILE:\n      if (!input.filePath) {\n        throw new Error(\"File source requires a file path\");\n      }\n      const fd = fs.openSync(input.filePath, \"r\");\n      return {\n        source: input.source,\n        fileDescriptor: fd,\n      } as SlpFileSourceRef;\n    case SlpInputSource.BUFFER:\n      return {\n        source: input.source,\n        buffer: input.buffer,\n      } as SlpBufferSourceRef;\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\nfunction readRef(ref: SlpRefType, buffer: Uint8Array, offset: number, length: number, position: number): number {\n  switch (ref.source) {\n    case SlpInputSource.FILE:\n      return fs.readSync((ref as SlpFileSourceRef).fileDescriptor, buffer, offset, length, position);\n    case SlpInputSource.BUFFER:\n      return (ref as SlpBufferSourceRef).buffer.copy(buffer, offset, position, position + length);\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\nfunction getLenRef(ref: SlpRefType): number {\n  switch (ref.source) {\n    case SlpInputSource.FILE:\n      const fileStats = fs.fstatSync((ref as SlpFileSourceRef).fileDescriptor);\n      return fileStats.size;\n    case SlpInputSource.BUFFER:\n      return (ref as SlpBufferSourceRef).buffer.length;\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\n/**\n * Opens a file at path\n */\nexport function openSlpFile(input: SlpReadInput): SlpFileType {\n  const ref = getRef(input);\n\n  const rawDataPosition = getRawDataPosition(ref);\n  const rawDataLength = getRawDataLength(ref, rawDataPosition);\n  const metadataPosition = rawDataPosition + rawDataLength + 10; // remove metadata string\n  const metadataLength = getMetadataLength(ref, metadataPosition);\n  const messageSizes = getMessageSizes(ref, rawDataPosition);\n\n  return {\n    ref,\n    rawDataPosition,\n    rawDataLength,\n    metadataPosition,\n    metadataLength,\n    messageSizes,\n  };\n}\n\nexport function closeSlpFile(file: SlpFileType): void {\n  switch (file.ref.source) {\n    case SlpInputSource.FILE:\n      fs.closeSync((file.ref as SlpFileSourceRef).fileDescriptor);\n      break;\n  }\n}\n\n// This function gets the position where the raw data starts\nfunction getRawDataPosition(ref: SlpRefType): number {\n  const buffer = new Uint8Array(1);\n  readRef(ref, buffer, 0, buffer.length, 0);\n\n  if (buffer[0] === 0x36) {\n    return 0;\n  }\n\n  if (buffer[0] !== \"{\".charCodeAt(0)) {\n    return 0; // return error?\n  }\n\n  return 15;\n}\n\nfunction getRawDataLength(ref: SlpRefType, position: number): number {\n  const fileSize = getLenRef(ref);\n  if (position === 0) {\n    return fileSize;\n  }\n\n  const buffer = new Uint8Array(4);\n  readRef(ref, buffer, 0, buffer.length, position - 4);\n\n  const rawDataLen = (buffer[0]! << 24) | (buffer[1]! << 16) | (buffer[2]! << 8) | buffer[3]!;\n  if (rawDataLen > 0) {\n    // If this method manages to read a number, it's probably trustworthy\n    return rawDataLen;\n  }\n\n  // If the above does not return a valid data length,\n  // return a file size based on file length. This enables\n  // some support for severed files\n  return fileSize - position;\n}\n\nfunction getMetadataLength(ref: SlpRefType, position: number): number {\n  const len = getLenRef(ref);\n  return len - position - 1;\n}\n\nfunction getMessageSizes(\n  ref: SlpRefType,\n  position: number,\n): {\n  [command: number]: number;\n} {\n  const messageSizes: {\n    [command: number]: number;\n  } = {};\n  // Support old file format\n  if (position === 0) {\n    messageSizes[0x36] = 0x140;\n    messageSizes[0x37] = 0x6;\n    messageSizes[0x38] = 0x46;\n    messageSizes[0x39] = 0x1;\n    return messageSizes;\n  }\n\n  const buffer = new Uint8Array(2);\n  readRef(ref, buffer, 0, buffer.length, position);\n  if (buffer[0] !== Command.MESSAGE_SIZES) {\n    return {};\n  }\n\n  const payloadLength = buffer[1] as number;\n  (messageSizes[0x35] as any) = payloadLength;\n\n  const messageSizesBuffer = new Uint8Array(payloadLength - 1);\n  readRef(ref, messageSizesBuffer, 0, messageSizesBuffer.length, position + 2);\n  for (let i = 0; i < payloadLength - 1; i += 3) {\n    const command = messageSizesBuffer[i] as number;\n\n    // Get size of command\n    (messageSizes[command] as any) = (messageSizesBuffer[i + 1]! << 8) | messageSizesBuffer[i + 2]!;\n  }\n\n  return messageSizes;\n}\n\n/**\n * Iterates through slp events and parses payloads\n */\nexport function iterateEvents(\n  slpFile: SlpFileType,\n  callback: EventCallbackFunc,\n  startPos: number | null = null,\n): number {\n  const ref = slpFile.ref;\n\n  let readPosition = startPos !== null && startPos > 0 ? startPos : slpFile.rawDataPosition;\n  const stopReadingAt = slpFile.rawDataPosition + slpFile.rawDataLength;\n\n  // Generate read buffers for each\n  const commandPayloadBuffers = mapValues(slpFile.messageSizes, (size) => new Uint8Array(size + 1));\n\n  const commandByteBuffer = new Uint8Array(1);\n  while (readPosition < stopReadingAt) {\n    readRef(ref, commandByteBuffer, 0, 1, readPosition);\n    const commandByte = commandByteBuffer[0] as number;\n    const buffer = commandPayloadBuffers[commandByte];\n    if (buffer === undefined) {\n      // If we don't have an entry for this command, return false to indicate failed read\n      return readPosition;\n    }\n\n    if (buffer.length > stopReadingAt - readPosition) {\n      return readPosition;\n    }\n\n    readRef(ref, buffer, 0, buffer.length, readPosition);\n    const parsedPayload = parseMessage(commandByte, buffer);\n    const shouldStop = callback(commandByte, parsedPayload);\n    if (shouldStop) {\n      break;\n    }\n\n    readPosition += buffer.length;\n  }\n\n  return readPosition;\n}\n\nexport function parseMessage(command: Command, payload: Uint8Array): EventPayloadTypes | null {\n  const view = new DataView(payload.buffer);\n  switch (command) {\n    case Command.GAME_START:\n      const getPlayerObject = (playerIndex: number): PlayerType => {\n        // Controller Fix stuff\n        const cfOffset = playerIndex * 0x8;\n        const dashback = readUint32(view, 0x141 + cfOffset);\n        const shieldDrop = readUint32(view, 0x145 + cfOffset);\n        let controllerFix = \"None\";\n        if (dashback !== shieldDrop) {\n          controllerFix = \"Mixed\";\n        } else if (dashback === 1) {\n          controllerFix = \"UCF\";\n        } else if (dashback === 2) {\n          controllerFix = \"Dween\";\n        }\n\n        // Nametag stuff\n        const nametagLength = 0x10;\n        const nametagOffset = playerIndex * nametagLength;\n        const nametagStart = 0x161 + nametagOffset;\n        const nametagBuf = payload.slice(nametagStart, nametagStart + nametagLength);\n        const nameTagString = iconv\n          .decode(nametagBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const nametag = nameTagString ? toHalfwidth(nameTagString) : \"\";\n\n        // Display name\n        const displayNameLength = 0x1f;\n        const displayNameOffset = playerIndex * displayNameLength;\n        const displayNameStart = 0x1a5 + displayNameOffset;\n        const displayNameBuf = payload.slice(displayNameStart, displayNameStart + displayNameLength);\n        const displayNameString = iconv\n          .decode(displayNameBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const displayName = displayNameString ? toHalfwidth(displayNameString) : \"\";\n\n        // Connect code\n        const connectCodeLength = 0xa;\n        const connectCodeOffset = playerIndex * connectCodeLength;\n        const connectCodeStart = 0x221 + connectCodeOffset;\n        const connectCodeBuf = payload.slice(connectCodeStart, connectCodeStart + connectCodeLength);\n        const connectCodeString = iconv\n          .decode(connectCodeBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const connectCode = connectCodeString ? toHalfwidth(connectCodeString) : \"\";\n\n        const userIdLength = 0x1d;\n        const userIdOffset = playerIndex * userIdLength;\n        const userIdStart = 0x249 + userIdOffset;\n        const userIdBuf = payload.slice(userIdStart, userIdStart + userIdLength);\n        const userIdString = iconv\n          .decode(userIdBuf as Buffer, \"utf8\")\n          .split(\"\\0\")\n          .shift();\n        const userId = userIdString ?? \"\";\n\n        const offset = playerIndex * 0x24;\n        return {\n          playerIndex,\n          port: playerIndex + 1,\n          characterId: readUint8(view, 0x65 + offset),\n          characterColor: readUint8(view, 0x68 + offset),\n          startStocks: readUint8(view, 0x67 + offset),\n          type: readUint8(view, 0x66 + offset),\n          teamId: readUint8(view, 0x6e + offset),\n          controllerFix,\n          nametag,\n          displayName,\n          connectCode,\n          userId,\n        };\n      };\n      return {\n        slpVersion: `${readUint8(view, 0x1)}.${readUint8(view, 0x2)}.${readUint8(view, 0x3)}`,\n        isTeams: readBool(view, 0xd),\n        isPAL: readBool(view, 0x1a1),\n        stageId: readUint16(view, 0x13),\n        players: [0, 1, 2, 3].map(getPlayerObject),\n        scene: readUint8(view, 0x1a3),\n        gameMode: readUint8(view, 0x1a4),\n      };\n    case Command.PRE_FRAME_UPDATE:\n      return {\n        frame: readInt32(view, 0x1),\n        playerIndex: readUint8(view, 0x5),\n        isFollower: readBool(view, 0x6),\n        seed: readUint32(view, 0x7),\n        actionStateId: readUint16(view, 0xb),\n        positionX: readFloat(view, 0xd),\n        positionY: readFloat(view, 0x11),\n        facingDirection: readFloat(view, 0x15),\n        joystickX: readFloat(view, 0x19),\n        joystickY: readFloat(view, 0x1d),\n        cStickX: readFloat(view, 0x21),\n        cStickY: readFloat(view, 0x25),\n        trigger: readFloat(view, 0x29),\n        buttons: readUint32(view, 0x2d),\n        physicalButtons: readUint16(view, 0x31),\n        physicalLTrigger: readFloat(view, 0x33),\n        physicalRTrigger: readFloat(view, 0x37),\n        percent: readFloat(view, 0x3c),\n      };\n    case Command.POST_FRAME_UPDATE:\n      const selfInducedSpeeds: SelfInducedSpeedsType = {\n        airX: readFloat(view, 0x35),\n        y: readFloat(view, 0x39),\n        attackX: readFloat(view, 0x3d),\n        attackY: readFloat(view, 0x41),\n        groundX: readFloat(view, 0x45),\n      };\n      return {\n        frame: readInt32(view, 0x1),\n        playerIndex: readUint8(view, 0x5),\n        isFollower: readBool(view, 0x6),\n        internalCharacterId: readUint8(view, 0x7),\n        actionStateId: readUint16(view, 0x8),\n        positionX: readFloat(view, 0xa),\n        positionY: readFloat(view, 0xe),\n        facingDirection: readFloat(view, 0x12),\n        percent: readFloat(view, 0x16),\n        shieldSize: readFloat(view, 0x1a),\n        lastAttackLanded: readUint8(view, 0x1e),\n        currentComboCount: readUint8(view, 0x1f),\n        lastHitBy: readUint8(view, 0x20),\n        stocksRemaining: readUint8(view, 0x21),\n        actionStateCounter: readFloat(view, 0x22),\n        miscActionState: readFloat(view, 0x2b),\n        isAirborne: readBool(view, 0x2f),\n        lastGroundId: readUint16(view, 0x30),\n        jumpsRemaining: readUint8(view, 0x32),\n        lCancelStatus: readUint8(view, 0x33),\n        hurtboxCollisionState: readUint8(view, 0x34),\n        selfInducedSpeeds: selfInducedSpeeds,\n      };\n    case Command.ITEM_UPDATE:\n      return {\n        frame: readInt32(view, 0x1),\n        typeId: readUint16(view, 0x5),\n        state: readUint8(view, 0x7),\n        facingDirection: readFloat(view, 0x8),\n        velocityX: readFloat(view, 0xc),\n        velocityY: readFloat(view, 0x10),\n        positionX: readFloat(view, 0x14),\n        positionY: readFloat(view, 0x18),\n        damageTaken: readUint16(view, 0x1c),\n        expirationTimer: readFloat(view, 0x1e),\n        spawnId: readUint32(view, 0x22),\n        missileType: readUint8(view, 0x26),\n        turnipFace: readUint8(view, 0x27),\n        chargeShotLaunched: readUint8(view, 0x28),\n        chargePower: readUint8(view, 0x29),\n        owner: readInt8(view, 0x2a),\n      };\n    case Command.FRAME_BOOKEND:\n      return {\n        frame: readInt32(view, 0x1),\n        latestFinalizedFrame: readInt32(view, 0x5),\n      };\n    case Command.GAME_END:\n      return {\n        gameEndMethod: readUint8(view, 0x1),\n        lrasInitiatorIndex: readInt8(view, 0x2),\n      };\n    default:\n      return null;\n  }\n}\n\nfunction canReadFromView(view: DataView, offset: number, length: number): boolean {\n  const viewLength = view.byteLength;\n  return offset + length <= viewLength;\n}\n\nfunction readFloat(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getFloat32(offset);\n}\n\nfunction readInt32(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getInt32(offset);\n}\n\nfunction readInt8(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return view.getInt8(offset);\n}\n\nfunction readUint32(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getUint32(offset);\n}\n\nfunction readUint16(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 2)) {\n    return null;\n  }\n\n  return view.getUint16(offset);\n}\n\nfunction readUint8(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return view.getUint8(offset);\n}\n\nfunction readBool(view: DataView, offset: number): boolean | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return !!view.getUint8(offset);\n}\n\nexport function getMetadata(slpFile: SlpFileType): MetadataType | null {\n  if (slpFile.metadataLength <= 0) {\n    // This will happen on a severed incomplete file\n    // $FlowFixMe\n    return null;\n  }\n\n  const buffer = new Uint8Array(slpFile.metadataLength);\n\n  readRef(slpFile.ref, buffer, 0, buffer.length, slpFile.metadataPosition);\n\n  let metadata = null;\n  try {\n    metadata = decode(buffer);\n  } catch (ex) {\n    // Do nothing\n    // console.log(ex);\n  }\n\n  // $FlowFixMe\n  return metadata;\n}\n","import type { WritableOptions } from \"stream\";\nimport { Writable } from \"stream\";\n\nimport { NETWORK_MESSAGE } from \"../console\";\nimport type { EventPayloadTypes } from \"../types\";\nimport { Command } from \"../types\";\nimport { parseMessage } from \"./slpReader\";\n\nexport enum SlpStreamMode {\n  AUTO = \"AUTO\", // Always reading data, but errors on invalid command\n  MANUAL = \"MANUAL\", // Stops parsing inputs after a valid game end command, requires manual restarting\n}\n\nconst defaultSettings = {\n  suppressErrors: false,\n  mode: SlpStreamMode.AUTO,\n};\n\nexport type SlpStreamSettings = typeof defaultSettings;\n\nexport type MessageSizes = Map<Command, number>;\n\nexport interface SlpCommandEventPayload {\n  command: Command;\n  payload: EventPayloadTypes | MessageSizes;\n}\n\nexport interface SlpRawEventPayload {\n  command: Command;\n  payload: Buffer;\n}\n\nexport enum SlpStreamEvent {\n  RAW = \"slp-raw\",\n  COMMAND = \"slp-command\",\n}\n\n/**\n * SlpStream is a writable stream of Slippi data. It passes the data being written in\n * and emits an event based on what kind of Slippi messages were processed.\n *\n * SlpStream emits two events: \"slp-raw\" and \"slp-command\". The \"slp-raw\" event emits the raw buffer\n * bytes whenever it processes each command. You can manually parse this or write it to a\n * file. The \"slp-command\" event returns the parsed payload which you can access the attributes.\n *\n * @class SlpStream\n * @extends {Writable}\n */\nexport class SlpStream extends Writable {\n  private gameEnded = false; // True only if in manual mode and the game has completed\n  private settings: SlpStreamSettings;\n  private payloadSizes: MessageSizes | null = null;\n  private previousBuffer: Uint8Array = Buffer.from([]);\n\n  /**\n   *Creates an instance of SlpStream.\n   * @param {Partial<SlpStreamSettings>} [slpOptions]\n   * @param {WritableOptions} [opts]\n   * @memberof SlpStream\n   */\n  public constructor(slpOptions?: Partial<SlpStreamSettings>, opts?: WritableOptions) {\n    super(opts);\n    this.settings = Object.assign({}, defaultSettings, slpOptions);\n  }\n\n  public restart(): void {\n    this.gameEnded = false;\n    this.payloadSizes = null;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public _write(newData: Buffer, encoding: string, callback: (error?: Error | null, data?: any) => void): void {\n    if (encoding !== \"buffer\") {\n      throw new Error(`Unsupported stream encoding. Expected 'buffer' got '${encoding}'.`);\n    }\n\n    // Join the current data with the old data\n    const data = Uint8Array.from(Buffer.concat([this.previousBuffer, newData]));\n\n    // Clear previous data\n    this.previousBuffer = Buffer.from([]);\n\n    const dataView = new DataView(data.buffer);\n\n    // Iterate through the data\n    let index = 0;\n    while (index < data.length) {\n      // We want to filter out the network messages\n      if (Buffer.from(data.slice(index, index + 5)).toString() === NETWORK_MESSAGE) {\n        index += 5;\n        continue;\n      }\n\n      // Make sure we have enough data to read a full payload\n      const command = dataView.getUint8(index);\n      let payloadSize = 0;\n      if (this.payloadSizes) {\n        payloadSize = this.payloadSizes.get(command) ?? 0;\n      }\n      const remainingLen = data.length - index;\n      if (remainingLen < payloadSize + 1) {\n        // If remaining length is not long enough for full payload, save the remaining\n        // data until we receive more data. The data has been split up.\n        this.previousBuffer = data.slice(index);\n        break;\n      }\n\n      // Only process if the game is still going\n      if (this.settings.mode === SlpStreamMode.MANUAL && this.gameEnded) {\n        break;\n      }\n\n      // Increment by one for the command byte\n      index += 1;\n\n      const payloadPtr = data.slice(index);\n      const payloadDataView = new DataView(data.buffer, index);\n      let payloadLen = 0;\n      try {\n        payloadLen = this._processCommand(command, payloadPtr, payloadDataView);\n      } catch (err) {\n        // Only throw the error if we're not suppressing the errors\n        if (!this.settings.suppressErrors) {\n          throw err;\n        }\n        payloadLen = 0;\n      }\n      index += payloadLen;\n    }\n\n    callback();\n  }\n\n  private _writeCommand(command: Command, entirePayload: Uint8Array, payloadSize: number): Uint8Array {\n    const payloadBuf = entirePayload.slice(0, payloadSize);\n    const bufToWrite = Buffer.concat([Buffer.from([command]), payloadBuf]);\n    // Forward the raw buffer onwards\n    this.emit(SlpStreamEvent.RAW, {\n      command: command,\n      payload: bufToWrite,\n    } as SlpRawEventPayload);\n    return new Uint8Array(bufToWrite);\n  }\n\n  private _processCommand(command: Command, entirePayload: Uint8Array, dataView: DataView): number {\n    // Handle the message size command\n    if (command === Command.MESSAGE_SIZES) {\n      const payloadSize = dataView.getUint8(0);\n      // Set the payload sizes\n      this.payloadSizes = processReceiveCommands(dataView);\n      // Emit the raw command event\n      this._writeCommand(command, entirePayload, payloadSize);\n      this.emit(SlpStreamEvent.COMMAND, {\n        command: command,\n        payload: this.payloadSizes,\n      } as SlpCommandEventPayload);\n      return payloadSize;\n    }\n\n    let payloadSize = 0;\n    if (this.payloadSizes) {\n      payloadSize = this.payloadSizes.get(command) ?? 0;\n    }\n\n    // Fetch the payload and parse it\n    let payload: Uint8Array;\n    let parsedPayload: EventPayloadTypes | null = null;\n    if (payloadSize > 0) {\n      payload = this._writeCommand(command, entirePayload, payloadSize);\n      parsedPayload = parseMessage(command, payload);\n    }\n    if (!parsedPayload) {\n      return payloadSize;\n    }\n\n    switch (command) {\n      case Command.GAME_END:\n        // Stop parsing data until we manually restart the stream\n        if (this.settings.mode === SlpStreamMode.MANUAL) {\n          this.gameEnded = true;\n        }\n        break;\n    }\n\n    this.emit(SlpStreamEvent.COMMAND, {\n      command: command,\n      payload: parsedPayload,\n    } as SlpCommandEventPayload);\n    return payloadSize;\n  }\n}\n\nconst processReceiveCommands = (dataView: DataView): MessageSizes => {\n  const payloadSizes = new Map<Command, number>();\n  const payloadLen = dataView.getUint8(0);\n  for (let i = 1; i < payloadLen; i += 3) {\n    const commandByte = dataView.getUint8(i);\n    const payloadSize = dataView.getUint16(i + 1);\n    payloadSizes.set(commandByte, payloadSize);\n  }\n  return payloadSizes;\n};\n","import type { WriteStream } from \"fs\";\nimport fs from \"fs\";\nimport { forEach } from \"lodash\";\nimport type { Moment } from \"moment\";\nimport moment from \"moment\";\nimport type { WritableOptions } from \"stream\";\nimport { Writable } from \"stream\";\n\nimport type { GameStartType, PostFrameUpdateType } from \"../types\";\nimport { Command } from \"../types\";\nimport type { SlpCommandEventPayload } from \"./slpStream\";\nimport { SlpStream, SlpStreamEvent, SlpStreamMode } from \"./slpStream\";\n\nconst DEFAULT_NICKNAME = \"unknown\";\n\nexport interface SlpFileMetadata {\n  startTime: Moment;\n  lastFrame: number;\n  players: {\n    [playerIndex: number]: {\n      characterUsage: {\n        [internalCharacterId: number]: number;\n      };\n      names: {\n        netplay: string;\n        code: string;\n      };\n    };\n  };\n  consoleNickname?: string;\n}\n\n/**\n * SlpFile is a class that wraps a Writable stream. It handles the writing of the binary\n * header and footer, and also handles the overwriting of the raw data length.\n *\n * @class SlpFile\n * @extends {Writable}\n */\nexport class SlpFile extends Writable {\n  private filePath: string;\n  private metadata: SlpFileMetadata;\n  private fileStream: WriteStream | null = null;\n  private rawDataLength = 0;\n  private slpStream: SlpStream;\n  private usesExternalStream = false;\n\n  /**\n   * Creates an instance of SlpFile.\n   * @param {string} filePath The file location to write to.\n   * @param {WritableOptions} [opts] Options for writing.\n   * @memberof SlpFile\n   */\n  public constructor(filePath: string, slpStream?: SlpStream, opts?: WritableOptions) {\n    super(opts);\n    this.filePath = filePath;\n    this.metadata = {\n      consoleNickname: DEFAULT_NICKNAME,\n      startTime: moment(),\n      lastFrame: -124,\n      players: {},\n    };\n    this.usesExternalStream = Boolean(slpStream);\n\n    // Create a new SlpStream if one wasn't already provided\n    // This SLP stream represents a single game not multiple, so use manual mode\n    this.slpStream = slpStream ? slpStream : new SlpStream({ mode: SlpStreamMode.MANUAL });\n\n    this._setupListeners();\n    this._initializeNewGame(this.filePath);\n  }\n\n  /**\n   * Get the current file path being written to.\n   *\n   * @returns {string} The location of the current file path\n   * @memberof SlpFile\n   */\n  public path(): string {\n    return this.filePath;\n  }\n\n  /**\n   * Sets the metadata of the Slippi file, such as consoleNickname, lastFrame, and players.\n   * @param metadata The metadata to be written\n   */\n  public setMetadata(metadata: Partial<SlpFileMetadata>): void {\n    this.metadata = Object.assign({}, this.metadata, metadata);\n  }\n\n  public _write(chunk: Uint8Array, encoding: string, callback: (error?: Error | null) => void): void {\n    if (encoding !== \"buffer\") {\n      throw new Error(`Unsupported stream encoding. Expected 'buffer' got '${encoding}'.`);\n    }\n    // Write it to the file\n    if (this.fileStream) {\n      this.fileStream.write(chunk);\n    }\n\n    // Parse the data manually if it's an internal stream\n    if (!this.usesExternalStream) {\n      this.slpStream.write(chunk);\n    }\n\n    // Keep track of the bytes we've written\n    this.rawDataLength += chunk.length;\n    callback();\n  }\n\n  /**\n   * Here we define what to do on each command. We need to populate the metadata field\n   * so we keep track of the latest frame, as well as the number of frames each character has\n   * been used.\n   *\n   * @param data The parsed data from a SlpStream\n   */\n  private _onCommand(data: SlpCommandEventPayload): void {\n    const { command, payload } = data;\n    switch (command) {\n      case Command.GAME_START:\n        const { players } = payload as GameStartType;\n        forEach(players, (player) => {\n          if (player.type === 3) {\n            return;\n          }\n\n          this.metadata.players[player.playerIndex] = {\n            characterUsage: {},\n            names: {\n              netplay: player.displayName,\n              code: player.connectCode,\n            },\n          };\n        });\n        break;\n      case Command.POST_FRAME_UPDATE:\n        // Here we need to update some metadata fields\n        const { frame, playerIndex, isFollower, internalCharacterId } = payload as PostFrameUpdateType;\n        if (isFollower) {\n          // No need to do this for follower\n          break;\n        }\n\n        // Update frame index\n        this.metadata.lastFrame = frame!;\n\n        // Update character usage\n        const prevPlayer = this.metadata.players[playerIndex!];\n        const characterUsage = prevPlayer!.characterUsage;\n        const curCharFrames = characterUsage[internalCharacterId!] || 0;\n        const player = {\n          ...prevPlayer,\n          characterUsage: {\n            ...characterUsage,\n            [internalCharacterId!]: curCharFrames + 1,\n          },\n        };\n        (this.metadata.players as any)[playerIndex!] = player;\n        break;\n    }\n  }\n\n  private _setupListeners(): void {\n    const streamListener = (data: SlpCommandEventPayload): void => {\n      this._onCommand(data);\n    };\n    this.slpStream.on(SlpStreamEvent.COMMAND, streamListener);\n\n    this.on(\"finish\", () => {\n      // Update file with bytes written\n      const fd = fs.openSync(this.filePath, \"r+\");\n      fs.writeSync(fd, createUInt32Buffer(this.rawDataLength), 0, 4, 11);\n      fs.closeSync(fd);\n\n      // Unsubscribe from the stream\n      this.slpStream.removeListener(SlpStreamEvent.COMMAND, streamListener);\n      // Terminate the internal stream\n      if (!this.usesExternalStream) {\n        this.slpStream.end();\n      }\n    });\n  }\n\n  private _initializeNewGame(filePath: string): void {\n    this.fileStream = fs.createWriteStream(filePath, {\n      encoding: \"binary\",\n    });\n\n    const header = Buffer.concat([\n      Buffer.from(\"{U\"),\n      Buffer.from([3]),\n      Buffer.from(\"raw[$U#l\"),\n      Buffer.from([0, 0, 0, 0]),\n    ]);\n    this.fileStream.write(header);\n  }\n\n  public _final(callback: (error?: Error | null) => void): void {\n    let footer = Buffer.concat([Buffer.from(\"U\"), Buffer.from([8]), Buffer.from(\"metadata{\")]);\n\n    // Write game start time\n    const startTimeStr = this.metadata.startTime.toISOString();\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([7]),\n      Buffer.from(\"startAtSU\"),\n      Buffer.from([startTimeStr.length]),\n      Buffer.from(startTimeStr),\n    ]);\n\n    // Write last frame index\n    // TODO: Get last frame\n    const lastFrame = this.metadata.lastFrame;\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([9]),\n      Buffer.from(\"lastFramel\"),\n      createInt32Buffer(lastFrame),\n    ]);\n\n    // write the Console Nickname\n    const consoleNick = this.metadata.consoleNickname || DEFAULT_NICKNAME;\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([11]),\n      Buffer.from(\"consoleNickSU\"),\n      Buffer.from([consoleNick.length]),\n      Buffer.from(consoleNick),\n    ]);\n\n    // Start writting player specific data\n    footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([7]), Buffer.from(\"players{\")]);\n    const players = this.metadata.players;\n    forEach(players, (player, index) => {\n      // Start player obj with index being the player index\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([index.length]), Buffer.from(`${index}{`)]);\n\n      // Start characters key for this player\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([10]), Buffer.from(\"characters{\")]);\n\n      // Write character usage\n      forEach(player.characterUsage, (usage, internalId) => {\n        // Write this character\n        footer = Buffer.concat([\n          footer,\n          Buffer.from(\"U\"),\n          Buffer.from([internalId.length]),\n          Buffer.from(`${internalId}l`),\n          createUInt32Buffer(usage),\n        ]);\n      });\n\n      // Close characters\n      footer = Buffer.concat([footer, Buffer.from(\"}\")]);\n\n      // Start names key for this player\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([5]), Buffer.from(\"names{\")]);\n\n      // Write display name\n      footer = Buffer.concat([\n        footer,\n        Buffer.from(\"U\"),\n        Buffer.from([7]),\n        Buffer.from(\"netplaySU\"),\n        Buffer.from([player.names.netplay.length]),\n        Buffer.from(`${player.names.netplay}`),\n      ]);\n\n      // Write connect code\n      footer = Buffer.concat([\n        footer,\n        Buffer.from(\"U\"),\n        Buffer.from([4]),\n        Buffer.from(\"codeSU\"),\n        Buffer.from([player.names.code.length]),\n        Buffer.from(`${player.names.code}`),\n      ]);\n\n      // Close names and player\n      footer = Buffer.concat([footer, Buffer.from(\"}}\")]);\n    });\n\n    // Close players\n    footer = Buffer.concat([footer, Buffer.from(\"}\")]);\n\n    // Write played on\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([8]),\n      Buffer.from(\"playedOnSU\"),\n      Buffer.from([7]),\n      Buffer.from(\"network\"),\n    ]);\n\n    // Close metadata and file\n    footer = Buffer.concat([footer, Buffer.from(\"}}\")]);\n\n    // End the stream\n    if (this.fileStream) {\n      this.fileStream.write(footer, callback);\n    }\n  }\n}\n\nconst createInt32Buffer = (number: number): Buffer => {\n  const buf = Buffer.alloc(4);\n  buf.writeInt32BE(number, 0);\n  return buf;\n};\n\nconst createUInt32Buffer = (number: number): Buffer => {\n  const buf = Buffer.alloc(4);\n  buf.writeUInt32BE(number, 0);\n  return buf;\n};\n","import type { Moment } from \"moment\";\nimport moment from \"moment\";\nimport path from \"path\";\nimport type { WritableOptions } from \"stream\";\n\nimport { Command } from \"../types\";\nimport { SlpFile } from \"./slpFile\";\nimport type { SlpRawEventPayload, SlpStreamSettings } from \"./slpStream\";\nimport { SlpStream, SlpStreamEvent } from \"./slpStream\";\n\n/**\n * The default function to use for generating new SLP files.\n */\nfunction getNewFilePath(folder: string, m: Moment): string {\n  return path.join(folder, `Game_${m.format(\"YYYYMMDD\")}T${m.format(\"HHmmss\")}.slp`);\n}\n\nexport interface SlpFileWriterOptions extends Partial<SlpStreamSettings> {\n  outputFiles: boolean;\n  folderPath: string;\n  consoleNickname: string;\n  newFilename: (folder: string, startTime: Moment) => string;\n}\n\nconst defaultSettings: SlpFileWriterOptions = {\n  outputFiles: true,\n  folderPath: \".\",\n  consoleNickname: \"unknown\",\n  newFilename: getNewFilePath,\n};\n\nexport enum SlpFileWriterEvent {\n  NEW_FILE = \"new-file\",\n  FILE_COMPLETE = \"file-complete\",\n}\n\n/**\n * SlpFileWriter lets us not only emit events as an SlpStream but also\n * writes the data that is being passed in to an SLP file. Use this if\n * you want to process Slippi data in real time but also want to be able\n * to write out the data to an SLP file.\n *\n * @export\n * @class SlpFileWriter\n * @extends {SlpStream}\n */\nexport class SlpFileWriter extends SlpStream {\n  private currentFile: SlpFile | null = null;\n  private options: SlpFileWriterOptions;\n\n  /**\n   * Creates an instance of SlpFileWriter.\n   */\n  public constructor(options?: Partial<SlpFileWriterOptions>, opts?: WritableOptions) {\n    super(options, opts);\n    this.options = Object.assign({}, defaultSettings, options);\n    this._setupListeners();\n  }\n\n  private _writePayload(payload: Buffer): void {\n    // Write data to the current file\n    if (this.currentFile) {\n      this.currentFile.write(payload);\n    }\n  }\n\n  private _setupListeners(): void {\n    this.on(SlpStreamEvent.RAW, (data: SlpRawEventPayload) => {\n      const { command, payload } = data;\n      switch (command) {\n        case Command.MESSAGE_SIZES:\n          // Create the new game first before writing the payload\n          this._handleNewGame();\n          this._writePayload(payload);\n          break;\n        case Command.GAME_END:\n          // Write payload first before ending the game\n          this._writePayload(payload);\n          this._handleEndGame();\n          break;\n        default:\n          this._writePayload(payload);\n          break;\n      }\n    });\n  }\n\n  /**\n   * Return the name of the SLP file currently being written or null if\n   * no file is being written to currently.\n   *\n   * @returns {(string | null)}\n   * @memberof SlpFileWriter\n   */\n  public getCurrentFilename(): string | null {\n    if (this.currentFile !== null) {\n      return path.resolve(this.currentFile.path());\n    }\n    return null;\n  }\n\n  /**\n   * Ends the current file being written to.\n   *\n   * @returns {(string | null)}\n   * @memberof SlpFileWriter\n   */\n  public endCurrentFile(): void {\n    this._handleEndGame();\n  }\n\n  /**\n   * Updates the settings to be the desired ones passed in.\n   *\n   * @param {Partial<SlpFileWriterOptions>} settings\n   * @memberof SlpFileWriter\n   */\n  public updateSettings(settings: Partial<SlpFileWriterOptions>): void {\n    this.options = Object.assign({}, this.options, settings);\n  }\n\n  private _handleNewGame(): void {\n    // Only create a new file if we're outputting files\n    if (this.options.outputFiles) {\n      const filePath = this.options.newFilename(this.options.folderPath, moment());\n      this.currentFile = new SlpFile(filePath, this);\n      // console.log(`Creating new file at: ${filePath}`);\n      this.emit(SlpFileWriterEvent.NEW_FILE, filePath);\n    }\n  }\n\n  private _handleEndGame(): void {\n    // End the stream\n    if (this.currentFile) {\n      // Set the console nickname\n      this.currentFile.setMetadata({\n        consoleNickname: this.options.consoleNickname,\n      });\n      this.currentFile.end();\n\n      // console.log(`Finished writing file: ${this.currentFile.path()}`);\n      this.emit(SlpFileWriterEvent.FILE_COMPLETE, this.currentFile.path());\n\n      // Clear current file\n      this.currentFile = null;\n    }\n  }\n}\n","import type { FrameEntryType, RollbackFramesType } from \"../types\";\n\nexport class RollbackCounter {\n  private rollbackFrames: RollbackFramesType = {};\n  private rollbackFrameCount = 0;\n  private rollbackPlayerIdx: number | null = null; // for keeping track of rollbacks by following a single player\n  private lastFrameWasRollback = false;\n  private currentRollbackLength = 0;\n  private rollbackLengths: number[] = [];\n\n  public checkIfRollbackFrame(currentFrame: FrameEntryType | undefined, playerIdx: number) {\n    if (this.rollbackPlayerIdx === null) {\n      // we only want to follow a single player to avoid double counting. So we use whoever is on first.\n      this.rollbackPlayerIdx = playerIdx;\n    } else if (this.rollbackPlayerIdx !== playerIdx) {\n      return;\n    }\n\n    if (currentFrame) {\n      // frame already exists for currentFrameNumber so we must be rolling back\n      if (this.rollbackFrames[currentFrame.frame]) {\n        this.rollbackFrames[currentFrame.frame]!.push(currentFrame);\n      } else {\n        this.rollbackFrames[currentFrame.frame] = [currentFrame];\n      }\n      this.rollbackFrameCount++;\n      this.currentRollbackLength++;\n      this.lastFrameWasRollback = true;\n    } else if (this.lastFrameWasRollback) {\n      this.rollbackLengths.push(this.currentRollbackLength);\n      this.currentRollbackLength = 0;\n      this.lastFrameWasRollback = false;\n    }\n    return this.lastFrameWasRollback;\n  }\n\n  public getFrames() {\n    return this.rollbackFrames;\n  }\n\n  public getCount() {\n    return this.rollbackFrameCount;\n  }\n\n  public getLengths() {\n    return this.rollbackLengths;\n  }\n}\n","import { EventEmitter } from \"events\";\nimport { get, keyBy, set } from \"lodash\";\nimport semver from \"semver\";\n\nimport type {\n  FrameBookendType,\n  FrameEntryType,\n  FramesType,\n  GameEndType,\n  GameStartType,\n  ItemUpdateType,\n  PostFrameUpdateType,\n  PreFrameUpdateType,\n  RollbackFrames,\n} from \"../types\";\nimport { Command, Frames, GameMode } from \"../types\";\nimport { RollbackCounter } from \"./rollbackCounter\";\n\nexport const MAX_ROLLBACK_FRAMES = 7;\n\nexport enum SlpParserEvent {\n  SETTINGS = \"settings\",\n  END = \"end\",\n  FRAME = \"frame\", // Emitted for every frame\n  FINALIZED_FRAME = \"finalized-frame\", // Emitted for only finalized frames\n  ROLLBACK_FRAME = \"rollback-frame\", // Emitted if a frame is being replaced\n}\n\n// If strict mode is on, we will do strict validation checking\n// which could throw errors on invalid data.\n// Default to false though since probably only real time applications\n// would care about valid data.\nconst defaultSlpParserOptions = {\n  strict: false,\n};\n\nexport type SlpParserOptions = typeof defaultSlpParserOptions;\n\nexport class SlpParser extends EventEmitter {\n  private frames: FramesType = {};\n  private rollbackCounter: RollbackCounter = new RollbackCounter();\n  private settings: GameStartType | null = null;\n  private gameEnd: GameEndType | null = null;\n  private latestFrameIndex: number | null = null;\n  private settingsComplete = false;\n  private lastFinalizedFrame = Frames.FIRST - 1;\n  private options: SlpParserOptions;\n\n  public constructor(options?: Partial<SlpParserOptions>) {\n    super();\n    this.options = Object.assign({}, defaultSlpParserOptions, options);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public handleCommand(command: Command, payload: any): void {\n    switch (command) {\n      case Command.GAME_START:\n        this._handleGameStart(payload as GameStartType);\n        break;\n      case Command.POST_FRAME_UPDATE:\n        // We need to handle the post frame update first since that\n        // will finalize the settings object, before we fire the frame update\n        this._handlePostFrameUpdate(payload as PostFrameUpdateType);\n        this._handleFrameUpdate(command, payload as PostFrameUpdateType);\n        break;\n      case Command.PRE_FRAME_UPDATE:\n        this._handleFrameUpdate(command, payload as PreFrameUpdateType);\n        break;\n      case Command.ITEM_UPDATE:\n        this._handleItemUpdate(payload as ItemUpdateType);\n        break;\n      case Command.FRAME_BOOKEND:\n        this._handleFrameBookend(payload as FrameBookendType);\n        break;\n      case Command.GAME_END:\n        this._handleGameEnd(payload as GameEndType);\n        break;\n    }\n  }\n\n  /**\n   * Resets the parser state to their default values.\n   */\n  public reset(): void {\n    this.frames = {};\n    this.settings = null;\n    this.gameEnd = null;\n    this.latestFrameIndex = null;\n    this.settingsComplete = false;\n    this.lastFinalizedFrame = Frames.FIRST - 1;\n  }\n\n  public getLatestFrameNumber(): number {\n    return this.latestFrameIndex ?? Frames.FIRST - 1;\n  }\n\n  public getPlayableFrameCount(): number {\n    if (this.latestFrameIndex === null) {\n      return 0;\n    }\n    return this.latestFrameIndex < Frames.FIRST_PLAYABLE ? 0 : this.latestFrameIndex - Frames.FIRST_PLAYABLE;\n  }\n\n  public getLatestFrame(): FrameEntryType | null {\n    // return this.playerFrames[this.latestFrameIndex];\n\n    // TODO: Modify this to check if we actually have all the latest frame data and return that\n    // TODO: If we do. For now I'm just going to take a shortcut\n    const allFrames = this.getFrames();\n    const frameIndex = this.latestFrameIndex !== null ? this.latestFrameIndex : Frames.FIRST;\n    const indexToUse = this.gameEnd ? frameIndex : frameIndex - 1;\n    return get(allFrames, indexToUse) || null;\n  }\n\n  public getSettings(): GameStartType | null {\n    return this.settingsComplete ? this.settings : null;\n  }\n\n  public getGameEnd(): GameEndType | null {\n    return this.gameEnd;\n  }\n\n  public getFrames(): FramesType {\n    return this.frames;\n  }\n\n  public getRollbackFrames(): RollbackFrames {\n    return {\n      frames: this.rollbackCounter.getFrames(),\n      count: this.rollbackCounter.getCount(),\n      lengths: this.rollbackCounter.getLengths(),\n    };\n  }\n\n  public getFrame(num: number): FrameEntryType | null {\n    return this.frames[num] || null;\n  }\n\n  private _handleGameEnd(payload: GameEndType): void {\n    // Finalize remaining frames if necessary\n    if (this.latestFrameIndex !== null && this.latestFrameIndex !== this.lastFinalizedFrame) {\n      this._finalizeFrames(this.latestFrameIndex);\n    }\n\n    payload = payload as GameEndType;\n    this.gameEnd = payload;\n    this.emit(SlpParserEvent.END, this.gameEnd);\n  }\n\n  private _handleGameStart(payload: GameStartType): void {\n    this.settings = payload;\n    const players = payload.players;\n    this.settings.players = players.filter((player) => player.type !== 3);\n\n    // Check to see if the file was created after the sheik fix so we know\n    // we don't have to process the first frame of the game for the full settings\n    if (payload.slpVersion && semver.gte(payload.slpVersion, \"1.6.0\")) {\n      this._completeSettings();\n    }\n  }\n\n  private _handlePostFrameUpdate(payload: PostFrameUpdateType): void {\n    if (this.settingsComplete) {\n      return;\n    }\n\n    // Finish calculating settings\n    if (payload.frame! <= Frames.FIRST) {\n      const playerIndex = payload.playerIndex!;\n      const playersByIndex = keyBy(this.settings!.players, \"playerIndex\");\n\n      switch (payload.internalCharacterId) {\n        case 0x7:\n          playersByIndex[playerIndex]!.characterId = 0x13; // Sheik\n          break;\n        case 0x13:\n          playersByIndex[playerIndex]!.characterId = 0x12; // Zelda\n          break;\n      }\n    }\n    if (payload.frame! > Frames.FIRST) {\n      this._completeSettings();\n    }\n  }\n\n  private _handleFrameUpdate(command: Command, payload: PreFrameUpdateType | PostFrameUpdateType): void {\n    payload = payload as PostFrameUpdateType;\n    const location = command === Command.PRE_FRAME_UPDATE ? \"pre\" : \"post\";\n    const field = payload.isFollower ? \"followers\" : \"players\";\n    const currentFrameNumber = payload.frame!;\n    this.latestFrameIndex = currentFrameNumber;\n    if (location === \"pre\" && !payload.isFollower) {\n      const currentFrame = this.frames[currentFrameNumber];\n      const wasRolledback = this.rollbackCounter.checkIfRollbackFrame(currentFrame, payload.playerIndex!);\n      if (wasRolledback) {\n        // frame is about to be overwritten\n        this.emit(SlpParserEvent.ROLLBACK_FRAME, currentFrame);\n      }\n    }\n    set(this.frames, [currentFrameNumber, field, payload.playerIndex!, location], payload);\n    set(this.frames, [currentFrameNumber, \"frame\"], currentFrameNumber);\n\n    // If file is from before frame bookending, add frame to stats computer here. Does a little\n    // more processing than necessary, but it works\n    const settings = this.getSettings();\n    if (settings && (!settings.slpVersion || semver.lte(settings.slpVersion, \"2.2.0\"))) {\n      this.emit(SlpParserEvent.FRAME, this.frames[currentFrameNumber]);\n      // Finalize the previous frame since no bookending exists\n      this._finalizeFrames(currentFrameNumber - 1);\n    } else {\n      set(this.frames, [currentFrameNumber, \"isTransferComplete\"], false);\n    }\n  }\n\n  private _handleItemUpdate(payload: ItemUpdateType): void {\n    const currentFrameNumber = payload.frame!;\n    const items = this.frames[currentFrameNumber]?.items ?? [];\n    items.push(payload);\n\n    // Set items with newest\n    set(this.frames, [currentFrameNumber, \"items\"], items);\n  }\n\n  private _handleFrameBookend(payload: FrameBookendType): void {\n    const latestFinalizedFrame = payload.latestFinalizedFrame!;\n    const currentFrameNumber = payload.frame!;\n    set(this.frames, [currentFrameNumber, \"isTransferComplete\"], true);\n    // Fire off a normal frame event\n    this.emit(SlpParserEvent.FRAME, this.frames[currentFrameNumber]);\n\n    // Finalize frames if necessary\n    const validLatestFrame = this.settings!.gameMode === GameMode.ONLINE;\n    if (validLatestFrame && latestFinalizedFrame >= Frames.FIRST) {\n      // Ensure valid latestFinalizedFrame\n      if (this.options.strict && latestFinalizedFrame < currentFrameNumber - MAX_ROLLBACK_FRAMES) {\n        throw new Error(`latestFinalizedFrame should be within ${MAX_ROLLBACK_FRAMES} frames of ${currentFrameNumber}`);\n      }\n      this._finalizeFrames(latestFinalizedFrame);\n    } else {\n      // Since we don't have a valid finalized frame, just finalize the frame based on MAX_ROLLBACK_FRAMES\n      this._finalizeFrames(currentFrameNumber - MAX_ROLLBACK_FRAMES);\n    }\n  }\n\n  /**\n   * Fires off the FINALIZED_FRAME event for frames up until a certain number\n   * @param num The frame to finalize until\n   */\n  private _finalizeFrames(num: number): void {\n    while (this.lastFinalizedFrame < num) {\n      const frameToFinalize = this.lastFinalizedFrame + 1;\n      const frame = this.getFrame(frameToFinalize)!;\n\n      // Check that we have all the pre and post frame data for all players if we're in strict mode\n      if (this.options.strict) {\n        for (const player of this.settings!.players) {\n          const playerFrameInfo = frame.players[player.playerIndex];\n          // Allow player frame info to be empty in non 1v1 games since\n          // players which have been defeated will have no frame info.\n          if (this.settings!.players.length > 2 && !playerFrameInfo) {\n            continue;\n          }\n\n          const { pre, post } = playerFrameInfo!;\n          if (!pre || !post) {\n            const preOrPost = pre ? \"pre\" : \"post\";\n            throw new Error(\n              `Could not finalize frame ${frameToFinalize} of ${num}: missing ${preOrPost}-frame update for player ${player.playerIndex}`,\n            );\n          }\n        }\n      }\n\n      // Our frame is complete so finalize the frame\n      this.emit(SlpParserEvent.FINALIZED_FRAME, frame);\n      this.lastFinalizedFrame = frameToFinalize;\n    }\n  }\n\n  private _completeSettings(): void {\n    if (!this.settingsComplete) {\n      this.settingsComplete = true;\n      this.emit(SlpParserEvent.SETTINGS, this.settings);\n    }\n  }\n}\n","import type { StatOptions, StatsType } from \"./stats\";\nimport {\n  ActionsComputer,\n  ComboComputer,\n  ConversionComputer,\n  generateOverallStats,\n  InputComputer,\n  Stats,\n  StockComputer,\n} from \"./stats\";\n// Type imports\nimport type { FrameEntryType, FramesType, GameEndType, GameStartType, MetadataType, RollbackFrames } from \"./types\";\nimport { SlpParser, SlpParserEvent } from \"./utils/slpParser\";\nimport type { SlpReadInput } from \"./utils/slpReader\";\nimport { closeSlpFile, getMetadata, iterateEvents, openSlpFile, SlpInputSource } from \"./utils/slpReader\";\n\n/**\n * Slippi Game class that wraps a file\n */\nexport class SlippiGame {\n  private input: SlpReadInput;\n  private metadata: MetadataType | null = null;\n  private finalStats: StatsType | null = null;\n  private parser: SlpParser;\n  private readPosition: number | null = null;\n  private actionsComputer: ActionsComputer = new ActionsComputer();\n  private conversionComputer: ConversionComputer = new ConversionComputer();\n  private comboComputer: ComboComputer = new ComboComputer();\n  private stockComputer: StockComputer = new StockComputer();\n  private inputComputer: InputComputer = new InputComputer();\n  protected statsComputer: Stats;\n\n  public constructor(input: string | Buffer | ArrayBuffer, opts?: StatOptions) {\n    if (typeof input === \"string\") {\n      this.input = {\n        source: SlpInputSource.FILE,\n        filePath: input,\n      };\n    } else if (input instanceof Buffer) {\n      this.input = {\n        source: SlpInputSource.BUFFER,\n        buffer: input,\n      };\n    } else if (input instanceof ArrayBuffer) {\n      this.input = {\n        source: SlpInputSource.BUFFER,\n        buffer: Buffer.from(input),\n      };\n    } else {\n      throw new Error(\"Cannot create SlippiGame with input of that type\");\n    }\n\n    // Set up stats calculation\n    this.statsComputer = new Stats(opts);\n    this.statsComputer.register(\n      this.actionsComputer,\n      this.comboComputer,\n      this.conversionComputer,\n      this.inputComputer,\n      this.stockComputer,\n    );\n    this.parser = new SlpParser();\n    this.parser.on(SlpParserEvent.SETTINGS, (settings) => {\n      this.statsComputer.setup(settings);\n    });\n    // Use finalized frames for stats computation\n    this.parser.on(SlpParserEvent.FINALIZED_FRAME, (frame: FrameEntryType) => {\n      this.statsComputer.addFrame(frame);\n    });\n  }\n\n  private _process(settingsOnly = false): void {\n    if (this.parser.getGameEnd() !== null) {\n      return;\n    }\n    const slpfile = openSlpFile(this.input);\n    // Generate settings from iterating through file\n    this.readPosition = iterateEvents(\n      slpfile,\n      (command, payload) => {\n        if (!payload) {\n          // If payload is falsy, keep iterating. The parser probably just doesn't know\n          // about this command yet\n          return false;\n        }\n        this.parser.handleCommand(command, payload);\n        return settingsOnly && this.parser.getSettings() !== null;\n      },\n      this.readPosition,\n    );\n    closeSlpFile(slpfile);\n  }\n\n  /**\n   * Gets the game settings, these are the settings that describe the starting state of\n   * the game such as characters, stage, etc.\n   */\n  public getSettings(): GameStartType | null {\n    // Settings is only complete after post-frame update\n    this._process(true);\n    return this.parser.getSettings();\n  }\n\n  public getLatestFrame(): FrameEntryType | null {\n    this._process();\n    return this.parser.getLatestFrame();\n  }\n\n  public getGameEnd(): GameEndType | null {\n    this._process();\n    return this.parser.getGameEnd();\n  }\n\n  public getFrames(): FramesType {\n    this._process();\n    return this.parser.getFrames();\n  }\n\n  public getRollbackFrames(): RollbackFrames {\n    this._process();\n    return this.parser.getRollbackFrames();\n  }\n\n  public getStats(): StatsType | null {\n    if (this.finalStats) {\n      return this.finalStats;\n    }\n\n    this._process();\n\n    const settings = this.parser.getSettings();\n    if (settings === null) {\n      return null;\n    }\n\n    // Finish processing if we're not up to date\n    this.statsComputer.process();\n    const inputs = this.inputComputer.fetch();\n    const stocks = this.stockComputer.fetch();\n    const conversions = this.conversionComputer.fetch();\n    const playableFrameCount = this.parser.getPlayableFrameCount();\n    const overall = generateOverallStats({ settings, inputs, conversions, playableFrameCount });\n\n    const stats = {\n      lastFrame: this.parser.getLatestFrameNumber(),\n      playableFrameCount,\n      stocks: stocks,\n      conversions: conversions,\n      combos: this.comboComputer.fetch(),\n      actionCounts: this.actionsComputer.fetch(),\n      overall: overall,\n      gameComplete: this.parser.getGameEnd() !== null,\n    };\n\n    if (this.parser.getGameEnd() !== null) {\n      // If the game is complete, store a cached version of stats because it should not\n      // change anymore. Ideally the statsCompuer.process and fetch functions would simply do no\n      // work in this case instead but currently the conversions fetch function,\n      // generateOverallStats, and maybe more are doing work on every call.\n      this.finalStats = stats;\n    }\n\n    return stats;\n  }\n\n  public getMetadata(): MetadataType | null {\n    if (this.metadata) {\n      return this.metadata;\n    }\n    const slpfile = openSlpFile(this.input);\n    this.metadata = getMetadata(slpfile);\n    closeSlpFile(slpfile);\n    return this.metadata;\n  }\n\n  public getFilePath(): string | null {\n    if (this.input.source !== SlpInputSource.FILE) {\n      return null;\n    }\n\n    return this.input.filePath ?? null;\n  }\n}\n"],"names":["getDeathDirection","actionStateId","DEFAULT_COLOR","UnknownCharacter","id","name","shortName","colors","generateCharacterInfo","info","getAllCharacters","Object","entries","characters","map","data","parseInt","sort","a","b","getCharacterInfo","externalCharacterId","toString","getCharacterShortName","character","getCharacterName","getCharacterColorName","characterColor","color","UnknownMove","getMoveInfo","moveId","moveName","moveNames","getMoveShortName","move","getMoveName","UnknownStage","getStageInfo","stageId","stageName","stageNames","getStageName","stage","Character","Stage","State","Timers","PUNISH_RESET_FRAMES","RECOVERY_RESET_FRAMES","COMBO_STRING_RESET_FRAMES","getSinglesPlayerPermutationsFromSettings","settings","players","length","playerIndex","opponentIndex","didLoseStock","frame","prevFrame","stocksRemaining","isInControl","state","ground","GROUNDED_CONTROL_START","GROUNDED_CONTROL_END","squat","SQUAT_START","SQUAT_END","groundAttack","GROUND_ATTACK_START","GROUND_ATTACK_END","isGrab","GRAB","isTeching","TECH_START","TECH_END","isDown","DOWN_START","DOWN_END","isDamaged","DAMAGE_START","DAMAGE_END","DAMAGE_FALL","isGrabbed","CAPTURE_START","CAPTURE_END","isCommandGrabbed","COMMAND_GRAB_RANGE1_START","COMMAND_GRAB_RANGE1_END","COMMAND_GRAB_RANGE2_START","COMMAND_GRAB_RANGE2_END","BARREL_WAIT","isDead","DYING_START","DYING_END","calcDamageTaken","percent","prevPercent","dashDanceAnimations","DASH","TURN","ActionsComputer","playerPermutations","Array","Map","setup","forEach","indices","playerCounts","wavedashCount","wavelandCount","airDodgeCount","dashDanceCount","spotDodgeCount","ledgegrabCount","rollCount","lCancelCount","success","fail","grabCount","throwCount","up","forward","back","down","groundTechCount","away","in","neutral","wallTechCount","playerState","animations","set","processFrame","get","handleActionCompute","fetch","from","values","val","didMissGroundTech","animation","TECH_MISS_DOWN","TECH_MISS_UP","isRolling","ROLL_BACKWARD","ROLL_FORWARD","didStartRoll","currentAnimation","previousAnimation","isCurrentlyRolling","wasPreviouslyRolling","isSpotDodging","SPOT_DODGE","didStartGrabSuccess","GRAB_WAIT","didStartGrabFail","didStartSpotDodge","isCurrentlyDodging","wasPreviouslyDodging","isAirDodging","AIR_DODGE","didStartAirDodge","isGrabbingLedge","CLIFF_CATCH","isAerialAttack","AERIAL_ATTACK_START","AERIAL_ATTACK_END","didStartLedgegrab","isCurrentlyGrabbingLedge","wasPreviouslyGrabbingLedge","playerFrame","post","opponentFrame","incrementCount","field","condition","current","push","last3Frames","slice","prevAnimation","newAnimation","didDashDance","isEqual","didRoll","didSpotDodge","didAirDodge","didGrabLedge","didGrabSucceed","didGrabFail","THROW_UP","THROW_FORWARD","THROW_DOWN","THROW_BACK","didMissTech","opponentDir","facingOpponent","positionX","facingDirection","FORWARD_TECH","BACKWARD_TECH","NEUTRAL_TECH","WALL_TECH","MISSED_WALL_TECH","lCancelStatus","handleActionWavedash","counts","last","isSpecialLanding","LANDING_FALL_SPECIAL","isAcceptablePrevious","isWavedashInitiationAnimation","isPossibleWavedash","recentFrames","recentAnimations","keyBy","size","ACTION_KNEE_BEND","isAboveMin","CONTROLLED_JUMP_START","isBelowMax","CONTROLLED_JUMP_END","ComboEvent","ComboComputer","EventEmitter","combos","combo","resetCounter","lastHitAnimation","event","allFrames","handleComboCompute","emit","frames","currentFrameNumber","prevFrameNumber","prevPlayerFrame","prevOpponentFrame","oppActionStateId","opntIsDamaged","opntIsGrabbed","opntIsCommandGrabbed","opntDamageTaken","actionChangedSinceHit","actionCounter","actionStateCounter","prevActionCounter","actionFrameCounterReset","comboStarted","startFrame","endFrame","startPercent","currentPercent","endPercent","moves","didKill","lastHitBy","lastAttackLanded","hitCount","damage","COMBO_EXTEND","COMBO_START","opntIsTeching","opntIsDowned","opntDidLoseStock","opntIsDying","shouldTerminate","COMBO_END","ConversionComputer","constructor","conversions","metadata","lastEndFrameByOppIdx","conversion","terminated","handleConversionCompute","_populateConversionTypes","conversionsToHandle","filter","openingType","groupedConversions","groupBy","sortedConversions","orderBy","isTrade","lastMove","oppEndFrame","isCounterAttack","opntInControl","shouldStartResetCounter","shouldContinueResetCounter","Command","GameMode","Frames","JoystickRegion","InputComputer","inputCount","joystickInputCount","cstickInputCount","buttonInputCount","triggerInputCount","handleInputCompute","pre","FIRST_PLAYABLE","invertedPreviousButtons","physicalButtons","currentButtons","buttonChanges","newInputsPressed","countSetBits","prevAnalogRegion","getJoystickRegion","joystickX","joystickY","currentAnalogRegion","DZ","prevCstickRegion","cStickX","cStickY","currentCstickRegion","physicalLTrigger","physicalRTrigger","x","bits","count","y","region","NE","SE","SW","NW","N","E","S","W","generateOverallStats","inputs","playableFrameCount","inputsByPlayer","originalConversions","conversionsByPlayer","conv","conversionsByPlayerByOpening","mapValues","gameMinutes","overall","player","playerInputs","inputCounts","buttons","triggers","cstick","joystick","total","conversionCount","successfulConversionCount","opponentIndices","opp","isTeams","teamId","totalDamage","killCount","successfulConversions","getRatio","inputsPerMinute","digitalInputsPerMinute","openingsPerKill","damagePerOpening","neutralWinRatio","getOpeningRatio","counterHitRatio","beneficialTradeRatio","getBeneficialTradeRatio","ratio","type","openings","opponentOpenings","flatten","playerTrades","opponentTrades","benefitsPlayer","zippedTrades","zip","conversionPair","playerConversion","first","opponentConversion","playerDamage","opponentDamage","defaultOptions","processOnTheFly","Stats","options","lastProcessedFrame","allComputers","assign","v","comp","register","computer","process","i","FIRST","isCompletedFrame","addFrame","playerPostFrame","StockComputer","stocks","stock","handleStockCompute","isPlayerDead","deathAnimation","CommunicationType","ConsoleCommunication","receiveBuf","Buffer","messages","receive","concat","msgSize","readUInt32BE","ubjsonData","decode","getReceiveBuffer","getMessages","toReturn","genHandshakeOut","cursor","clientToken","isRealtime","clientTokenBuf","writeUInt32BE","message","HANDSHAKE","payload","Uint8Array","buf","encode","optimizeArrays","msg","byteLength","ConnectionEvent","ConnectionStatus","Ports","NETWORK_MESSAGE","DEFAULT_CONNECTION_TIMEOUT_MS","CommunicationState","defaultConnectionDetails","consoleNick","gameDataCursor","version","consoleConnectionOptions","autoReconnect","ConsoleConnection","ipAddress","port","connectionStatus","DISCONNECTED","connDetails","client","connection","shouldReconnect","DEFAULT","getStatus","getSettings","getDetails","connect","ip","timeout","_connectOnPort","reconnect","inject","net","host","_setStatus","CONNECTING","consoleComms","initialDelay","maxDelay","strategy","failAfter","Infinity","CONNECT","commState","INITIAL","on","_getInitialCommState","console","log","CONNECTED","LEGACY","_handleReplayData","err","error","prevDataBuf","rcvData","destroy","ERROR","_processMessage","warn","handshakeMsgOut","write","setConnectingStatus","RECONNECT_WAIT","disconnect","openingBytes","dataStart","equals","NORMAL","MESSAGE","KEEP_ALIVE","fakeKeepAlive","REPLAY","readPos","pos","cmp","compare","forcePos","Error","nextPos","nick","nintendontVersion","tokenBuf","DATA","status","STATUS_CHANGE","MAX_PEERS","DolphinMessageType","DolphinConnection","gameCursor","nickname","peer","enet","createClient","peers","channels","address","newPeer","ping","request","packet","Packet","JSON","stringify","PACKET_FLAG","RELIABLE","send","dataString","parse","dolphin_closed","CONNECT_REPLY","GAME_EVENT","_updateCursor","gameData","START_GAME","END_GAME","next_cursor","toHalfwidth","str","convertChar","charCode","ret","char","charCodeAt","String","fromCharCode","SlpInputSource","getRef","input","source","FILE","filePath","fd","fs","openSync","fileDescriptor","BUFFER","buffer","readRef","ref","offset","position","readSync","copy","getLenRef","fileStats","fstatSync","openSlpFile","rawDataPosition","getRawDataPosition","rawDataLength","getRawDataLength","metadataPosition","metadataLength","getMetadataLength","messageSizes","getMessageSizes","closeSlpFile","file","closeSync","fileSize","rawDataLen","len","MESSAGE_SIZES","payloadLength","messageSizesBuffer","command","iterateEvents","slpFile","callback","startPos","readPosition","stopReadingAt","commandPayloadBuffers","commandByteBuffer","commandByte","undefined","parsedPayload","parseMessage","shouldStop","view","DataView","GAME_START","getPlayerObject","cfOffset","dashback","readUint32","shieldDrop","controllerFix","nametagLength","nametagOffset","nametagStart","nametagBuf","nameTagString","iconv","split","shift","nametag","displayNameLength","displayNameOffset","displayNameStart","displayNameBuf","displayNameString","displayName","connectCodeLength","connectCodeOffset","connectCodeStart","connectCodeBuf","connectCodeString","connectCode","userIdLength","userIdOffset","userIdStart","userIdBuf","userIdString","userId","characterId","readUint8","startStocks","slpVersion","readBool","isPAL","readUint16","scene","gameMode","PRE_FRAME_UPDATE","readInt32","isFollower","seed","readFloat","positionY","trigger","POST_FRAME_UPDATE","selfInducedSpeeds","airX","attackX","attackY","groundX","internalCharacterId","shieldSize","currentComboCount","miscActionState","isAirborne","lastGroundId","jumpsRemaining","hurtboxCollisionState","ITEM_UPDATE","typeId","velocityX","velocityY","damageTaken","expirationTimer","spawnId","missileType","turnipFace","chargeShotLaunched","chargePower","owner","readInt8","FRAME_BOOKEND","latestFinalizedFrame","GAME_END","gameEndMethod","lrasInitiatorIndex","canReadFromView","viewLength","getFloat32","getInt32","getInt8","getUint32","getUint16","getUint8","getMetadata","ex","SlpStreamMode","defaultSettings","suppressErrors","mode","AUTO","SlpStreamEvent","SlpStream","Writable","slpOptions","opts","gameEnded","payloadSizes","previousBuffer","restart","_write","newData","encoding","dataView","index","payloadSize","remainingLen","MANUAL","payloadPtr","payloadDataView","payloadLen","_processCommand","_writeCommand","entirePayload","payloadBuf","bufToWrite","RAW","processReceiveCommands","COMMAND","DEFAULT_NICKNAME","SlpFile","slpStream","fileStream","usesExternalStream","consoleNickname","startTime","moment","lastFrame","Boolean","_setupListeners","_initializeNewGame","path","setMetadata","chunk","_onCommand","characterUsage","names","netplay","code","prevPlayer","curCharFrames","streamListener","writeSync","createUInt32Buffer","removeListener","end","createWriteStream","header","_final","footer","startTimeStr","toISOString","createInt32Buffer","usage","internalId","number","alloc","writeInt32BE","getNewFilePath","folder","m","join","format","outputFiles","folderPath","newFilename","SlpFileWriterEvent","SlpFileWriter","currentFile","_writePayload","_handleNewGame","_handleEndGame","getCurrentFilename","resolve","endCurrentFile","updateSettings","NEW_FILE","FILE_COMPLETE","RollbackCounter","rollbackFrames","rollbackFrameCount","rollbackPlayerIdx","lastFrameWasRollback","currentRollbackLength","rollbackLengths","checkIfRollbackFrame","currentFrame","playerIdx","getFrames","getCount","getLengths","MAX_ROLLBACK_FRAMES","SlpParserEvent","defaultSlpParserOptions","strict","SlpParser","rollbackCounter","gameEnd","latestFrameIndex","settingsComplete","lastFinalizedFrame","handleCommand","_handleGameStart","_handlePostFrameUpdate","_handleFrameUpdate","_handleItemUpdate","_handleFrameBookend","_handleGameEnd","reset","getLatestFrameNumber","getPlayableFrameCount","getLatestFrame","frameIndex","indexToUse","getGameEnd","getRollbackFrames","lengths","getFrame","num","_finalizeFrames","END","semver","gte","_completeSettings","playersByIndex","location","wasRolledback","ROLLBACK_FRAME","lte","FRAME","items","validLatestFrame","ONLINE","frameToFinalize","playerFrameInfo","preOrPost","FINALIZED_FRAME","SETTINGS","SlippiGame","finalStats","parser","actionsComputer","conversionComputer","comboComputer","stockComputer","inputComputer","statsComputer","ArrayBuffer","_process","settingsOnly","slpfile","getStats","stats","actionCounts","gameComplete","getFilePath"],"mappings":"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"}