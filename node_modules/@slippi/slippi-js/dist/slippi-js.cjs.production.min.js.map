{"version":3,"file":"slippi-js.cjs.production.min.js","sources":["../src/melee/characterUtils.ts","../src/melee/moveUtils.ts","../src/melee/stageUtils.ts","../src/melee/types.ts","../src/stats/common.ts","../src/stats/actions.ts","../src/stats/combos.ts","../src/types.ts","../src/stats/inputs.ts","../src/stats/conversions.ts","../src/stats/overall.ts","../src/stats/stats.ts","../src/stats/stocks.ts","../src/utils/exists.ts","../src/stats/targets.ts","../src/console/communication.ts","../src/console/types.ts","../src/console/consoleConnection.ts","../src/console/dolphinConnection.ts","../src/utils/slpReader.ts","../src/utils/slpStream.ts","../src/utils/fullwidth.ts","../src/utils/slpFile.ts","../src/utils/slpFileWriter.ts","../src/utils/slpParser.ts","../src/utils/rollbackCounter.ts","../src/SlippiGame.ts","../src/utils/homeRunDistance.ts","../src/utils/getWinners.ts","../src/melee/animationUtils.ts","../src/utils/gameTimer.ts"],"sourcesContent":["import characters from \"./characters.json\";\n\nexport type CharacterColor = string;\nconst DEFAULT_COLOR: CharacterColor = \"Default\";\n\nexport interface CharacterInfo {\n  id: number;\n  name: string;\n  shortName: string;\n  colors: CharacterColor[];\n}\n\nexport const UnknownCharacter: CharacterInfo = {\n  id: -1,\n  name: \"Unknown Character\",\n  shortName: \"Unknown\",\n  colors: [DEFAULT_COLOR],\n};\n\ntype CharacterId = keyof typeof characters;\n\nfunction generateCharacterInfo(\n  id: number,\n  info?: {\n    name: string;\n    shortName?: string;\n    colors?: CharacterColor[];\n  },\n): CharacterInfo {\n  if (!info) {\n    return UnknownCharacter;\n  }\n\n  return {\n    id,\n    name: info.name,\n    shortName: info.shortName ?? info.name,\n    colors: [DEFAULT_COLOR, ...(info.colors ?? [])],\n  };\n}\n\nexport function getAllCharacters(): CharacterInfo[] {\n  return Object.entries(characters)\n    .map(([id, data]) => generateCharacterInfo(parseInt(id, 10), data))\n    .sort((a, b) => a.id - b.id);\n}\n\nexport function getCharacterInfo(externalCharacterId: number): CharacterInfo {\n  const data = characters[externalCharacterId.toString() as CharacterId];\n  return generateCharacterInfo(externalCharacterId, data);\n}\n\nexport function getCharacterShortName(externalCharacterId: number): string {\n  const character = getCharacterInfo(externalCharacterId);\n  return character.shortName;\n}\n\nexport function getCharacterName(externalCharacterId: number): string {\n  const character = getCharacterInfo(externalCharacterId);\n  return character.name;\n}\n\n// Return a human-readable color from a characterCode.\nexport function getCharacterColorName(externalCharacterId: number, characterColor: number): CharacterColor {\n  const character = getCharacterInfo(externalCharacterId);\n  const color = character.colors[characterColor];\n  if (color) {\n    return color;\n  }\n  return DEFAULT_COLOR;\n}\n","import moveNames from \"./moves.json\";\n\nexport interface Move {\n  id: number;\n  name: string;\n  shortName: string;\n}\n\nexport const UnknownMove: Move = {\n  id: -1,\n  name: \"Unknown Move\",\n  shortName: \"unknown\",\n};\n\ntype MoveId = keyof typeof moveNames;\n\nexport function getMoveInfo(moveId: number): Move {\n  const moveName = moveNames[moveId.toString() as MoveId];\n  if (!moveName) {\n    return UnknownMove;\n  }\n  return {\n    id: moveId,\n    name: moveName.name,\n    shortName: moveName.shortName,\n  };\n}\n\nexport function getMoveShortName(moveId: number): string {\n  const move = getMoveInfo(moveId);\n  return move.shortName;\n}\n\nexport function getMoveName(moveId: number): string {\n  const move = getMoveInfo(moveId);\n  return move.name;\n}\n","import stageNames from \"./stages.json\";\n\nexport interface StageInfo {\n  id: number;\n  name: string;\n}\n\nexport const UnknownStage: StageInfo = {\n  id: -1,\n  name: \"Unknown Stage\",\n};\n\ntype StageId = keyof typeof stageNames;\n\nexport function getStageInfo(stageId: number): StageInfo {\n  const stageName = stageNames[stageId.toString() as StageId];\n  if (!stageName) {\n    return UnknownStage;\n  }\n  return {\n    id: stageId,\n    name: stageName,\n  };\n}\n\nexport function getStageName(stageId: number): string {\n  const stage = getStageInfo(stageId);\n  return stage.name;\n}\n","export enum Character {\n  CAPTAIN_FALCON = 0,\n  DONKEY_KONG = 1,\n  FOX = 2,\n  GAME_AND_WATCH = 3,\n  KIRBY = 4,\n  BOWSER = 5,\n  LINK = 6,\n  LUIGI = 7,\n  MARIO = 8,\n  MARTH = 9,\n  MEWTWO = 10,\n  NESS = 11,\n  PEACH = 12,\n  PIKACHU = 13,\n  ICE_CLIMBERS = 14,\n  JIGGLYPUFF = 15,\n  SAMUS = 16,\n  YOSHI = 17,\n  ZELDA = 18,\n  SHEIK = 19,\n  FALCO = 20,\n  YOUNG_LINK = 21,\n  DR_MARIO = 22,\n  ROY = 23,\n  PICHU = 24,\n  GANONDORF = 25,\n  MASTER_HAND = 26,\n  WIREFRAME_MALE = 27,\n  WIREFRAME_FEMALE = 28,\n  GIGA_BOWSER = 29,\n  CRAZY_HAND = 30,\n  SANDBAG = 31,\n  POPO = 32,\n}\n\nexport enum Stage {\n  FOUNTAIN_OF_DREAMS = 2,\n  POKEMON_STADIUM = 3,\n  PEACHS_CASTLE = 4,\n  KONGO_JUNGLE = 5,\n  BRINSTAR = 6,\n  CORNERIA = 7,\n  YOSHIS_STORY = 8,\n  ONETT = 9,\n  MUTE_CITY = 10,\n  RAINBOW_CRUISE = 11,\n  JUNGLE_JAPES = 12,\n  GREAT_BAY = 13,\n  HYRULE_TEMPLE = 14,\n  BRINSTAR_DEPTHS = 15,\n  YOSHIS_ISLAND = 16,\n  GREEN_GREENS = 17,\n  FOURSIDE = 18,\n  MUSHROOM_KINGDOM = 19,\n  MUSHROOM_KINGDOM_2 = 20,\n  VENOM = 22,\n  POKE_FLOATS = 23,\n  BIG_BLUE = 24,\n  ICICLE_MOUNTAIN = 25,\n  ICETOP = 26,\n  FLAT_ZONE = 27,\n  DREAMLAND = 28,\n  YOSHIS_ISLAND_N64 = 29,\n  KONGO_JUNGLE_N64 = 30,\n  BATTLEFIELD = 31,\n  FINAL_DESTINATION = 32,\n  TARGET_TEST_MARIO = 33,\n  TARGET_TEST_CAPTAIN_FALCON = 34,\n  TARGET_TEST_YOUNG_LINK = 35,\n  TARGET_TEST_DONKEY_KONG = 36,\n  TARGET_TEST_DR_MARIO = 37,\n  TARGET_TEST_FALCO = 38,\n  TARGET_TEST_FOX = 39,\n  TARGET_TEST_ICE_CLIMBERS = 40,\n  TARGET_TEST_KIRBY = 41,\n  TARGET_TEST_BOWSER = 42,\n  TARGET_TEST_LINK = 43,\n  TARGET_TEST_LUIGI = 44,\n  TARGET_TEST_MARTH = 45,\n  TARGET_TEST_MEWTWO = 46,\n  TARGET_TEST_NESS = 47,\n  TARGET_TEST_PEACH = 48,\n  TARGET_TEST_PICHU = 49,\n  TARGET_TEST_PIKACHU = 50,\n  TARGET_TEST_JIGGLYPUFF = 51,\n  TARGET_TEST_SAMUS = 52,\n  TARGET_TEST_SHEIK = 53,\n  TARGET_TEST_YOSHI = 54,\n  TARGET_TEST_ZELDA = 55,\n  TARGET_TEST_GAME_AND_WATCH = 56,\n  TARGET_TEST_ROY = 57,\n  TARGET_TEST_GANONDORF = 58,\n  RACE_TO_THE_FINISH = 82,\n  GRAB_THE_TROPHIES = 83,\n  HOME_RUN_CONTEST = 84,\n  ALL_STAR_LOBBY = 85,\n  EVENT_ONE = 202,\n  EVENT_EIGHTEEN = 203,\n  EVENT_THREE = 204,\n  EVENT_FOUR = 205,\n  EVENT_FIVE = 206,\n  EVENT_SIX = 207,\n  EVENT_SEVEN = 208,\n  EVENT_EIGHT = 209,\n  EVENT_NINE = 210,\n  EVENT_TEN_PART_ONE = 211,\n  EVENT_ELEVEN = 212,\n  EVENT_TWELVE = 213,\n  EVENT_THIRTEEN = 214,\n  EVENT_FOURTEEN = 215,\n  EVENT_THIRTY_SEVEN = 216,\n  EVENT_SIXTEEN = 217,\n  EVENT_SEVENTEEN = 218,\n  EVENT_TWO = 219,\n  EVENT_NINETEEN = 220,\n  EVENT_TWENTY_PART_ONE = 221,\n  EVENT_TWENTY_ONE = 222,\n  EVENT_TWENTY_TWO = 223,\n  EVENT_TWENTY_SEVEN = 224,\n  EVENT_TWENTY_FOUR = 225,\n  EVENT_TWENTY_FIVE = 226,\n  EVENT_TWENTY_SIX = 227,\n  EVENT_TWENTY_THREE = 228,\n  EVENT_TWENTY_EIGHT = 229,\n  EVENT_TWENTY_NINE = 230,\n  EVENT_THIRTY_PART_ONE = 231,\n  EVENT_THIRTY_ONE = 232,\n  EVENT_THIRTY_TWO = 233,\n  EVENT_THIRTY_THREE = 234,\n  EVENT_THIRTY_FOUR = 235,\n  EVENT_FORTY_EIGHT = 236,\n  EVENT_THIRTY_SIX_PART_ONE = 237,\n  EVENT_FIFTEEN = 238,\n  EVENT_THIRTY_EIGHT = 239,\n  EVENT_THIRTY_NINE = 240,\n  EVENT_FORTY_PART_ONE = 241,\n  EVENT_FORTY_ONE = 242,\n  EVENT_FORTY_TWO = 243,\n  EVENT_FORTY_THREE = 244,\n  EVENT_FORTY_FOUR = 245,\n  EVENT_FORTY_FIVE = 246,\n  EVENT_FORTY_SIX = 247,\n  EVENT_FORTY_SEVEN = 248,\n  EVENT_THIRTY_FIVE = 249,\n  EVENT_FORTY_NINE_PART_ONE = 250,\n  EVENT_FIFTY = 251,\n  EVENT_FIFTY_ONE = 252,\n  EVENT_TEN_PART_TWO = 253,\n  EVENT_TEN_PART_THREE = 254,\n  EVENT_TEN_PART_FOUR = 255,\n  EVENT_TEN_PART_FIVE = 256,\n  EVENT_TWENTY_PART_TWO = 257,\n  EVENT_TWENTY_PART_THREE = 258,\n  EVENT_TWENTY_PART_FOUR = 259,\n  EVENT_TWENTY_PART_FIVE = 260,\n  EVENT_THIRTY_PART_TWO = 261,\n  EVENT_THIRTY_PART_THREE = 262,\n  EVENT_THIRTY_PART_FOUR = 263,\n  EVENT_FORTY_PART_TWO = 264,\n  EVENT_FORTY_PART_THREE = 265,\n  EVENT_FORTY_PART_FOUR = 266,\n  EVENT_FORTY_PART_FIVE = 267,\n  EVENT_FORTY_NINE_PART_TWO = 268,\n  EVENT_FORTY_NINE_PART_THREE = 269,\n  EVENT_FORTY_NINE_PART_FOUR = 270,\n  EVENT_FORTY_NINE_PART_FIVE = 271,\n  EVENT_FORTY_NINE_PART_SIX = 272,\n  EVENT_THIRTY_SIX_PART_TWO = 273,\n  MULTI_MAN_MELEE = 285,\n}\n","import type { GameStartType, PostFrameUpdateType } from \"../types\";\n\nexport interface StatsType {\n  gameComplete: boolean;\n  lastFrame: number;\n  playableFrameCount: number;\n  stocks: StockType[];\n  conversions: ConversionType[];\n  combos: ComboType[];\n  actionCounts: ActionCountsType[];\n  overall: OverallType[];\n}\n\nexport type StadiumStatsType = HomeRunContestResultType | TargetTestResultType;\n\nexport interface TargetTestResultType {\n  type: \"target-test\";\n  targetBreaks: TargetBreakType[];\n}\n\nexport interface HomeRunContestResultType {\n  type: \"home-run-contest\";\n  distance: number;\n  units: \"feet\" | \"meters\";\n}\n\nexport interface RatioType {\n  count: number;\n  total: number;\n  ratio: number | null;\n}\n\nexport interface PlayerIndexedType {\n  playerIndex: number;\n  opponentIndex: number;\n}\n\nexport interface DurationType {\n  startFrame: number;\n  endFrame?: number | null;\n}\n\nexport interface DamageType {\n  startPercent: number;\n  currentPercent: number;\n  endPercent?: number | null;\n}\n\nexport interface StockType extends DurationType, DamageType {\n  playerIndex: number;\n  count: number;\n  deathAnimation?: number | null;\n}\n\nexport interface MoveLandedType {\n  playerIndex: number;\n  frame: number;\n  moveId: number;\n  hitCount: number;\n  damage: number;\n}\n\nexport interface ComboType extends DurationType, DamageType {\n  playerIndex: number;\n  moves: MoveLandedType[];\n  didKill: boolean;\n  lastHitBy: number | null;\n}\n\nexport interface TargetBreakType {\n  spawnId: number;\n  frameDestroyed: number | null;\n  positionX: number;\n  positionY: number;\n}\n\nexport interface ConversionType extends ComboType {\n  openingType: string;\n}\n\nexport interface ActionCountsType {\n  playerIndex: number;\n  wavedashCount: number;\n  wavelandCount: number;\n  airDodgeCount: number;\n  dashDanceCount: number;\n  spotDodgeCount: number;\n  ledgegrabCount: number;\n  rollCount: number;\n  lCancelCount: {\n    success: number;\n    fail: number;\n  };\n  attackCount: {\n    jab1: number;\n    jab2: number;\n    jab3: number;\n    jabm: number;\n    dash: number;\n    ftilt: number;\n    utilt: number;\n    dtilt: number;\n    fsmash: number;\n    usmash: number;\n    dsmash: number;\n    nair: number;\n    fair: number;\n    bair: number;\n    uair: number;\n    dair: number;\n  };\n  grabCount: {\n    success: number;\n    fail: number;\n  };\n  throwCount: {\n    up: number;\n    forward: number;\n    back: number;\n    down: number;\n  };\n  groundTechCount: {\n    // tech away/in are in reference to the opponents position and not the stage\n    away: number;\n    in: number;\n    neutral: number;\n    fail: number;\n  };\n  wallTechCount: {\n    success: number;\n    fail: number;\n  };\n}\n\nexport interface InputCountsType {\n  buttons: number;\n  triggers: number;\n  joystick: number;\n  cstick: number;\n  total: number;\n}\n\nexport interface OverallType {\n  playerIndex: number;\n  inputCounts: InputCountsType;\n  conversionCount: number;\n  totalDamage: number;\n  killCount: number;\n  successfulConversions: RatioType;\n  inputsPerMinute: RatioType;\n  digitalInputsPerMinute: RatioType;\n  openingsPerKill: RatioType;\n  damagePerOpening: RatioType;\n  neutralWinRatio: RatioType;\n  counterHitRatio: RatioType;\n  beneficialTradeRatio: RatioType;\n}\n\nexport enum State {\n  // Animation ID ranges\n  DAMAGE_START = 0x4b,\n  DAMAGE_END = 0x5b,\n  CAPTURE_START = 0xdf,\n  CAPTURE_END = 0xe8,\n  GUARD_START = 0xb2,\n  GUARD_END = 0xb6,\n  GROUNDED_CONTROL_START = 0xe,\n  GROUNDED_CONTROL_END = 0x18,\n  SQUAT_START = 0x27,\n  SQUAT_END = 0x29,\n  DOWN_START = 0xb7,\n  DOWN_END = 0xc6,\n  TECH_START = 0xc7,\n  TECH_END = 0xcc,\n  DYING_START = 0x0,\n  DYING_END = 0xa,\n  CONTROLLED_JUMP_START = 0x18,\n  CONTROLLED_JUMP_END = 0x22,\n  GROUND_ATTACK_START = 0x2c,\n  GROUND_ATTACK_END = 0x40,\n  AERIAL_ATTACK_START = 0x41,\n  AERIAL_ATTACK_END = 0x4a,\n  ATTACK_FTILT_START = 0x33,\n  ATTACK_FTILT_END = 0x37,\n  ATTACK_FSMASH_START = 0x3a,\n  ATTACK_FSMASH_END = 0x3e,\n\n  // Animation ID specific\n  ROLL_FORWARD = 0xe9,\n  ROLL_BACKWARD = 0xea,\n  SPOT_DODGE = 0xeb,\n  AIR_DODGE = 0xec,\n  ACTION_WAIT = 0xe,\n  ACTION_DASH = 0x14,\n  ACTION_KNEE_BEND = 0x18,\n  GUARD_ON = 0xb2,\n  TECH_MISS_UP = 0xb7,\n  JAB_RESET_UP = 0xb9,\n  TECH_MISS_DOWN = 0xbf,\n  JAB_RESET_DOWN = 0xc1,\n  NEUTRAL_TECH = 0xc7,\n  FORWARD_TECH = 0xc8,\n  BACKWARD_TECH = 0xc9,\n  WALL_TECH = 0xca,\n  MISSED_WALL_TECH = 0xf7,\n  DASH = 0x14,\n  TURN = 0x12,\n  LANDING_FALL_SPECIAL = 0x2b,\n  JUMP_FORWARD = 0x19,\n  JUMP_BACKWARD = 0x1a,\n  FALL_FORWARD = 0x1e,\n  FALL_BACKWARD = 0x1f,\n  GRAB = 0xd4,\n  DASH_GRAB = 0xd6,\n  GRAB_WAIT = 0xd8,\n  PUMMEL = 0xd9,\n  CLIFF_CATCH = 0xfc,\n  THROW_UP = 0xdd,\n  THROW_FORWARD = 0xdb,\n  THROW_DOWN = 0xde,\n  THROW_BACK = 0xdc,\n  DAMAGE_FALL = 0x26,\n  ATTACK_JAB1 = 0x2c,\n  ATTACK_JAB2 = 0x2d,\n  ATTACK_JAB3 = 0x2e,\n  ATTACK_JABM = 0x2f,\n  ATTACK_DASH = 0x32,\n  ATTACK_UTILT = 0x38,\n  ATTACK_DTILT = 0x39,\n  ATTACK_USMASH = 0x3f,\n  ATTACK_DSMASH = 0x40,\n  AERIAL_NAIR = 0x41,\n  AERIAL_FAIR = 0x42,\n  AERIAL_BAIR = 0x43,\n  AERIAL_UAIR = 0x44,\n  AERIAL_DAIR = 0x45,\n\n  // Weird GnW IDs\n  GNW_JAB1 = 0x155,\n  GNW_JABM = 0x156,\n  GNW_DTILT = 0x159,\n  GNW_FSMASH = 0x15a,\n  GNW_NAIR = 0x15b,\n  GNW_BAIR = 0x15c,\n  GNW_UAIR = 0x15d,\n\n  // Peach FSMASH ID\n  // FSMASH1 = Golf Club, FSMASH2 = Frying Pan, FSMASH3 = Tennis Racket\n  PEACH_FSMASH1 = 0x15d,\n  PEACH_FSMASH2 = 0x15e,\n  PEACH_FSMASH3 = 0x15f,\n\n  // Command Grabs\n  BARREL_WAIT = 0x125,\n  COMMAND_GRAB_RANGE1_START = 0x10a,\n  COMMAND_GRAB_RANGE1_END = 0x130,\n\n  COMMAND_GRAB_RANGE2_START = 0x147,\n  COMMAND_GRAB_RANGE2_END = 0x152,\n}\n\nexport const Timers = {\n  PUNISH_RESET_FRAMES: 45,\n  RECOVERY_RESET_FRAMES: 45,\n  COMBO_STRING_RESET_FRAMES: 45,\n};\n\nexport function getSinglesPlayerPermutationsFromSettings(settings: GameStartType): PlayerIndexedType[] {\n  if (!settings || settings.players.length !== 2) {\n    // Only return opponent indices for singles\n    return [];\n  }\n\n  return [\n    {\n      playerIndex: settings.players[0]!.playerIndex,\n      opponentIndex: settings.players[1]!.playerIndex,\n    },\n    {\n      playerIndex: settings.players[1]!.playerIndex,\n      opponentIndex: settings.players[0]!.playerIndex,\n    },\n  ];\n}\n\nexport function didLoseStock(frame: PostFrameUpdateType, prevFrame: PostFrameUpdateType): boolean {\n  if (!frame || !prevFrame) {\n    return false;\n  }\n\n  return prevFrame.stocksRemaining! - frame.stocksRemaining! > 0;\n}\n\nexport function isInControl(state: number): boolean {\n  const ground = state >= State.GROUNDED_CONTROL_START && state <= State.GROUNDED_CONTROL_END;\n  const squat = state >= State.SQUAT_START && state <= State.SQUAT_END;\n  const groundAttack = state > State.GROUND_ATTACK_START && state <= State.GROUND_ATTACK_END;\n  const isGrab = state === State.GRAB;\n  // TODO: Add grounded b moves?\n  return ground || squat || groundAttack || isGrab;\n}\n\nexport function isTeching(state: number): boolean {\n  return state >= State.TECH_START && state <= State.TECH_END;\n}\n\nexport function isDown(state: number): boolean {\n  return state >= State.DOWN_START && state <= State.DOWN_END;\n}\n\nexport function isDamaged(state: number): boolean {\n  return (\n    (state >= State.DAMAGE_START && state <= State.DAMAGE_END) ||\n    state === State.DAMAGE_FALL ||\n    state === State.JAB_RESET_UP ||\n    state === State.JAB_RESET_DOWN\n  );\n}\n\nexport function isGrabbed(state: number): boolean {\n  return state >= State.CAPTURE_START && state <= State.CAPTURE_END;\n}\n\n// TODO: Find better implementation of 3 seperate ranges\nexport function isCommandGrabbed(state: number): boolean {\n  return (\n    ((state >= State.COMMAND_GRAB_RANGE1_START && state <= State.COMMAND_GRAB_RANGE1_END) ||\n      (state >= State.COMMAND_GRAB_RANGE2_START && state <= State.COMMAND_GRAB_RANGE2_END)) &&\n    state !== State.BARREL_WAIT\n  );\n}\n\nexport function isDead(state: number): boolean {\n  return state >= State.DYING_START && state <= State.DYING_END;\n}\n\nexport function calcDamageTaken(frame: PostFrameUpdateType, prevFrame: PostFrameUpdateType): number {\n  const percent = frame.percent ?? 0;\n  const prevPercent = prevFrame.percent ?? 0;\n\n  return percent - prevPercent;\n}\n","import { get, isEqual, keyBy, last, set, size } from \"lodash\";\n\nimport type { FrameEntryType, GameStartType } from \"../types\";\nimport type { ActionCountsType, PlayerIndexedType } from \"./common\";\nimport { getSinglesPlayerPermutationsFromSettings, State } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\n// Frame pattern that indicates a dash dance turn was executed\nconst dashDanceAnimations = [State.DASH, State.TURN, State.DASH];\n\ninterface PlayerActionState {\n  playerCounts: ActionCountsType;\n  animations: number[];\n  actionFrameCounters: number[];\n}\n\nexport class ActionsComputer implements StatComputer<ActionCountsType[]> {\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private state = new Map<PlayerIndexedType, PlayerActionState>();\n\n  public setup(settings: GameStartType): void {\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.playerPermutations.forEach((indices) => {\n      const playerCounts: ActionCountsType = {\n        playerIndex: indices.playerIndex,\n        wavedashCount: 0,\n        wavelandCount: 0,\n        airDodgeCount: 0,\n        dashDanceCount: 0,\n        spotDodgeCount: 0,\n        ledgegrabCount: 0,\n        rollCount: 0,\n        lCancelCount: {\n          success: 0,\n          fail: 0,\n        },\n        attackCount: {\n          jab1: 0,\n          jab2: 0,\n          jab3: 0,\n          jabm: 0,\n          dash: 0,\n          ftilt: 0,\n          utilt: 0,\n          dtilt: 0,\n          fsmash: 0,\n          usmash: 0,\n          dsmash: 0,\n          nair: 0,\n          fair: 0,\n          bair: 0,\n          uair: 0,\n          dair: 0,\n        },\n        grabCount: {\n          success: 0,\n          fail: 0,\n        },\n        throwCount: {\n          up: 0,\n          forward: 0,\n          back: 0,\n          down: 0,\n        },\n        groundTechCount: {\n          // tech away/in are in reference to the opponents position and not the stage\n          away: 0,\n          in: 0,\n          neutral: 0,\n          fail: 0,\n        },\n        wallTechCount: {\n          success: 0,\n          fail: 0,\n        },\n      };\n      const playerState: PlayerActionState = {\n        playerCounts: playerCounts,\n        animations: [],\n        actionFrameCounters: [],\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleActionCompute(state, indices, frame);\n      }\n    });\n  }\n\n  public fetch(): ActionCountsType[] {\n    return Array.from(this.state.values()).map((val) => val.playerCounts);\n  }\n}\n\nfunction isMissGroundTech(animation: State): boolean {\n  return animation === State.TECH_MISS_DOWN || animation === State.TECH_MISS_UP;\n}\n\nfunction isRolling(animation: State): boolean {\n  return animation === State.ROLL_BACKWARD || animation === State.ROLL_FORWARD;\n}\n\nfunction isGrabAction(animation: State): boolean {\n  // Includes Grab pull, wait, pummel, and throws\n  return animation > State.GRAB && animation <= State.THROW_DOWN && animation !== State.DASH_GRAB;\n}\n\nfunction isGrabbing(animation: State): boolean {\n  return animation === State.GRAB || animation === State.DASH_GRAB;\n}\n\nfunction isAerialAttack(animation: State): boolean {\n  return animation >= State.AERIAL_ATTACK_START && animation <= State.AERIAL_ATTACK_END;\n}\n\nfunction isForwardTilt(animation: State): boolean {\n  return animation >= State.ATTACK_FTILT_START && animation <= State.ATTACK_FTILT_END;\n}\n\nfunction isForwardSmash(animation: State): boolean {\n  return animation >= State.ATTACK_FSMASH_START && animation <= State.ATTACK_FSMASH_END;\n}\n\nfunction handleActionCompute(state: PlayerActionState, indices: PlayerIndexedType, frame: FrameEntryType): void {\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const opponentFrame = frame.players[indices.opponentIndex]!.post;\n  const incrementCount = (field: string, condition: boolean): void => {\n    if (!condition) {\n      return;\n    }\n\n    const current: number = get(state.playerCounts, field, 0);\n    set(state.playerCounts, field, current + 1);\n  };\n\n  // Manage animation state\n  const currentAnimation = playerFrame.actionStateId!;\n  state.animations.push(currentAnimation);\n  const currentFrameCounter = playerFrame.actionStateCounter!;\n  state.actionFrameCounters.push(currentFrameCounter);\n\n  // Grab last 3 frames\n  const last3Frames = state.animations.slice(-3);\n  const prevAnimation = last3Frames[last3Frames.length - 2] as number;\n  const prevFrameCounter = state.actionFrameCounters[state.actionFrameCounters.length - 2] as number;\n\n  // New action if new animation or frame counter goes back down (repeated action)\n  const isNewAction = currentAnimation !== prevAnimation || prevFrameCounter > currentFrameCounter;\n  if (!isNewAction) {\n    return;\n  }\n\n  // Increment counts based on conditions\n  const didDashDance = isEqual(last3Frames, dashDanceAnimations);\n  incrementCount(\"dashDanceCount\", didDashDance);\n\n  incrementCount(\"rollCount\", isRolling(currentAnimation));\n  incrementCount(\"spotDodgeCount\", currentAnimation === State.SPOT_DODGE);\n  incrementCount(\"airDodgeCount\", currentAnimation === State.AIR_DODGE);\n  incrementCount(\"ledgegrabCount\", currentAnimation === State.CLIFF_CATCH);\n\n  // Grabs\n  incrementCount(\"grabCount.success\", isGrabbing(prevAnimation) && isGrabAction(currentAnimation));\n  incrementCount(\"grabCount.fail\", isGrabbing(prevAnimation) && !isGrabAction(currentAnimation));\n  if (currentAnimation === State.DASH_GRAB && prevAnimation === State.ATTACK_DASH) {\n    state.playerCounts.attackCount.dash -= 1; // subtract from dash attack if boost grab\n  }\n\n  // Basic attacks\n  incrementCount(\"attackCount.jab1\", currentAnimation === State.ATTACK_JAB1);\n  incrementCount(\"attackCount.jab2\", currentAnimation === State.ATTACK_JAB2);\n  incrementCount(\"attackCount.jab3\", currentAnimation === State.ATTACK_JAB3);\n  incrementCount(\"attackCount.jabm\", currentAnimation === State.ATTACK_JABM);\n  incrementCount(\"attackCount.dash\", currentAnimation === State.ATTACK_DASH);\n  incrementCount(\"attackCount.ftilt\", isForwardTilt(currentAnimation));\n  incrementCount(\"attackCount.utilt\", currentAnimation === State.ATTACK_UTILT);\n  incrementCount(\"attackCount.dtilt\", currentAnimation === State.ATTACK_DTILT);\n  incrementCount(\"attackCount.fsmash\", isForwardSmash(currentAnimation));\n  incrementCount(\"attackCount.usmash\", currentAnimation === State.ATTACK_USMASH);\n  incrementCount(\"attackCount.dsmash\", currentAnimation === State.ATTACK_DSMASH);\n  incrementCount(\"attackCount.nair\", currentAnimation === State.AERIAL_NAIR);\n  incrementCount(\"attackCount.fair\", currentAnimation === State.AERIAL_FAIR);\n  incrementCount(\"attackCount.bair\", currentAnimation === State.AERIAL_BAIR);\n  incrementCount(\"attackCount.uair\", currentAnimation === State.AERIAL_UAIR);\n  incrementCount(\"attackCount.dair\", currentAnimation === State.AERIAL_DAIR);\n\n  // GnW is weird and has unique IDs for some moves\n  if (playerFrame.internalCharacterId === 0x18) {\n    incrementCount(\"attackCount.jab1\", currentAnimation === State.GNW_JAB1);\n    incrementCount(\"attackCount.jabm\", currentAnimation === State.GNW_JABM);\n    incrementCount(\"attackCount.dtilt\", currentAnimation === State.GNW_DTILT);\n    incrementCount(\"attackCount.fsmash\", currentAnimation === State.GNW_FSMASH);\n    incrementCount(\"attackCount.nair\", currentAnimation === State.GNW_NAIR);\n    incrementCount(\"attackCount.bair\", currentAnimation === State.GNW_BAIR);\n    incrementCount(\"attackCount.uair\", currentAnimation === State.GNW_UAIR);\n  }\n\n  // Peach is also weird and has a unique ID for her fsmash\n  // FSMASH1 = Golf Club, FSMASH2 = Frying Pan, FSMASH3 = Tennis Racket\n  if (playerFrame.internalCharacterId === 0x09) {\n    incrementCount(\"attackCount.fsmash\", currentAnimation === State.PEACH_FSMASH1);\n    incrementCount(\"attackCount.fsmash\", currentAnimation === State.PEACH_FSMASH2);\n    incrementCount(\"attackCount.fsmash\", currentAnimation === State.PEACH_FSMASH3);\n  }\n\n  // Throws\n  incrementCount(\"throwCount.up\", currentAnimation === State.THROW_UP);\n  incrementCount(\"throwCount.forward\", currentAnimation === State.THROW_FORWARD);\n  incrementCount(\"throwCount.down\", currentAnimation === State.THROW_DOWN);\n  incrementCount(\"throwCount.back\", currentAnimation === State.THROW_BACK);\n\n  // Techs\n  const opponentDir = playerFrame.positionX! > opponentFrame.positionX! ? -1 : 1;\n  const facingOpponent = playerFrame.facingDirection === opponentDir;\n\n  incrementCount(\"groundTechCount.fail\", isMissGroundTech(currentAnimation));\n  incrementCount(\"groundTechCount.in\", currentAnimation === State.FORWARD_TECH && facingOpponent);\n  incrementCount(\"groundTechCount.in\", currentAnimation === State.BACKWARD_TECH && !facingOpponent);\n  incrementCount(\"groundTechCount.neutral\", currentAnimation === State.NEUTRAL_TECH);\n  incrementCount(\"groundTechCount.away\", currentAnimation === State.BACKWARD_TECH && facingOpponent);\n  incrementCount(\"groundTechCount.away\", currentAnimation === State.FORWARD_TECH && !facingOpponent);\n  incrementCount(\"wallTechCount.success\", currentAnimation === State.WALL_TECH);\n  incrementCount(\"wallTechCount.fail\", currentAnimation === State.MISSED_WALL_TECH);\n\n  if (isAerialAttack(currentAnimation)) {\n    incrementCount(\"lCancelCount.success\", playerFrame.lCancelStatus === 1);\n    incrementCount(\"lCancelCount.fail\", playerFrame.lCancelStatus === 2);\n  }\n\n  // Handles wavedash detection (and waveland)\n  handleActionWavedash(state.playerCounts, state.animations);\n}\n\nfunction handleActionWavedash(counts: ActionCountsType, animations: State[]): void {\n  const currentAnimation = last(animations);\n  const prevAnimation = animations[animations.length - 2] as number;\n\n  const isSpecialLanding = currentAnimation === State.LANDING_FALL_SPECIAL;\n  const isAcceptablePrevious = isWavedashInitiationAnimation(prevAnimation);\n  const isPossibleWavedash = isSpecialLanding && isAcceptablePrevious;\n\n  if (!isPossibleWavedash) {\n    return;\n  }\n\n  // Here we special landed, it might be a wavedash, let's check\n  // We grab the last 8 frames here because that should be enough time to execute a\n  // wavedash. This number could be tweaked if we find false negatives\n  const recentFrames = animations.slice(-8);\n  const recentAnimations = keyBy(recentFrames, (animation) => animation);\n\n  if (size(recentAnimations) === 2 && recentAnimations[State.AIR_DODGE]) {\n    // If the only other animation is air dodge, this might be really late to the point\n    // where it was actually an air dodge. Air dodge animation is really long\n    return;\n  }\n\n  if (recentAnimations[State.AIR_DODGE]) {\n    // If one of the recent animations was an air dodge, let's remove that from the\n    // air dodge counter, we don't want to count air dodges used to wavedash/land\n    counts.airDodgeCount -= 1;\n  }\n\n  if (recentAnimations[State.ACTION_KNEE_BEND]) {\n    // If a jump was started recently, we will consider this a wavedash\n    counts.wavedashCount += 1;\n  } else {\n    // If there was no jump recently, this is a waveland\n    counts.wavelandCount += 1;\n  }\n}\n\nfunction isWavedashInitiationAnimation(animation: State): boolean {\n  if (animation === State.AIR_DODGE) {\n    return true;\n  }\n\n  const isAboveMin = animation >= State.CONTROLLED_JUMP_START;\n  const isBelowMax = animation <= State.CONTROLLED_JUMP_END;\n  return isAboveMin && isBelowMax;\n}\n","import { EventEmitter } from \"events\";\nimport { last } from \"lodash\";\n\nimport type { FrameEntryType, FramesType, GameStartType, PostFrameUpdateType } from \"../types\";\nimport type { ComboType, MoveLandedType, PlayerIndexedType } from \"./common\";\nimport {\n  calcDamageTaken,\n  didLoseStock,\n  getSinglesPlayerPermutationsFromSettings,\n  isCommandGrabbed,\n  isDamaged,\n  isDead,\n  isDown,\n  isGrabbed,\n  isTeching,\n  Timers,\n} from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\nexport enum ComboEvent {\n  COMBO_START = \"COMBO_START\",\n  COMBO_EXTEND = \"COMBO_EXTEND\",\n  COMBO_END = \"COMBO_END\",\n}\n\ninterface ComboState {\n  combo: ComboType | null;\n  move: MoveLandedType | null;\n  resetCounter: number;\n  lastHitAnimation: number | null;\n  event: ComboEvent | null;\n}\n\nexport class ComboComputer extends EventEmitter implements StatComputer<ComboType[]> {\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private state = new Map<PlayerIndexedType, ComboState>();\n  private combos = new Array<ComboType>();\n  private settings: GameStartType | null = null;\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.settings = settings;\n    this.state = new Map();\n    this.combos = [];\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: ComboState = {\n        combo: null,\n        move: null,\n        resetCounter: 0,\n        lastHitAnimation: null,\n        event: null,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleComboCompute(allFrames, state, indices, frame, this.combos);\n\n        // Emit an event for the new combo\n        if (state.event !== null) {\n          this.emit(state.event, {\n            combo: last(this.combos),\n            settings: this.settings,\n          });\n          state.event = null;\n        }\n      }\n    });\n  }\n\n  public fetch(): ComboType[] {\n    return this.combos;\n  }\n}\n\nfunction handleComboCompute(\n  frames: FramesType,\n  state: ComboState,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n  combos: ComboType[],\n): void {\n  const currentFrameNumber = frame.frame;\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const opponentFrame = frame.players[indices.opponentIndex]!.post;\n\n  const prevFrameNumber = currentFrameNumber - 1;\n  let prevPlayerFrame: PostFrameUpdateType | null = null;\n  let prevOpponentFrame: PostFrameUpdateType | null = null;\n\n  if (frames[prevFrameNumber]) {\n    prevPlayerFrame = frames[prevFrameNumber]!.players[indices.playerIndex]!.post;\n    prevOpponentFrame = frames[prevFrameNumber]!.players[indices.opponentIndex]!.post;\n  }\n\n  const oppActionStateId = opponentFrame.actionStateId!;\n  const opntIsDamaged = isDamaged(oppActionStateId);\n  const opntIsGrabbed = isGrabbed(oppActionStateId);\n  const opntIsCommandGrabbed = isCommandGrabbed(oppActionStateId);\n  const opntDamageTaken = prevOpponentFrame ? calcDamageTaken(opponentFrame, prevOpponentFrame) : 0;\n\n  // Keep track of whether actionState changes after a hit. Used to compute move count\n  // When purely using action state there was a bug where if you did two of the same\n  // move really fast (such as ganon's jab), it would count as one move. Added\n  // the actionStateCounter at this point which counts the number of frames since\n  // an animation started. Should be more robust, for old files it should always be\n  // null and null < null = false\n  const actionChangedSinceHit = playerFrame.actionStateId !== state.lastHitAnimation;\n  const actionCounter = playerFrame.actionStateCounter!;\n  const prevActionCounter = prevPlayerFrame ? prevPlayerFrame.actionStateCounter! : 0;\n  const actionFrameCounterReset = actionCounter < prevActionCounter;\n  if (actionChangedSinceHit || actionFrameCounterReset) {\n    state.lastHitAnimation = null;\n  }\n\n  // If opponent took damage and was put in some kind of stun this frame, either\n  // start a combo or count the moves for the existing combo\n  if (opntIsDamaged || opntIsGrabbed || opntIsCommandGrabbed) {\n    let comboStarted = false;\n    if (!state.combo) {\n      state.combo = {\n        playerIndex: indices.opponentIndex,\n        startFrame: currentFrameNumber,\n        endFrame: null,\n        startPercent: prevOpponentFrame ? prevOpponentFrame.percent ?? 0 : 0,\n        currentPercent: opponentFrame.percent ?? 0,\n        endPercent: null,\n        moves: [],\n        didKill: false,\n        lastHitBy: indices.playerIndex,\n      };\n\n      combos.push(state.combo);\n\n      // Track whether this is a new combo or not\n      comboStarted = true;\n    }\n\n    if (opntDamageTaken) {\n      // If animation of last hit has been cleared that means this is a new move. This\n      // prevents counting multiple hits from the same move such as fox's drill\n      if (state.lastHitAnimation === null) {\n        state.move = {\n          playerIndex: indices.playerIndex,\n          frame: currentFrameNumber,\n          moveId: playerFrame.lastAttackLanded!,\n          hitCount: 0,\n          damage: 0,\n        };\n\n        state.combo.moves.push(state.move);\n\n        // Make sure we don't overwrite the START event\n        if (!comboStarted) {\n          state.event = ComboEvent.COMBO_EXTEND;\n        }\n      }\n\n      if (state.move) {\n        state.move.hitCount += 1;\n        state.move.damage += opntDamageTaken;\n      }\n\n      // Store previous frame animation to consider the case of a trade, the previous\n      // frame should always be the move that actually connected... I hope\n      state.lastHitAnimation = prevPlayerFrame ? prevPlayerFrame.actionStateId : null;\n    }\n\n    if (comboStarted) {\n      state.event = ComboEvent.COMBO_START;\n    }\n  }\n\n  if (!state.combo) {\n    // The rest of the function handles combo termination logic, so if we don't\n    // have a combo started, there is no need to continue\n    return;\n  }\n\n  const opntIsTeching = isTeching(oppActionStateId);\n  const opntIsDowned = isDown(oppActionStateId);\n  const opntDidLoseStock = prevOpponentFrame && didLoseStock(opponentFrame, prevOpponentFrame);\n  const opntIsDying = isDead(oppActionStateId);\n\n  // Update percent if opponent didn't lose stock\n  if (!opntDidLoseStock) {\n    state.combo.currentPercent = opponentFrame.percent ?? 0;\n  }\n\n  if (opntIsDamaged || opntIsGrabbed || opntIsCommandGrabbed || opntIsTeching || opntIsDowned || opntIsDying) {\n    // If opponent got grabbed or damaged, reset the reset counter\n    state.resetCounter = 0;\n  } else {\n    state.resetCounter += 1;\n  }\n\n  let shouldTerminate = false;\n\n  // Termination condition 1 - player kills opponent\n  if (opntDidLoseStock) {\n    state.combo.didKill = true;\n    shouldTerminate = true;\n  }\n\n  // Termination condition 2 - combo resets on time\n  if (state.resetCounter > Timers.COMBO_STRING_RESET_FRAMES) {\n    shouldTerminate = true;\n  }\n\n  // If combo should terminate, mark the end states and add it to list\n  if (shouldTerminate) {\n    state.combo.endFrame = playerFrame.frame;\n    state.combo.endPercent = prevOpponentFrame ? prevOpponentFrame.percent ?? 0 : 0;\n    state.event = ComboEvent.COMBO_END;\n\n    state.combo = null;\n    state.move = null;\n  }\n}\n","export enum Command {\n  SPLIT_MESSAGE = 0x10,\n  MESSAGE_SIZES = 0x35,\n  GAME_START = 0x36,\n  PRE_FRAME_UPDATE = 0x37,\n  POST_FRAME_UPDATE = 0x38,\n  GAME_END = 0x39,\n  FRAME_START = 0x3a,\n  ITEM_UPDATE = 0x3b,\n  FRAME_BOOKEND = 0x3c,\n  GECKO_LIST = 0x3d,\n}\n\nexport interface PlayerType {\n  playerIndex: number;\n  port: number;\n  characterId: number | null;\n  type: number | null;\n  startStocks: number | null;\n  characterColor: number | null;\n  teamShade: number | null;\n  handicap: number | null;\n  teamId: number | null;\n  staminaMode: boolean | null;\n  silentCharacter: boolean | null;\n  invisible: boolean | null;\n  lowGravity: boolean | null;\n  blackStockIcon: boolean | null;\n  metal: boolean | null;\n  startOnAngelPlatform: boolean | null;\n  rumbleEnabled: boolean | null;\n  cpuLevel: number | null;\n  offenseRatio: number | null;\n  defenseRatio: number | null;\n  modelScale: number | null;\n  controllerFix: string | null;\n  nametag: string | null;\n  displayName: string;\n  connectCode: string;\n  userId: string;\n}\n\nexport enum GameMode {\n  VS = 0x02,\n  ONLINE = 0x08,\n  TARGET_TEST = 0x0f,\n  HOME_RUN_CONTEST = 0x20,\n}\n\nexport enum Language {\n  JAPANESE = 0,\n  ENGLISH = 1,\n}\n\nexport interface GameStartType {\n  slpVersion: string | null;\n  timerType: TimerType | null;\n  inGameMode: number | null;\n  friendlyFireEnabled: boolean | null;\n  isTeams: boolean | null;\n  stageId: number | null;\n  startingTimerSeconds: number | null;\n  itemSpawnBehavior: ItemSpawnType | null;\n  enabledItems: number | null;\n  players: PlayerType[];\n  scene: number | null;\n  gameMode: GameMode | null;\n  language: Language | null;\n  gameInfoBlock: GameInfoType | null;\n  randomSeed: number | null;\n  isPAL: boolean | null;\n  isFrozenPS: boolean | null;\n  matchInfo: MatchInfo | null;\n}\n\ninterface MatchInfo {\n  matchId: string | null;\n  gameNumber: number | null;\n  tiebreakerNumber: number | null;\n}\n\nexport interface FrameStartType {\n  frame: number | null;\n  seed: number | null;\n  sceneFrameCounter: number | null;\n}\n\nexport interface GameInfoType {\n  gameBitfield1: number | null;\n  gameBitfield2: number | null;\n  gameBitfield3: number | null;\n  gameBitfield4: number | null;\n  bombRainEnabled: boolean | null;\n  selfDestructScoreValue: number | null;\n  itemSpawnBitfield1: number | null;\n  itemSpawnBitfield2: number | null;\n  itemSpawnBitfield3: number | null;\n  itemSpawnBitfield4: number | null;\n  itemSpawnBitfield5: number | null;\n  damageRatio: number | null;\n}\n\nexport enum TimerType {\n  NONE = 0b00,\n  DECREASING = 0b10,\n  INCREASING = 0b11,\n}\n\nexport enum ItemSpawnType {\n  OFF = 0xff,\n  VERY_LOW = 0x00,\n  LOW = 0x01,\n  MEDIUM = 0x02,\n  HIGH = 0x03,\n  VERY_HIGH = 0x04,\n}\n\nexport enum EnabledItemType {\n  METAL_BOX = 2 ** 0,\n  CLOAKING_DEVICE = 2 ** 1,\n  POKEBALL = 2 ** 2,\n  // Bits 4 through 8 of item bitfield 1 are unknown\n  UNKNOWN_ITEM_BIT_4 = 2 ** 3,\n  UNKNOWN_ITEM_BIT_5 = 2 ** 4,\n  UNKNOWN_ITEM_BIT_6 = 2 ** 5,\n  UNKNOWN_ITEM_BIT_7 = 2 ** 6,\n  UNKNOWN_ITEM_BIT_8 = 2 ** 7,\n  FAN = 2 ** 8,\n  FIRE_FLOWER = 2 ** 9,\n  SUPER_MUSHROOM = 2 ** 10,\n  POISON_MUSHROOM = 2 ** 11,\n  HAMMER = 2 ** 12,\n  WARP_STAR = 2 ** 13,\n  SCREW_ATTACK = 2 ** 14,\n  BUNNY_HOOD = 2 ** 15,\n  RAY_GUN = 2 ** 16,\n  FREEZIE = 2 ** 17,\n  FOOD = 2 ** 18,\n  MOTION_SENSOR_BOMB = 2 ** 19,\n  FLIPPER = 2 ** 20,\n  SUPER_SCOPE = 2 ** 21,\n  STAR_ROD = 2 ** 22,\n  LIPS_STICK = 2 ** 23,\n  HEART_CONTAINER = 2 ** 24,\n  MAXIM_TOMATO = 2 ** 25,\n  STARMAN = 2 ** 26,\n  HOME_RUN_BAT = 2 ** 27,\n  BEAM_SWORD = 2 ** 28,\n  PARASOL = 2 ** 29,\n  GREEN_SHELL = 2 ** 30,\n  RED_SHELL = 2 ** 31,\n  CAPSULE = 2 ** 32,\n  BOX = 2 ** 33,\n  BARREL = 2 ** 34,\n  EGG = 2 ** 35,\n  PARTY_BALL = 2 ** 36,\n  BARREL_CANNON = 2 ** 37,\n  BOMB_OMB = 2 ** 38,\n  MR_SATURN = 2 ** 39,\n}\n\nexport interface PreFrameUpdateType {\n  frame: number | null;\n  playerIndex: number | null;\n  isFollower: boolean | null;\n  seed: number | null;\n  actionStateId: number | null;\n  positionX: number | null;\n  positionY: number | null;\n  facingDirection: number | null;\n  joystickX: number | null;\n  joystickY: number | null;\n  cStickX: number | null;\n  cStickY: number | null;\n  trigger: number | null;\n  buttons: number | null;\n  physicalButtons: number | null;\n  physicalLTrigger: number | null;\n  physicalRTrigger: number | null;\n  rawJoystickX: number | null;\n  percent: number | null;\n}\n\nexport interface PostFrameUpdateType {\n  frame: number | null;\n  playerIndex: number | null;\n  isFollower: boolean | null;\n  internalCharacterId: number | null;\n  actionStateId: number | null;\n  positionX: number | null;\n  positionY: number | null;\n  facingDirection: number | null;\n  percent: number | null;\n  shieldSize: number | null;\n  lastAttackLanded: number | null;\n  currentComboCount: number | null;\n  lastHitBy: number | null;\n  stocksRemaining: number | null;\n  actionStateCounter: number | null;\n  miscActionState: number | null;\n  isAirborne: boolean | null;\n  lastGroundId: number | null;\n  jumpsRemaining: number | null;\n  lCancelStatus: number | null;\n  hurtboxCollisionState: number | null;\n  selfInducedSpeeds: SelfInducedSpeedsType | null;\n  hitlagRemaining: number | null;\n  animationIndex: number | null;\n}\n\nexport interface SelfInducedSpeedsType {\n  airX: number | null;\n  y: number | null;\n  attackX: number | null;\n  attackY: number | null;\n  groundX: number | null;\n}\n\nexport interface ItemUpdateType {\n  frame: number | null;\n  typeId: number | null;\n  state: number | null;\n  facingDirection: number | null;\n  velocityX: number | null;\n  velocityY: number | null;\n  positionX: number | null;\n  positionY: number | null;\n  damageTaken: number | null;\n  expirationTimer: number | null;\n  spawnId: number | null;\n  missileType: number | null;\n  turnipFace: number | null;\n  chargeShotLaunched: number | null;\n  chargePower: number | null;\n  owner: number | null;\n}\n\nexport interface FrameBookendType {\n  frame: number | null;\n  latestFinalizedFrame: number | null;\n}\n\nexport enum GameEndMethod {\n  UNRESOLVED = 0,\n  RESOLVED = 3,\n  // The following options are only returned in version 2.0.0 onwards\n  TIME = 1,\n  GAME = 2,\n  NO_CONTEST = 7,\n}\n\nexport interface GameEndType {\n  gameEndMethod: GameEndMethod | null;\n  lrasInitiatorIndex: number | null;\n  placements: PlacementType[];\n}\n\nexport interface PlacementType {\n  playerIndex: number;\n  position: number | null;\n}\n\nexport interface GeckoListType {\n  codes: GeckoCodeType[];\n  contents: Uint8Array;\n}\n\nexport interface GeckoCodeType {\n  type: number | null;\n  address: number | null;\n  contents: Uint8Array;\n}\n\nexport interface MetadataType {\n  startAt?: string | null;\n  playedOn?: string | null;\n  lastFrame?: number | null;\n  players?: {\n    [playerIndex: number]: {\n      characters: {\n        [internalCharacterId: number]: number;\n      };\n      names?: {\n        netplay?: string | null;\n        code?: string | null;\n      };\n    };\n  } | null;\n  consoleNick?: string | null;\n}\n\nexport type EventPayloadTypes =\n  | GameStartType\n  | FrameStartType\n  | PreFrameUpdateType\n  | PostFrameUpdateType\n  | ItemUpdateType\n  | FrameBookendType\n  | GameEndType\n  | GeckoListType;\n\nexport type EventCallbackFunc = (\n  command: Command,\n  payload?: EventPayloadTypes | null,\n  buffer?: Uint8Array | null,\n) => boolean;\n\nexport interface FrameEntryType {\n  frame: number;\n  start?: FrameStartType;\n  players: {\n    [playerIndex: number]: {\n      pre: PreFrameUpdateType;\n      post: PostFrameUpdateType;\n    } | null;\n  };\n  followers: {\n    [playerIndex: number]: {\n      pre: PreFrameUpdateType;\n      post: PostFrameUpdateType;\n    } | null;\n  };\n  items?: ItemUpdateType[];\n}\n\nexport enum Frames {\n  FIRST = -123,\n  FIRST_PLAYABLE = -39,\n}\n\nexport interface FramesType {\n  [frameIndex: number]: FrameEntryType;\n}\n\nexport interface RollbackFramesType {\n  [frameIndex: number]: FrameEntryType[];\n}\n\nexport interface RollbackFrames {\n  frames: RollbackFramesType;\n  count: number;\n  lengths: number[];\n}\n","import type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport { Frames } from \"../types\";\nimport type { PlayerIndexedType } from \"./common\";\nimport { getSinglesPlayerPermutationsFromSettings } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\nenum JoystickRegion {\n  DZ = 0,\n  NE = 1,\n  SE = 2,\n  SW = 3,\n  NW = 4,\n  N = 5,\n  E = 6,\n  S = 7,\n  W = 8,\n}\n\nexport interface PlayerInput {\n  playerIndex: number;\n  opponentIndex: number;\n  inputCount: number;\n  joystickInputCount: number;\n  cstickInputCount: number;\n  buttonInputCount: number;\n  triggerInputCount: number;\n}\n\nexport class InputComputer implements StatComputer<PlayerInput[]> {\n  private state = new Map<PlayerIndexedType, PlayerInput>();\n  private playerPermutations = new Array<PlayerIndexedType>();\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: PlayerInput = {\n        playerIndex: indices.playerIndex,\n        opponentIndex: indices.opponentIndex,\n        inputCount: 0,\n        joystickInputCount: 0,\n        cstickInputCount: 0,\n        buttonInputCount: 0,\n        triggerInputCount: 0,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleInputCompute(allFrames, state, indices, frame);\n      }\n    });\n  }\n\n  public fetch(): PlayerInput[] {\n    return Array.from(this.state.values());\n  }\n}\n\nfunction handleInputCompute(\n  frames: FramesType,\n  state: PlayerInput,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n): void {\n  const playerFrame = frame.players[indices.playerIndex]!.pre;\n  const currentFrameNumber = playerFrame.frame!;\n  const prevFrameNumber = currentFrameNumber - 1;\n  const prevPlayerFrame = frames[prevFrameNumber] ? frames[prevFrameNumber]!.players[indices.playerIndex]!.pre : null;\n\n  if (currentFrameNumber < Frames.FIRST_PLAYABLE || !prevPlayerFrame) {\n    // Don't count inputs until the game actually starts\n    return;\n  }\n\n  // First count the number of buttons that go from 0 to 1\n  // Increment action count by amount of button presses\n  const invertedPreviousButtons = ~prevPlayerFrame.physicalButtons!;\n  const currentButtons = playerFrame.physicalButtons!;\n  const buttonChanges = invertedPreviousButtons & currentButtons & 0xfff;\n  const newInputsPressed = countSetBits(buttonChanges);\n  state.inputCount += newInputsPressed;\n  state.buttonInputCount += newInputsPressed;\n\n  // Increment action count when sticks change from one region to another.\n  // Don't increment when stick returns to deadzone\n  const prevAnalogRegion = getJoystickRegion(prevPlayerFrame.joystickX!, prevPlayerFrame.joystickY!);\n  const currentAnalogRegion = getJoystickRegion(playerFrame.joystickX!, playerFrame.joystickY!);\n  if (prevAnalogRegion !== currentAnalogRegion && currentAnalogRegion !== JoystickRegion.DZ) {\n    state.inputCount += 1;\n    state.joystickInputCount += 1;\n  }\n\n  // Do the same for c-stick\n  const prevCstickRegion = getJoystickRegion(prevPlayerFrame.cStickX!, prevPlayerFrame.cStickY!);\n  const currentCstickRegion = getJoystickRegion(playerFrame.cStickX!, playerFrame.cStickY!);\n  if (prevCstickRegion !== currentCstickRegion && currentCstickRegion !== JoystickRegion.DZ) {\n    state.inputCount += 1;\n    state.cstickInputCount += 1;\n  }\n\n  // Increment action on analog trigger... I'm not sure when. This needs revision\n  // Currently will update input count when the button gets pressed past 0.3\n  // Changes from hard shield to light shield should probably count as inputs but\n  // are not counted here\n  if (prevPlayerFrame.physicalLTrigger! < 0.3 && playerFrame.physicalLTrigger! >= 0.3) {\n    state.inputCount += 1;\n    state.triggerInputCount += 1;\n  }\n  if (prevPlayerFrame.physicalRTrigger! < 0.3 && playerFrame.physicalRTrigger! >= 0.3) {\n    state.inputCount += 1;\n    state.triggerInputCount += 1;\n  }\n}\n\nfunction countSetBits(x: number): number {\n  // This function solves the Hamming Weight problem. Effectively it counts the number of\n  // bits in the input that are set to 1\n  // This implementation is supposedly very efficient when most bits are zero.\n  // Found: https://en.wikipedia.org/wiki/Hamming_weight#Efficient_implementation\n  let bits = x;\n\n  let count;\n  for (count = 0; bits; count += 1) {\n    bits &= bits - 1;\n  }\n  return count;\n}\n\nfunction getJoystickRegion(x: number, y: number): JoystickRegion {\n  let region = JoystickRegion.DZ;\n\n  if (x >= 0.2875 && y >= 0.2875) {\n    region = JoystickRegion.NE;\n  } else if (x >= 0.2875 && y <= -0.2875) {\n    region = JoystickRegion.SE;\n  } else if (x <= -0.2875 && y <= -0.2875) {\n    region = JoystickRegion.SW;\n  } else if (x <= -0.2875 && y >= 0.2875) {\n    region = JoystickRegion.NW;\n  } else if (y >= 0.2875) {\n    region = JoystickRegion.N;\n  } else if (x >= 0.2875) {\n    region = JoystickRegion.E;\n  } else if (y <= -0.2875) {\n    region = JoystickRegion.S;\n  } else if (x <= -0.2875) {\n    region = JoystickRegion.W;\n  }\n\n  return region;\n}\n","import { EventEmitter } from \"events\";\nimport { filter, get, groupBy, last, orderBy } from \"lodash\";\n\nimport type { FrameEntryType, FramesType, GameStartType, PostFrameUpdateType } from \"../types\";\nimport type { ConversionType, MoveLandedType, PlayerIndexedType } from \"./common\";\nimport {\n  calcDamageTaken,\n  didLoseStock,\n  getSinglesPlayerPermutationsFromSettings,\n  isCommandGrabbed,\n  isDamaged,\n  isGrabbed,\n  isInControl,\n  Timers,\n} from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\ninterface PlayerConversionState {\n  conversion: ConversionType | null;\n  move: MoveLandedType | null;\n  resetCounter: number;\n  lastHitAnimation: number | null;\n}\n\ninterface MetadataType {\n  lastEndFrameByOppIdx: {\n    [oppIdx: number]: number;\n  };\n}\n\nexport class ConversionComputer extends EventEmitter implements StatComputer<ConversionType[]> {\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private conversions = new Array<ConversionType>();\n  private state = new Map<PlayerIndexedType, PlayerConversionState>();\n  private metadata: MetadataType;\n  private settings: GameStartType | null = null;\n\n  public constructor() {\n    super();\n    this.metadata = {\n      lastEndFrameByOppIdx: {},\n    };\n  }\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.conversions = [];\n    this.state = new Map();\n    this.metadata = {\n      lastEndFrameByOppIdx: {},\n    };\n    this.settings = settings;\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: PlayerConversionState = {\n        conversion: null,\n        move: null,\n        resetCounter: 0,\n        lastHitAnimation: null,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        const terminated = handleConversionCompute(allFrames, state, indices, frame, this.conversions);\n        if (terminated) {\n          this.emit(\"CONVERSION\", {\n            combo: last(this.conversions),\n            settings: this.settings,\n          });\n        }\n      }\n    });\n  }\n\n  public fetch(): ConversionType[] {\n    this._populateConversionTypes();\n    return this.conversions;\n  }\n\n  private _populateConversionTypes(): void {\n    // Post-processing step: set the openingTypes\n    const conversionsToHandle = filter(this.conversions, (conversion) => {\n      return conversion.openingType === \"unknown\";\n    });\n\n    // Group new conversions by startTime and sort\n    const groupedConversions = groupBy(conversionsToHandle, \"startFrame\");\n    const sortedConversions = orderBy(groupedConversions, (conversions) => get(conversions, [0, \"startFrame\"]));\n\n    // Set the opening types on the conversions we need to handle\n    sortedConversions.forEach((conversions) => {\n      const isTrade = conversions.length >= 2;\n      conversions.forEach((conversion) => {\n        // Set end frame for this conversion\n        this.metadata.lastEndFrameByOppIdx[conversion.playerIndex] = conversion.endFrame!;\n\n        if (isTrade) {\n          // If trade, just short-circuit\n          conversion.openingType = \"trade\";\n          return;\n        }\n\n        // If not trade, check the opponent endFrame\n        const lastMove = last(conversion.moves);\n        const oppEndFrame =\n          this.metadata.lastEndFrameByOppIdx[lastMove ? lastMove.playerIndex : conversion.playerIndex];\n        const isCounterAttack = oppEndFrame && oppEndFrame > conversion.startFrame;\n        conversion.openingType = isCounterAttack ? \"counter-attack\" : \"neutral-win\";\n      });\n    });\n  }\n}\n\nfunction handleConversionCompute(\n  frames: FramesType,\n  state: PlayerConversionState,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n  conversions: ConversionType[],\n): boolean {\n  const currentFrameNumber = frame.frame;\n  const playerFrame: PostFrameUpdateType = frame.players[indices.playerIndex]!.post;\n  const opponentFrame = frame.players[indices.opponentIndex]!.post;\n\n  const prevFrameNumber = currentFrameNumber - 1;\n  let prevPlayerFrame: PostFrameUpdateType | null = null;\n  let prevOpponentFrame: PostFrameUpdateType | null = null;\n\n  if (frames[prevFrameNumber]) {\n    prevPlayerFrame = frames[prevFrameNumber]!.players[indices.playerIndex]!.post;\n    prevOpponentFrame = frames[prevFrameNumber]!.players[indices.opponentIndex]!.post;\n  }\n\n  const oppActionStateId = opponentFrame.actionStateId!;\n  const opntIsDamaged = isDamaged(oppActionStateId);\n  const opntIsGrabbed = isGrabbed(oppActionStateId);\n  const opntIsCommandGrabbed = isCommandGrabbed(oppActionStateId);\n  const opntDamageTaken = prevOpponentFrame ? calcDamageTaken(opponentFrame, prevOpponentFrame) : 0;\n\n  // Keep track of whether actionState changes after a hit. Used to compute move count\n  // When purely using action state there was a bug where if you did two of the same\n  // move really fast (such as ganon's jab), it would count as one move. Added\n  // the actionStateCounter at this point which counts the number of frames since\n  // an animation started. Should be more robust, for old files it should always be\n  // null and null < null = false\n  const actionChangedSinceHit = playerFrame.actionStateId !== state.lastHitAnimation;\n  const actionCounter = playerFrame.actionStateCounter!;\n  const prevActionCounter = prevPlayerFrame ? prevPlayerFrame.actionStateCounter! : 0;\n  const actionFrameCounterReset = actionCounter < prevActionCounter;\n  if (actionChangedSinceHit || actionFrameCounterReset) {\n    state.lastHitAnimation = null;\n  }\n\n  // If opponent took damage and was put in some kind of stun this frame, either\n  // start a conversion or\n  if (opntIsDamaged || opntIsGrabbed || opntIsCommandGrabbed) {\n    if (!state.conversion) {\n      state.conversion = {\n        playerIndex: indices.opponentIndex,\n        lastHitBy: indices.playerIndex,\n        startFrame: currentFrameNumber,\n        endFrame: null,\n        startPercent: prevOpponentFrame ? prevOpponentFrame.percent ?? 0 : 0,\n        currentPercent: opponentFrame.percent ?? 0,\n        endPercent: null,\n        moves: [],\n        didKill: false,\n        openingType: \"unknown\", // Will be updated later\n      };\n\n      conversions.push(state.conversion);\n    }\n\n    if (opntDamageTaken) {\n      // If animation of last hit has been cleared that means this is a new move. This\n      // prevents counting multiple hits from the same move such as fox's drill\n      if (state.lastHitAnimation === null) {\n        state.move = {\n          playerIndex: indices.playerIndex,\n          frame: currentFrameNumber,\n          moveId: playerFrame.lastAttackLanded!,\n          hitCount: 0,\n          damage: 0,\n        };\n\n        state.conversion.moves.push(state.move);\n      }\n\n      if (state.move) {\n        state.move.hitCount += 1;\n        state.move.damage += opntDamageTaken;\n      }\n\n      // Store previous frame animation to consider the case of a trade, the previous\n      // frame should always be the move that actually connected... I hope\n      state.lastHitAnimation = prevPlayerFrame ? prevPlayerFrame.actionStateId : null;\n    }\n  }\n\n  if (!state.conversion) {\n    // The rest of the function handles conversion termination logic, so if we don't\n    // have a conversion started, there is no need to continue\n    return false;\n  }\n\n  const opntInControl = isInControl(oppActionStateId);\n  const opntDidLoseStock = prevOpponentFrame && didLoseStock(opponentFrame, prevOpponentFrame);\n\n  // Update percent if opponent didn't lose stock\n  if (!opntDidLoseStock) {\n    state.conversion.currentPercent = opponentFrame.percent ?? 0;\n  }\n\n  if (opntIsDamaged || opntIsGrabbed || opntIsCommandGrabbed) {\n    // If opponent got grabbed or damaged, reset the reset counter\n    state.resetCounter = 0;\n  }\n\n  const shouldStartResetCounter = state.resetCounter === 0 && opntInControl;\n  const shouldContinueResetCounter = state.resetCounter > 0;\n  if (shouldStartResetCounter || shouldContinueResetCounter) {\n    // This will increment the reset timer under the following conditions:\n    // 1) if we were punishing opponent but they have now entered an actionable state\n    // 2) if counter has already started counting meaning opponent has entered actionable state\n    state.resetCounter += 1;\n  }\n\n  let shouldTerminate = false;\n\n  // Termination condition 1 - player kills opponent\n  if (opntDidLoseStock) {\n    state.conversion.didKill = true;\n    shouldTerminate = true;\n  }\n\n  // Termination condition 2 - conversion resets on time\n  if (state.resetCounter > Timers.PUNISH_RESET_FRAMES) {\n    shouldTerminate = true;\n  }\n\n  // If conversion should terminate, mark the end states and add it to list\n  if (shouldTerminate) {\n    state.conversion.endFrame = playerFrame.frame;\n    state.conversion.endPercent = prevOpponentFrame ? prevOpponentFrame.percent ?? 0 : 0;\n\n    state.conversion = null;\n    state.move = null;\n  }\n\n  return shouldTerminate;\n}\n","import { first, flatten, get, groupBy, keyBy, last, mapValues, zip } from \"lodash\";\n\nimport type { GameStartType } from \"../types\";\nimport type { ConversionType, InputCountsType, OverallType, RatioType } from \"./common\";\nimport type { PlayerInput } from \"./inputs\";\n\ninterface ConversionsByPlayerByOpening {\n  [playerIndex: string]: {\n    [openingType: string]: ConversionType[];\n  };\n}\n\nexport function generateOverallStats({\n  settings,\n  inputs,\n  conversions,\n  playableFrameCount,\n}: {\n  settings: GameStartType;\n  inputs: PlayerInput[];\n  conversions: ConversionType[];\n  playableFrameCount: number;\n}): OverallType[] {\n  const inputsByPlayer = keyBy(inputs, \"playerIndex\");\n  const originalConversions = conversions;\n  const conversionsByPlayer = groupBy(conversions, (conv) => conv.moves[0]?.playerIndex);\n  const conversionsByPlayerByOpening: ConversionsByPlayerByOpening = mapValues(conversionsByPlayer, (conversions) =>\n    groupBy(conversions, \"openingType\"),\n  );\n\n  const gameMinutes = playableFrameCount / 3600;\n\n  const overall = settings.players.map((player) => {\n    const playerIndex = player.playerIndex;\n\n    const playerInputs = get(inputsByPlayer, playerIndex) || {};\n    const inputCounts: InputCountsType = {\n      buttons: get(playerInputs, \"buttonInputCount\"),\n      triggers: get(playerInputs, \"triggerInputCount\"),\n      cstick: get(playerInputs, \"cstickInputCount\"),\n      joystick: get(playerInputs, \"joystickInputCount\"),\n      total: get(playerInputs, \"inputCount\"),\n    };\n    // const conversions = get(conversionsByPlayer, playerIndex) || [];\n    // const successfulConversions = conversions.filter((conversion) => conversion.moves.length > 1);\n    let conversionCount = 0;\n    let successfulConversionCount = 0;\n\n    const opponentIndices = settings.players\n      .filter((opp) => {\n        // We want players which aren't ourselves\n        if (opp.playerIndex === playerIndex) {\n          return false;\n        }\n\n        // Make sure they're not on our team either\n        return !settings.isTeams || opp.teamId !== player.teamId;\n      })\n      .map((opp) => opp.playerIndex);\n\n    let totalDamage = 0;\n    let killCount = 0;\n\n    // These are the conversions that we did on our opponents\n    originalConversions\n      // Filter down to conversions of our opponent\n      .filter((conversion) => conversion.playerIndex !== playerIndex)\n      .forEach((conversion) => {\n        conversionCount++;\n\n        // We killed the opponent\n        if (conversion.didKill && conversion.lastHitBy === playerIndex) {\n          killCount += 1;\n        }\n        if (conversion.moves.length > 1 && conversion.moves[0]!.playerIndex === playerIndex) {\n          successfulConversionCount++;\n        }\n        conversion.moves.forEach((move) => {\n          if (move.playerIndex === playerIndex) {\n            totalDamage += move.damage;\n          }\n        });\n      });\n\n    return {\n      playerIndex: playerIndex,\n      inputCounts: inputCounts,\n      conversionCount: conversionCount,\n      totalDamage: totalDamage,\n      killCount: killCount,\n\n      successfulConversions: getRatio(successfulConversionCount, conversionCount),\n      inputsPerMinute: getRatio(inputCounts.total, gameMinutes),\n      digitalInputsPerMinute: getRatio(inputCounts.buttons, gameMinutes),\n      openingsPerKill: getRatio(conversionCount, killCount),\n      damagePerOpening: getRatio(totalDamage, conversionCount),\n      neutralWinRatio: getOpeningRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices, \"neutral-win\"),\n      counterHitRatio: getOpeningRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices, \"counter-attack\"),\n      beneficialTradeRatio: getBeneficialTradeRatio(conversionsByPlayerByOpening, playerIndex, opponentIndices),\n    };\n  });\n\n  return overall;\n}\n\nfunction getRatio(count: number, total: number): RatioType {\n  return {\n    count: count,\n    total: total,\n    ratio: total ? count / total : null,\n  };\n}\n\nfunction getOpeningRatio(\n  conversionsByPlayerByOpening: ConversionsByPlayerByOpening,\n  playerIndex: number,\n  opponentIndices: number[],\n  type: string,\n): RatioType {\n  const openings = get(conversionsByPlayerByOpening, [playerIndex, type]) || [];\n\n  const opponentOpenings = flatten(\n    opponentIndices.map((opponentIndex) => get(conversionsByPlayerByOpening, [opponentIndex, type]) || []),\n  );\n\n  return getRatio(openings.length, openings.length + opponentOpenings.length);\n}\n\nfunction getBeneficialTradeRatio(\n  conversionsByPlayerByOpening: ConversionsByPlayerByOpening,\n  playerIndex: number,\n  opponentIndices: number[],\n): RatioType {\n  const playerTrades = get(conversionsByPlayerByOpening, [playerIndex, \"trade\"]) || [];\n  const opponentTrades = flatten(\n    opponentIndices.map((opponentIndex) => get(conversionsByPlayerByOpening, [opponentIndex, \"trade\"]) || []),\n  );\n\n  const benefitsPlayer = [];\n\n  // Figure out which punishes benefited this player\n  const zippedTrades = zip(playerTrades, opponentTrades);\n  zippedTrades.forEach((conversionPair) => {\n    const playerConversion = first(conversionPair);\n    const opponentConversion = last(conversionPair);\n    if (playerConversion && opponentConversion) {\n      const playerDamage = playerConversion.currentPercent - playerConversion.startPercent;\n      const opponentDamage = opponentConversion.currentPercent - opponentConversion.startPercent;\n\n      if (playerConversion!.didKill && !opponentConversion!.didKill) {\n        benefitsPlayer.push(playerConversion);\n      } else if (playerDamage > opponentDamage) {\n        benefitsPlayer.push(playerConversion);\n      }\n    }\n  });\n\n  return getRatio(benefitsPlayer.length, playerTrades.length);\n}\n","import { get } from \"lodash\";\n\nimport type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport { Frames } from \"../types\";\n\nexport interface StatComputer<T> {\n  setup(settings: GameStartType): void;\n  processFrame(newFrame: FrameEntryType, allFrames: FramesType): void;\n  fetch(): T;\n}\n\nexport interface StatOptions {\n  processOnTheFly: boolean;\n}\n\nconst defaultOptions: StatOptions = {\n  processOnTheFly: false,\n};\n\nexport class Stats {\n  private options: StatOptions;\n  private lastProcessedFrame: number | null = null;\n  private frames: FramesType = {};\n  private players: number[] = [];\n  private allComputers = new Array<StatComputer<unknown>>();\n\n  public constructor(options?: StatOptions) {\n    this.options = Object.assign({}, defaultOptions, options);\n  }\n\n  /**\n   * Should reset the frames to their default values.\n   */\n  public setup(settings: GameStartType): void {\n    // Reset the frames since it's a new game\n    this.frames = {};\n    this.players = settings.players.map((v) => v.playerIndex);\n\n    // Forward the settings on to the individual stat computer\n    this.allComputers.forEach((comp) => comp.setup(settings));\n  }\n\n  public register(...computer: StatComputer<unknown>[]): void {\n    this.allComputers.push(...computer);\n  }\n\n  public process(): void {\n    if (this.players.length === 0) {\n      return;\n    }\n\n    let i = this.lastProcessedFrame !== null ? this.lastProcessedFrame + 1 : Frames.FIRST;\n    while (this.frames[i]) {\n      const frame = this.frames[i];\n      // Don't attempt to compute stats on frames that have not been fully received\n      if (!isCompletedFrame(this.players, frame)) {\n        return;\n      }\n      this.allComputers.forEach((comp) => comp.processFrame(frame, this.frames));\n      this.lastProcessedFrame = i;\n      i++;\n    }\n  }\n\n  public addFrame(frame: FrameEntryType): void {\n    this.frames[frame.frame] = frame;\n\n    if (this.options.processOnTheFly) {\n      this.process();\n    }\n  }\n}\n\nfunction isCompletedFrame(players: number[], frame?: FrameEntryType): frame is FrameEntryType {\n  if (!frame) {\n    return false;\n  }\n\n  // This function checks whether we have successfully received an entire frame.\n  // It is not perfect because it does not wait for follower frames. Fortunately,\n  // follower frames are not used for any stat calculations so this doesn't matter\n  // for our purposes.\n  for (const player of players) {\n    const playerPostFrame = get(frame, [\"players\", player, \"post\"]);\n    if (!playerPostFrame) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport type { PlayerIndexedType, StockType } from \"./common\";\nimport { didLoseStock, getSinglesPlayerPermutationsFromSettings, isDead } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\ninterface StockState {\n  stock?: StockType | null;\n}\n\nexport class StockComputer implements StatComputer<StockType[]> {\n  private state = new Map<PlayerIndexedType, StockState>();\n  private playerPermutations = new Array<PlayerIndexedType>();\n  private stocks = new Array<StockType>();\n\n  public setup(settings: GameStartType): void {\n    // Reset state\n    this.state = new Map();\n    this.playerPermutations = getSinglesPlayerPermutationsFromSettings(settings);\n    this.stocks = [];\n\n    this.playerPermutations.forEach((indices) => {\n      const playerState: StockState = {\n        stock: null,\n      };\n      this.state.set(indices, playerState);\n    });\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    this.playerPermutations.forEach((indices) => {\n      const state = this.state.get(indices);\n      if (state) {\n        handleStockCompute(allFrames, state, indices, frame, this.stocks);\n      }\n    });\n  }\n\n  public fetch(): StockType[] {\n    return this.stocks;\n  }\n}\n\nfunction handleStockCompute(\n  frames: FramesType,\n  state: StockState,\n  indices: PlayerIndexedType,\n  frame: FrameEntryType,\n  stocks: StockType[],\n): void {\n  const playerFrame = frame.players[indices.playerIndex]!.post;\n  const currentFrameNumber = playerFrame.frame!;\n  const prevFrameNumber = currentFrameNumber - 1;\n  const prevPlayerFrame = frames[prevFrameNumber] ? frames[prevFrameNumber]!.players[indices.playerIndex]!.post : null;\n\n  // If there is currently no active stock, wait until the player is no longer spawning.\n  // Once the player is no longer spawning, start the stock\n  if (!state.stock) {\n    const isPlayerDead = isDead(playerFrame.actionStateId!);\n    if (isPlayerDead) {\n      return;\n    }\n\n    state.stock = {\n      playerIndex: indices.playerIndex,\n      startFrame: currentFrameNumber,\n      endFrame: null,\n      startPercent: 0,\n      endPercent: null,\n      currentPercent: 0,\n      count: playerFrame.stocksRemaining!,\n      deathAnimation: null,\n    };\n\n    stocks.push(state.stock);\n  } else if (prevPlayerFrame && didLoseStock(playerFrame, prevPlayerFrame)) {\n    state.stock.endFrame = playerFrame.frame;\n    state.stock.endPercent = prevPlayerFrame.percent ?? 0;\n    state.stock.deathAnimation = playerFrame.actionStateId;\n    state.stock = null;\n  } else {\n    state.stock.currentPercent = playerFrame.percent ?? 0;\n  }\n}\n","// Based on https://github.com/wilsonzlin/edgesearch/blob/d03816dd4b18d3d2eb6d08cb1ae14f96f046141d/demo/wiki/client/src/util/util.ts\n\n// Ensures value is not null or undefined.\n// != does no type validation so we don't need to explcitly check for undefined.\nexport function exists<T>(value: T | null | undefined): value is T {\n  return value != null;\n}\n","import type { FrameEntryType, FramesType, GameStartType } from \"../types\";\nimport { Frames, GameMode } from \"../types\";\nimport { exists } from \"../utils/exists\";\nimport type { TargetBreakType } from \"./common\";\nimport type { StatComputer } from \"./stats\";\n\n// The Target item's in-game ID\nconst TARGET_ITEM_TYPE_ID = 209;\n\nexport class TargetBreakComputer implements StatComputer<TargetBreakType[]> {\n  private targetBreaks = new Array<TargetBreakType>();\n  private isTargetTestGame = false;\n\n  public setup(settings: GameStartType): void {\n    // Reset the state\n    this.targetBreaks = [];\n    this.isTargetTestGame = settings.gameMode === GameMode.TARGET_TEST;\n  }\n\n  public processFrame(frame: FrameEntryType, allFrames: FramesType): void {\n    if (!this.isTargetTestGame) {\n      return;\n    }\n\n    handleTargetBreak(allFrames, frame, this.targetBreaks);\n  }\n\n  public fetch(): TargetBreakType[] {\n    return this.targetBreaks;\n  }\n}\n\nfunction handleTargetBreak(frames: FramesType, frame: FrameEntryType, targetBreaks: TargetBreakType[]) {\n  const currentFrameNumber = frame.frame;\n  const prevFrameNumber = currentFrameNumber - 1;\n\n  // Add all targets on the first frame\n  if (currentFrameNumber === Frames.FIRST) {\n    const targets = frames[Frames.FIRST]?.items?.filter((item) => item.typeId === TARGET_ITEM_TYPE_ID) ?? [];\n\n    targets.forEach((target) => {\n      targetBreaks.push({\n        spawnId: target.spawnId as number,\n        frameDestroyed: null,\n        positionX: target.positionX as number,\n        positionY: target.positionY as number,\n      });\n    });\n  }\n\n  const currentTargets = frames[currentFrameNumber]?.items?.filter((item) => item.typeId === TARGET_ITEM_TYPE_ID) ?? [];\n  const previousTargets = frames[prevFrameNumber]?.items?.filter((item) => item.typeId === TARGET_ITEM_TYPE_ID) ?? [];\n\n  const currentTargetIds = currentTargets.map((item) => item.spawnId).filter(exists);\n  const previousTargetIds = previousTargets.map((item) => item.spawnId).filter(exists);\n\n  // Check if any targets were destroyed\n  const brokenTargetIds = previousTargetIds.filter((id) => !currentTargetIds.includes(id));\n  brokenTargetIds.forEach((id) => {\n    // Update the target break\n    const targetBreak = targetBreaks.find((targetBreak) => targetBreak.spawnId === id);\n    if (targetBreak) {\n      targetBreak.frameDestroyed = currentFrameNumber;\n    }\n  });\n}\n","import { decode, encode } from \"@shelacek/ubjson\";\n\nexport enum CommunicationType {\n  HANDSHAKE = 1,\n  REPLAY = 2,\n  KEEP_ALIVE = 3,\n}\n\nexport interface CommunicationMessage {\n  type: CommunicationType;\n  payload: {\n    cursor: Uint8Array;\n    clientToken: Uint8Array;\n    pos: Uint8Array;\n    nextPos: Uint8Array;\n    data: Uint8Array;\n    nick: string | null;\n    forcePos: boolean;\n    nintendontVersion: string | null;\n  };\n}\n\n// This class is responsible for handling the communication protocol between the Wii and the\n// desktop app\nexport class ConsoleCommunication {\n  private receiveBuf = Buffer.from([]);\n  private messages = new Array<CommunicationMessage>();\n\n  public receive(data: Buffer): void {\n    this.receiveBuf = Buffer.concat([this.receiveBuf, data]);\n\n    while (this.receiveBuf.length >= 4) {\n      // First get the size of the message we are expecting\n      const msgSize = this.receiveBuf.readUInt32BE(0);\n\n      if (this.receiveBuf.length < msgSize + 4) {\n        // If we haven't received all the data yet, let's wait for more\n        return;\n      }\n\n      // Here we have received all the data, so let's decode it\n      const ubjsonData = this.receiveBuf.slice(4, msgSize + 4);\n      this.messages.push(decode(ubjsonData));\n\n      // Remove the processed data from receiveBuf\n      this.receiveBuf = this.receiveBuf.slice(msgSize + 4);\n    }\n  }\n\n  public getReceiveBuffer(): Buffer {\n    return this.receiveBuf;\n  }\n\n  public getMessages(): Array<CommunicationMessage> {\n    const toReturn = this.messages;\n    this.messages = [];\n\n    return toReturn;\n  }\n\n  public genHandshakeOut(cursor: Uint8Array, clientToken: number, isRealtime = false): Buffer {\n    const clientTokenBuf = Buffer.from([0, 0, 0, 0]);\n    clientTokenBuf.writeUInt32BE(clientToken, 0);\n\n    const message = {\n      type: CommunicationType.HANDSHAKE,\n      payload: {\n        cursor: cursor,\n        clientToken: Uint8Array.from(clientTokenBuf), // TODO: Use real instance token\n        isRealtime: isRealtime,\n      },\n    };\n\n    const buf = encode(message, {\n      optimizeArrays: true,\n    });\n\n    const msg = Buffer.concat([Buffer.from([0, 0, 0, 0]), Buffer.from(buf)]);\n\n    msg.writeUInt32BE(buf.byteLength, 0);\n\n    return msg;\n  }\n}\n","import type { EventEmitter } from \"events\";\n\nexport enum ConnectionEvent {\n  CONNECT = \"connect\",\n  MESSAGE = \"message\",\n  HANDSHAKE = \"handshake\",\n  STATUS_CHANGE = \"statusChange\",\n  DATA = \"data\",\n  ERROR = \"error\",\n}\n\nexport enum ConnectionStatus {\n  DISCONNECTED = 0,\n  CONNECTING = 1,\n  CONNECTED = 2,\n  RECONNECT_WAIT = 3,\n}\n\nexport enum Ports {\n  DEFAULT = 51441,\n  LEGACY = 666,\n  RELAY_START = 53741,\n}\n\nexport interface ConnectionDetails {\n  consoleNick: string;\n  gameDataCursor: number | Uint8Array;\n  version: string;\n  clientToken?: number;\n}\n\nexport interface ConnectionSettings {\n  ipAddress: string;\n  port: number;\n}\n\nexport interface Connection extends EventEmitter {\n  getStatus(): ConnectionStatus;\n  getSettings(): ConnectionSettings;\n  getDetails(): ConnectionDetails;\n  connect(ip: string, port: number): void;\n  disconnect(): void;\n}\n","import { EventEmitter } from \"events\";\nimport net from \"net\";\nimport inject from \"reconnect-core\";\n\nimport type { CommunicationMessage } from \"./communication\";\nimport { CommunicationType, ConsoleCommunication } from \"./communication\";\nimport type { Connection, ConnectionDetails, ConnectionSettings } from \"./types\";\nimport { ConnectionEvent, ConnectionStatus, Ports } from \"./types\";\n\nexport const NETWORK_MESSAGE = \"HELO\\0\";\n\nconst DEFAULT_CONNECTION_TIMEOUT_MS = 20000;\n\nenum CommunicationState {\n  INITIAL = \"initial\",\n  LEGACY = \"legacy\",\n  NORMAL = \"normal\",\n}\n\nconst defaultConnectionDetails: ConnectionDetails = {\n  consoleNick: \"unknown\",\n  gameDataCursor: Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0]),\n  version: \"\",\n  clientToken: 0,\n};\n\nconst consoleConnectionOptions = {\n  autoReconnect: true,\n};\n\nexport type ConsoleConnectionOptions = typeof consoleConnectionOptions;\n\n/**\n * Responsible for maintaining connection to a Slippi relay connection or Wii connection.\n * Events are emitted whenever data is received.\n *\n * Basic usage example:\n *\n * ```javascript\n * const { ConsoleConnection } = require(\"@slippi/slippi-js\");\n *\n * const connection = new ConsoleConnection();\n * connection.connect(\"localhost\", 667); // You should set these values appropriately\n *\n * connection.on(\"data\", (data) => {\n *   // Received data from console\n *   console.log(data);\n * });\n *\n * connection.on(\"statusChange\", (status) => {\n *   console.log(`status changed: ${status}`);\n * });\n * ```\n */\nexport class ConsoleConnection extends EventEmitter implements Connection {\n  private ipAddress: string;\n  private port: number;\n  private isRealtime: boolean;\n  private connectionStatus = ConnectionStatus.DISCONNECTED;\n  private connDetails: ConnectionDetails = { ...defaultConnectionDetails };\n  private client: net.Socket | null = null;\n  private connection: inject.Instance<unknown, net.Socket> | null = null;\n  private options: ConsoleConnectionOptions;\n  private shouldReconnect = false;\n\n  public constructor(options?: Partial<ConsoleConnectionOptions>) {\n    super();\n    this.ipAddress = \"0.0.0.0\";\n    this.port = Ports.DEFAULT;\n    this.isRealtime = false;\n    this.options = Object.assign({}, consoleConnectionOptions, options);\n  }\n\n  /**\n   * @returns The current connection status.\n   */\n  public getStatus(): ConnectionStatus {\n    return this.connectionStatus;\n  }\n\n  /**\n   * @returns The IP address and port of the current connection.\n   */\n  public getSettings(): ConnectionSettings {\n    return {\n      ipAddress: this.ipAddress,\n      port: this.port,\n    };\n  }\n\n  /**\n   * @returns The specific details about the connected console.\n   */\n  public getDetails(): ConnectionDetails {\n    return { ...this.connDetails };\n  }\n\n  /**\n   * Initiate a connection to the Wii or Slippi relay.\n   * @param ip   The IP address of the Wii or Slippi relay.\n   * @param port The port to connect to.\n   * @param isRealtime Optional. A flag to tell the Wii to send data as quickly as possible\n   * @param timeout Optional. The timeout in milliseconds when attempting to connect\n   *                to the Wii or relay.\n   */\n  public connect(ip: string, port: number, isRealtime = false, timeout = DEFAULT_CONNECTION_TIMEOUT_MS): void {\n    this.ipAddress = ip;\n    this.port = port;\n    this.isRealtime = isRealtime;\n    this._connectOnPort(ip, port, timeout);\n  }\n\n  private _connectOnPort(ip: string, port: number, timeout: number): void {\n    // set up reconnect\n    const reconnect = inject(() =>\n      net.connect({\n        host: ip,\n        port: port,\n        timeout: timeout,\n      }),\n    );\n\n    // Indicate we are connecting\n    this._setStatus(ConnectionStatus.CONNECTING);\n\n    // Prepare console communication obj for talking UBJSON\n    const consoleComms = new ConsoleCommunication();\n\n    // TODO: reconnect on failed reconnect, not sure how\n    // TODO: to do this\n    const connection = reconnect(\n      {\n        initialDelay: 2000,\n        maxDelay: 10000,\n        strategy: \"fibonacci\",\n        failAfter: Infinity,\n      },\n      (client) => {\n        this.emit(ConnectionEvent.CONNECT);\n        // We successfully connected so turn on auto-reconnect\n        this.shouldReconnect = this.options.autoReconnect;\n        this.client = client;\n\n        let commState: CommunicationState = CommunicationState.INITIAL;\n        client.on(\"data\", (data) => {\n          if (commState === CommunicationState.INITIAL) {\n            commState = this._getInitialCommState(data);\n            console.log(`Connected to ${ip}:${port} with type: ${commState}`);\n            this._setStatus(ConnectionStatus.CONNECTED);\n            console.log(data.toString(\"hex\"));\n          }\n\n          if (commState === CommunicationState.LEGACY) {\n            // If the first message received was not a handshake message, either we\n            // connected to an old Nintendont version or a relay instance\n            this._handleReplayData(data);\n            return;\n          }\n\n          try {\n            consoleComms.receive(data);\n          } catch (err) {\n            console.error(\"Failed to process new data from server...\", {\n              error: err,\n              prevDataBuf: consoleComms.getReceiveBuffer(),\n              rcvData: data,\n            });\n            client.destroy();\n            this.emit(ConnectionEvent.ERROR, err);\n            return;\n          }\n          const messages = consoleComms.getMessages();\n\n          // Process all of the received messages\n          try {\n            messages.forEach((message) => this._processMessage(message));\n          } catch (err) {\n            // Disconnect client to send another handshake message\n            console.error(err);\n            client.destroy();\n            this.emit(ConnectionEvent.ERROR, err);\n          }\n        });\n\n        client.on(\"timeout\", () => {\n          // const previouslyConnected = this.connectionStatus === ConnectionStatus.CONNECTED;\n          console.warn(`Attempted connection to ${ip}:${port} timed out after ${timeout}ms`);\n          client.destroy();\n        });\n\n        client.on(\"end\", () => {\n          console.log(\"disconnect\");\n          if (!this.shouldReconnect) {\n            client.destroy();\n          }\n        });\n\n        client.on(\"close\", () => {\n          console.log(\"connection was closed\");\n        });\n\n        const handshakeMsgOut = consoleComms.genHandshakeOut(\n          this.connDetails.gameDataCursor as Uint8Array,\n          this.connDetails.clientToken ?? 0,\n          this.isRealtime,\n        );\n\n        client.write(handshakeMsgOut);\n      },\n    );\n\n    const setConnectingStatus = (): void => {\n      // Indicate we are connecting\n      this._setStatus(this.shouldReconnect ? ConnectionStatus.RECONNECT_WAIT : ConnectionStatus.CONNECTING);\n    };\n\n    connection.on(\"connect\", setConnectingStatus);\n    connection.on(\"reconnect\", setConnectingStatus);\n\n    connection.on(\"disconnect\", () => {\n      if (!this.shouldReconnect) {\n        connection.reconnect = false;\n        connection.disconnect();\n        this._setStatus(ConnectionStatus.DISCONNECTED);\n      }\n      // TODO: Figure out how to set RECONNECT_WAIT state here. Currently it will stay on\n      // TODO: Connecting... forever\n    });\n\n    connection.on(\"error\", (err) => {\n      console.warn(`Connection on port ${port} encountered an error.`, err);\n\n      this._setStatus(ConnectionStatus.DISCONNECTED);\n      this.emit(ConnectionEvent.ERROR, `Connection on port ${port} encountered an error.\\n${err}`);\n    });\n\n    this.connection = connection;\n    connection.connect(port);\n  }\n\n  /**\n   * Terminate the current connection.\n   */\n  public disconnect(): void {\n    // Prevent reconnections and disconnect\n    if (this.connection) {\n      this.connection.reconnect = false;\n      this.connection.disconnect();\n      this.connection = null;\n    }\n\n    if (this.client) {\n      this.client.destroy();\n    }\n  }\n\n  private _getInitialCommState(data: Buffer): CommunicationState {\n    if (data.length < 13) {\n      return CommunicationState.LEGACY;\n    }\n\n    const openingBytes = Buffer.from([0x7b, 0x69, 0x04, 0x74, 0x79, 0x70, 0x65, 0x55, 0x01]);\n\n    const dataStart = data.slice(4, 13);\n\n    return dataStart.equals(openingBytes) ? CommunicationState.NORMAL : CommunicationState.LEGACY;\n  }\n\n  private _processMessage(message: CommunicationMessage): void {\n    this.emit(ConnectionEvent.MESSAGE, message);\n    switch (message.type) {\n      case CommunicationType.KEEP_ALIVE:\n        // console.log(\"Keep alive message received\");\n\n        // TODO: This is the jankiest shit ever but it will allow for relay connections not\n        // TODO: to time out as long as the main connection is still receving keep alive messages\n        // TODO: Need to figure out a better solution for this. There should be no need to have an\n        // TODO: active Wii connection for the relay connection to keep itself alive\n        const fakeKeepAlive = Buffer.from(NETWORK_MESSAGE);\n        this._handleReplayData(fakeKeepAlive);\n\n        break;\n      case CommunicationType.REPLAY:\n        const readPos = Uint8Array.from(message.payload.pos);\n        const cmp = Buffer.compare(this.connDetails.gameDataCursor as Uint8Array, readPos);\n        if (!message.payload.forcePos && cmp !== 0) {\n          // The readPos is not the one we are waiting on, throw error\n          throw new Error(\n            `Position of received data is incorrect. Expected: ${this.connDetails.gameDataCursor.toString()}, Received: ${readPos.toString()}`,\n          );\n        }\n\n        if (message.payload.forcePos) {\n          console.warn(\n            \"Overflow occured in Nintendont, data has likely been skipped and replay corrupted. \" +\n              \"Expected, Received:\",\n            this.connDetails.gameDataCursor,\n            readPos,\n          );\n        }\n\n        this.connDetails.gameDataCursor = Uint8Array.from(message.payload.nextPos);\n\n        const data = Uint8Array.from(message.payload.data);\n        this._handleReplayData(data);\n        break;\n      case CommunicationType.HANDSHAKE:\n        const { nick, nintendontVersion } = message.payload;\n        if (nick) {\n          this.connDetails.consoleNick = nick;\n        }\n        const tokenBuf = Buffer.from(message.payload.clientToken);\n        this.connDetails.clientToken = tokenBuf.readUInt32BE(0);\n        if (nintendontVersion) {\n          this.connDetails.version = nintendontVersion;\n        }\n        this.connDetails.gameDataCursor = Uint8Array.from(message.payload.pos);\n        this.emit(ConnectionEvent.HANDSHAKE, this.connDetails);\n        break;\n      default:\n        // Should this be an error?\n        break;\n    }\n  }\n\n  private _handleReplayData(data: Uint8Array): void {\n    this.emit(ConnectionEvent.DATA, data);\n  }\n\n  private _setStatus(status: ConnectionStatus): void {\n    // Don't fire the event if the status hasn't actually changed\n    if (this.connectionStatus !== status) {\n      this.connectionStatus = status;\n      this.emit(ConnectionEvent.STATUS_CHANGE, this.connectionStatus);\n    }\n  }\n}\n","import { EventEmitter } from \"events\";\n\nimport type { Connection, ConnectionDetails, ConnectionSettings } from \"./types\";\nimport { ConnectionEvent, ConnectionStatus, Ports } from \"./types\";\n\nconst MAX_PEERS = 32;\n\nexport enum DolphinMessageType {\n  CONNECT_REPLY = \"connect_reply\",\n  GAME_EVENT = \"game_event\",\n  START_GAME = \"start_game\",\n  END_GAME = \"end_game\",\n}\n\nexport class DolphinConnection extends EventEmitter implements Connection {\n  private ipAddress: string;\n  private port: number;\n  private connectionStatus = ConnectionStatus.DISCONNECTED;\n  private gameCursor = 0;\n  private nickname = \"unknown\";\n  private version = \"\";\n  private peer: any | null = null;\n\n  public constructor() {\n    super();\n    this.ipAddress = \"0.0.0.0\";\n    this.port = Ports.DEFAULT;\n  }\n\n  /**\n   * @returns The current connection status.\n   */\n  public getStatus(): ConnectionStatus {\n    return this.connectionStatus;\n  }\n\n  /**\n   * @returns The IP address and port of the current connection.\n   */\n  public getSettings(): ConnectionSettings {\n    return {\n      ipAddress: this.ipAddress,\n      port: this.port,\n    };\n  }\n\n  public getDetails(): ConnectionDetails {\n    return {\n      consoleNick: this.nickname,\n      gameDataCursor: this.gameCursor,\n      version: this.version,\n    };\n  }\n\n  public async connect(ip: string, port: number): Promise<void> {\n    console.log(`Connecting to: ${ip}:${port}`);\n    this.ipAddress = ip;\n    this.port = port;\n\n    const enet = await import(\"enet\");\n    // Create the enet client\n    const client = enet.createClient({ peers: MAX_PEERS, channels: 3, down: 0, up: 0 }, (err) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n    });\n\n    this.peer = client.connect(\n      {\n        address: this.ipAddress,\n        port: this.port,\n      },\n      3,\n      1337, // Data to send, not sure what this is or what this represents\n      (err: any, newPeer: any) => {\n        if (err) {\n          console.error(err);\n          return;\n        }\n\n        newPeer.ping();\n        this.emit(ConnectionEvent.CONNECT);\n        this._setStatus(ConnectionStatus.CONNECTED);\n      },\n    );\n\n    this.peer.on(\"connect\", () => {\n      // Reset the game cursor to the beginning of the game. Do we need to do this or\n      // should it just continue from where it left off?\n      this.gameCursor = 0;\n\n      const request = {\n        type: \"connect_request\",\n        cursor: this.gameCursor,\n      };\n      const packet = new enet.Packet(JSON.stringify(request), enet.PACKET_FLAG.RELIABLE);\n      this.peer.send(0, packet);\n    });\n\n    this.peer.on(\"message\", (packet: any) => {\n      const data = packet.data();\n      if (data.length === 0) {\n        return;\n      }\n\n      const dataString = data.toString(\"ascii\");\n      const message = JSON.parse(dataString);\n      const { dolphin_closed } = message;\n      if (dolphin_closed) {\n        // We got a disconnection request\n        this.disconnect();\n        return;\n      }\n      this.emit(ConnectionEvent.MESSAGE, message);\n      switch (message.type) {\n        case DolphinMessageType.CONNECT_REPLY:\n          this.connectionStatus = ConnectionStatus.CONNECTED;\n          this.gameCursor = message.cursor;\n          this.nickname = message.nick;\n          this.version = message.version;\n          this.emit(ConnectionEvent.HANDSHAKE, this.getDetails());\n          break;\n        case DolphinMessageType.GAME_EVENT: {\n          const { payload } = message;\n          //TODO: remove after game start and end messages have been in stable Ishii for a bit\n          if (!payload) {\n            // We got a disconnection request\n            this.disconnect();\n            return;\n          }\n\n          this._updateCursor(message, dataString);\n\n          const gameData = Buffer.from(payload, \"base64\");\n          this._handleReplayData(gameData);\n          break;\n        }\n        case DolphinMessageType.START_GAME: {\n          this._updateCursor(message, dataString);\n          break;\n        }\n        case DolphinMessageType.END_GAME: {\n          this._updateCursor(message, dataString);\n          break;\n        }\n      }\n    });\n\n    this.peer.on(\"disconnect\", () => {\n      this.disconnect();\n    });\n\n    this._setStatus(ConnectionStatus.CONNECTING);\n  }\n\n  public disconnect(): void {\n    if (this.peer) {\n      this.peer.disconnect();\n      this.peer = null;\n    }\n    this._setStatus(ConnectionStatus.DISCONNECTED);\n  }\n\n  private _handleReplayData(data: Uint8Array): void {\n    this.emit(ConnectionEvent.DATA, data);\n  }\n\n  private _setStatus(status: ConnectionStatus): void {\n    // Don't fire the event if the status hasn't actually changed\n    if (this.connectionStatus !== status) {\n      this.connectionStatus = status;\n      this.emit(ConnectionEvent.STATUS_CHANGE, this.connectionStatus);\n    }\n  }\n\n  private _updateCursor(message: { cursor: number; next_cursor: number }, dataString: string): void {\n    const { cursor, next_cursor } = message;\n\n    if (this.gameCursor !== cursor) {\n      const err = new Error(\n        `Unexpected game data cursor. Expected: ${this.gameCursor} but got: ${cursor}. Payload: ${dataString}`,\n      );\n      console.warn(err);\n      this.emit(ConnectionEvent.ERROR, err);\n    }\n\n    this.gameCursor = next_cursor;\n  }\n}\n","import { decode } from \"@shelacek/ubjson\";\nimport fs from \"fs\";\nimport iconv from \"iconv-lite\";\nimport { mapValues } from \"lodash\";\n\nimport type {\n  EventCallbackFunc,\n  EventPayloadTypes,\n  GameEndType,\n  GameInfoType,\n  GeckoCodeType,\n  MetadataType,\n  PlacementType,\n  PlayerType,\n  PostFrameUpdateType,\n  SelfInducedSpeedsType,\n} from \"../types\";\nimport { Command } from \"../types\";\nimport { exists } from \"./exists\";\nimport { toHalfwidth } from \"./fullwidth\";\n\nexport enum SlpInputSource {\n  BUFFER = \"buffer\",\n  FILE = \"file\",\n}\n\nexport interface SlpReadInput {\n  source: SlpInputSource;\n  filePath?: string;\n  buffer?: Buffer;\n}\n\nexport type SlpRefType = SlpFileSourceRef | SlpBufferSourceRef;\n\nexport interface SlpFileType {\n  ref: SlpRefType;\n  rawDataPosition: number;\n  rawDataLength: number;\n  metadataPosition: number;\n  metadataLength: number;\n  messageSizes: {\n    [command: number]: number;\n  };\n}\n\nexport interface SlpFileSourceRef {\n  source: SlpInputSource;\n  fileDescriptor: number;\n}\n\nexport interface SlpBufferSourceRef {\n  source: SlpInputSource;\n  buffer: Buffer;\n}\n\nfunction getRef(input: SlpReadInput): SlpRefType {\n  switch (input.source) {\n    case SlpInputSource.FILE:\n      if (!input.filePath) {\n        throw new Error(\"File source requires a file path\");\n      }\n      const fd = fs.openSync(input.filePath, \"r\");\n      return {\n        source: input.source,\n        fileDescriptor: fd,\n      } as SlpFileSourceRef;\n    case SlpInputSource.BUFFER:\n      return {\n        source: input.source,\n        buffer: input.buffer,\n      } as SlpBufferSourceRef;\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\nfunction readRef(ref: SlpRefType, buffer: Uint8Array, offset: number, length: number, position: number): number {\n  switch (ref.source) {\n    case SlpInputSource.FILE:\n      return fs.readSync((ref as SlpFileSourceRef).fileDescriptor, buffer, offset, length, position);\n    case SlpInputSource.BUFFER:\n      return (ref as SlpBufferSourceRef).buffer.copy(buffer, offset, position, position + length);\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\nfunction getLenRef(ref: SlpRefType): number {\n  switch (ref.source) {\n    case SlpInputSource.FILE:\n      const fileStats = fs.fstatSync((ref as SlpFileSourceRef).fileDescriptor);\n      return fileStats.size;\n    case SlpInputSource.BUFFER:\n      return (ref as SlpBufferSourceRef).buffer.length;\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\n/**\n * Opens a file at path\n */\nexport function openSlpFile(input: SlpReadInput): SlpFileType {\n  const ref = getRef(input);\n\n  const rawDataPosition = getRawDataPosition(ref);\n  const rawDataLength = getRawDataLength(ref, rawDataPosition);\n  const metadataPosition = rawDataPosition + rawDataLength + 10; // remove metadata string\n  const metadataLength = getMetadataLength(ref, metadataPosition);\n  const messageSizes = getMessageSizes(ref, rawDataPosition);\n\n  return {\n    ref,\n    rawDataPosition,\n    rawDataLength,\n    metadataPosition,\n    metadataLength,\n    messageSizes,\n  };\n}\n\nexport function closeSlpFile(file: SlpFileType): void {\n  switch (file.ref.source) {\n    case SlpInputSource.FILE:\n      fs.closeSync((file.ref as SlpFileSourceRef).fileDescriptor);\n      break;\n  }\n}\n\n// This function gets the position where the raw data starts\nfunction getRawDataPosition(ref: SlpRefType): number {\n  const buffer = new Uint8Array(1);\n  readRef(ref, buffer, 0, buffer.length, 0);\n\n  if (buffer[0] === 0x36) {\n    return 0;\n  }\n\n  if (buffer[0] !== \"{\".charCodeAt(0)) {\n    return 0; // return error?\n  }\n\n  return 15;\n}\n\nfunction getRawDataLength(ref: SlpRefType, position: number): number {\n  const fileSize = getLenRef(ref);\n  if (position === 0) {\n    return fileSize;\n  }\n\n  const buffer = new Uint8Array(4);\n  readRef(ref, buffer, 0, buffer.length, position - 4);\n\n  const rawDataLen = (buffer[0]! << 24) | (buffer[1]! << 16) | (buffer[2]! << 8) | buffer[3]!;\n  if (rawDataLen > 0) {\n    // If this method manages to read a number, it's probably trustworthy\n    return rawDataLen;\n  }\n\n  // If the above does not return a valid data length,\n  // return a file size based on file length. This enables\n  // some support for severed files\n  return fileSize - position;\n}\n\nfunction getMetadataLength(ref: SlpRefType, position: number): number {\n  const len = getLenRef(ref);\n  return len - position - 1;\n}\n\nfunction getMessageSizes(\n  ref: SlpRefType,\n  position: number,\n): {\n  [command: number]: number;\n} {\n  const messageSizes: {\n    [command: number]: number;\n  } = {};\n  // Support old file format\n  if (position === 0) {\n    messageSizes[0x36] = 0x140;\n    messageSizes[0x37] = 0x6;\n    messageSizes[0x38] = 0x46;\n    messageSizes[0x39] = 0x1;\n    return messageSizes;\n  }\n\n  const buffer = new Uint8Array(2);\n  readRef(ref, buffer, 0, buffer.length, position);\n  if (buffer[0] !== Command.MESSAGE_SIZES) {\n    return {};\n  }\n\n  const payloadLength = buffer[1] as number;\n  (messageSizes[0x35] as any) = payloadLength;\n\n  const messageSizesBuffer = new Uint8Array(payloadLength - 1);\n  readRef(ref, messageSizesBuffer, 0, messageSizesBuffer.length, position + 2);\n  for (let i = 0; i < payloadLength - 1; i += 3) {\n    const command = messageSizesBuffer[i] as number;\n\n    // Get size of command\n    (messageSizes[command] as any) = (messageSizesBuffer[i + 1]! << 8) | messageSizesBuffer[i + 2]!;\n  }\n\n  return messageSizes;\n}\n\nfunction getEnabledItems(view: DataView): number {\n  const offsets = [0x1, 0x100, 0x10000, 0x1000000, 0x100000000];\n  const enabledItems = offsets.reduce((acc, byteOffset, index) => {\n    const byte = readUint8(view, 0x28 + index) as number;\n    return acc + byte * byteOffset;\n  }, 0);\n\n  return enabledItems;\n}\n\nfunction getGameInfoBlock(view: DataView): GameInfoType {\n  const offset = 0x5;\n\n  return {\n    gameBitfield1: readUint8(view, 0x0 + offset),\n    gameBitfield2: readUint8(view, 0x1 + offset),\n    gameBitfield3: readUint8(view, 0x2 + offset),\n    gameBitfield4: readUint8(view, 0x3 + offset),\n    bombRainEnabled: (readUint8(view, 0x6 + offset)! & 0xff) > 0 ? true : false,\n    itemSpawnBehavior: readInt8(view, 0xb + offset),\n    selfDestructScoreValue: readInt8(view, 0xc + offset),\n    //stageId: readUint16(view, 0xe + offset),\n    //gameTimer: readUint32(view, 0x10 + offset),\n    itemSpawnBitfield1: readUint8(view, 0x23 + offset),\n    itemSpawnBitfield2: readUint8(view, 0x24 + offset),\n    itemSpawnBitfield3: readUint8(view, 0x25 + offset),\n    itemSpawnBitfield4: readUint8(view, 0x26 + offset),\n    itemSpawnBitfield5: readUint8(view, 0x27 + offset),\n    damageRatio: readFloat(view, 0x30 + offset),\n  } as GameInfoType;\n}\n\n/**\n * Iterates through slp events and parses payloads\n */\nexport function iterateEvents(\n  slpFile: SlpFileType,\n  callback: EventCallbackFunc,\n  startPos: number | null = null,\n): number {\n  const ref = slpFile.ref;\n\n  let readPosition = startPos !== null && startPos > 0 ? startPos : slpFile.rawDataPosition;\n  const stopReadingAt = slpFile.rawDataPosition + slpFile.rawDataLength;\n\n  // Generate read buffers for each\n  const commandPayloadBuffers = mapValues(slpFile.messageSizes, (size) => new Uint8Array(size + 1));\n  let splitMessageBuffer = new Uint8Array(0);\n\n  const commandByteBuffer = new Uint8Array(1);\n  while (readPosition < stopReadingAt) {\n    readRef(ref, commandByteBuffer, 0, 1, readPosition);\n    let commandByte = (commandByteBuffer[0] as number) ?? 0;\n    let buffer = commandPayloadBuffers[commandByte];\n    if (buffer === undefined) {\n      // If we don't have an entry for this command, return false to indicate failed read\n      return readPosition;\n    }\n\n    if (buffer.length > stopReadingAt - readPosition) {\n      return readPosition;\n    }\n\n    const advanceAmount = buffer.length;\n\n    readRef(ref, buffer, 0, buffer.length, readPosition);\n    if (commandByte === Command.SPLIT_MESSAGE) {\n      // Here we have a split message, we will collect data from them until the last\n      // message of the list is received\n      const view = new DataView(buffer.buffer);\n      const size = readUint16(view, 0x201) ?? 512;\n      const isLastMessage = readBool(view, 0x204);\n      const internalCommand = readUint8(view, 0x203) ?? 0;\n\n      // If this is the first message, initialize the splitMessageBuffer\n      // with the internal command byte because our parseMessage function\n      // seems to expect a command byte at the start\n      if (splitMessageBuffer.length === 0) {\n        splitMessageBuffer = new Uint8Array(1);\n        splitMessageBuffer[0] = internalCommand;\n      }\n\n      // Collect new data into splitMessageBuffer\n      const appendBuf = buffer.slice(0x1, 0x1 + size);\n      const mergedBuf = new Uint8Array(splitMessageBuffer.length + appendBuf.length);\n      mergedBuf.set(splitMessageBuffer);\n      mergedBuf.set(appendBuf, splitMessageBuffer.length);\n      splitMessageBuffer = mergedBuf;\n\n      if (isLastMessage) {\n        commandByte = splitMessageBuffer[0] ?? 0;\n        buffer = splitMessageBuffer;\n        splitMessageBuffer = new Uint8Array(0);\n      }\n    }\n\n    const parsedPayload = parseMessage(commandByte, buffer);\n    const shouldStop = callback(commandByte, parsedPayload, buffer);\n    if (shouldStop) {\n      break;\n    }\n\n    readPosition += advanceAmount;\n  }\n\n  return readPosition;\n}\n\nexport function parseMessage(command: Command, payload: Uint8Array): EventPayloadTypes | null {\n  const view = new DataView(payload.buffer);\n  switch (command) {\n    case Command.GAME_START:\n      const getPlayerObject = (playerIndex: number): PlayerType => {\n        // Controller Fix stuff\n        const cfOffset = playerIndex * 0x8;\n        const dashback = readUint32(view, 0x141 + cfOffset);\n        const shieldDrop = readUint32(view, 0x145 + cfOffset);\n        let controllerFix = \"None\";\n        if (dashback !== shieldDrop) {\n          controllerFix = \"Mixed\";\n        } else if (dashback === 1) {\n          controllerFix = \"UCF\";\n        } else if (dashback === 2) {\n          controllerFix = \"Dween\";\n        }\n\n        // Nametag stuff\n        const nametagLength = 0x10;\n        const nametagOffset = playerIndex * nametagLength;\n        const nametagStart = 0x161 + nametagOffset;\n        const nametagBuf = payload.slice(nametagStart, nametagStart + nametagLength);\n        const nameTagString = iconv\n          .decode(nametagBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const nametag = nameTagString ? toHalfwidth(nameTagString) : \"\";\n\n        // Display name\n        const displayNameLength = 0x1f;\n        const displayNameOffset = playerIndex * displayNameLength;\n        const displayNameStart = 0x1a5 + displayNameOffset;\n        const displayNameBuf = payload.slice(displayNameStart, displayNameStart + displayNameLength);\n        const displayNameString = iconv\n          .decode(displayNameBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const displayName = displayNameString ? toHalfwidth(displayNameString) : \"\";\n\n        // Connect code\n        const connectCodeLength = 0xa;\n        const connectCodeOffset = playerIndex * connectCodeLength;\n        const connectCodeStart = 0x221 + connectCodeOffset;\n        const connectCodeBuf = payload.slice(connectCodeStart, connectCodeStart + connectCodeLength);\n        const connectCodeString = iconv\n          .decode(connectCodeBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const connectCode = connectCodeString ? toHalfwidth(connectCodeString) : \"\";\n\n        const userIdLength = 0x1d;\n        const userIdOffset = playerIndex * userIdLength;\n        const userIdStart = 0x249 + userIdOffset;\n        const userIdBuf = payload.slice(userIdStart, userIdStart + userIdLength);\n        const userIdString = iconv\n          .decode(userIdBuf as Buffer, \"utf8\")\n          .split(\"\\0\")\n          .shift();\n        const userId = userIdString ?? \"\";\n\n        const offset = playerIndex * 0x24;\n        return {\n          playerIndex,\n          port: playerIndex + 1,\n          characterId: readUint8(view, 0x65 + offset),\n          type: readUint8(view, 0x66 + offset),\n          startStocks: readUint8(view, 0x67 + offset),\n          characterColor: readUint8(view, 0x68 + offset),\n          teamShade: readUint8(view, 0x6c + offset),\n          handicap: readUint8(view, 0x6d + offset),\n          teamId: readUint8(view, 0x6e + offset),\n          staminaMode: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x01)),\n          silentCharacter: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x02)),\n          lowGravity: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x04)),\n          invisible: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x08)),\n          blackStockIcon: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x10)),\n          metal: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x20)),\n          startOnAngelPlatform: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x40)),\n          rumbleEnabled: Boolean(readUint8(view, 0x6c + playerIndex * 0x24, 0x80)),\n          cpuLevel: readUint8(view, 0x74 + offset),\n          offenseRatio: readFloat(view, 0x7d + offset),\n          defenseRatio: readFloat(view, 0x81 + offset),\n          modelScale: readFloat(view, 0x85 + offset),\n          controllerFix,\n          nametag,\n          displayName,\n          connectCode,\n          userId,\n        };\n      };\n\n      const matchIdLength = 51;\n      const matchIdStart = 0x2be;\n      const matchIdBuf = payload.slice(matchIdStart, matchIdStart + matchIdLength);\n      const matchIdString = iconv\n        .decode(matchIdBuf as Buffer, \"utf8\")\n        .split(\"\\0\")\n        .shift();\n      const matchId = matchIdString ?? \"\";\n\n      return {\n        slpVersion: `${readUint8(view, 0x1)}.${readUint8(view, 0x2)}.${readUint8(view, 0x3)}`,\n        timerType: readUint8(view, 0x5, 0x03),\n        inGameMode: readUint8(view, 0x5, 0xe0),\n        friendlyFireEnabled: !!readUint8(view, 0x6, 0x01),\n        isTeams: readBool(view, 0xd),\n        itemSpawnBehavior: readUint8(view, 0x10),\n        stageId: readUint16(view, 0x13),\n        startingTimerSeconds: readUint32(view, 0x15),\n        enabledItems: getEnabledItems(view),\n        players: [0, 1, 2, 3].map(getPlayerObject),\n        scene: readUint8(view, 0x1a3),\n        gameMode: readUint8(view, 0x1a4),\n        language: readUint8(view, 0x2bd),\n        gameInfoBlock: getGameInfoBlock(view),\n        randomSeed: readUint32(view, 0x13d),\n        isPAL: readBool(view, 0x1a1),\n        isFrozenPS: readBool(view, 0x1a2),\n        matchInfo: {\n          matchId,\n          gameNumber: readUint32(view, 0x2f1),\n          tiebreakerNumber: readUint32(view, 0x2f5),\n        },\n      };\n    case Command.FRAME_START:\n      return {\n        frame: readInt32(view, 0x1),\n        seed: readUint32(view, 0x5),\n        sceneFrameCounter: readUint32(view, 0x9),\n      };\n\n    case Command.PRE_FRAME_UPDATE:\n      return {\n        frame: readInt32(view, 0x1),\n        playerIndex: readUint8(view, 0x5),\n        isFollower: readBool(view, 0x6),\n        seed: readUint32(view, 0x7),\n        actionStateId: readUint16(view, 0xb),\n        positionX: readFloat(view, 0xd),\n        positionY: readFloat(view, 0x11),\n        facingDirection: readFloat(view, 0x15),\n        joystickX: readFloat(view, 0x19),\n        joystickY: readFloat(view, 0x1d),\n        cStickX: readFloat(view, 0x21),\n        cStickY: readFloat(view, 0x25),\n        trigger: readFloat(view, 0x29),\n        buttons: readUint32(view, 0x2d),\n        physicalButtons: readUint16(view, 0x31),\n        physicalLTrigger: readFloat(view, 0x33),\n        physicalRTrigger: readFloat(view, 0x37),\n        rawJoystickX: readInt8(view, 0x3b),\n        percent: readFloat(view, 0x3c),\n      };\n    case Command.POST_FRAME_UPDATE:\n      const selfInducedSpeeds: SelfInducedSpeedsType = {\n        airX: readFloat(view, 0x35),\n        y: readFloat(view, 0x39),\n        attackX: readFloat(view, 0x3d),\n        attackY: readFloat(view, 0x41),\n        groundX: readFloat(view, 0x45),\n      };\n      return {\n        frame: readInt32(view, 0x1),\n        playerIndex: readUint8(view, 0x5),\n        isFollower: readBool(view, 0x6),\n        internalCharacterId: readUint8(view, 0x7),\n        actionStateId: readUint16(view, 0x8),\n        positionX: readFloat(view, 0xa),\n        positionY: readFloat(view, 0xe),\n        facingDirection: readFloat(view, 0x12),\n        percent: readFloat(view, 0x16),\n        shieldSize: readFloat(view, 0x1a),\n        lastAttackLanded: readUint8(view, 0x1e),\n        currentComboCount: readUint8(view, 0x1f),\n        lastHitBy: readUint8(view, 0x20),\n        stocksRemaining: readUint8(view, 0x21),\n        actionStateCounter: readFloat(view, 0x22),\n        miscActionState: readFloat(view, 0x2b),\n        isAirborne: readBool(view, 0x2f),\n        lastGroundId: readUint16(view, 0x30),\n        jumpsRemaining: readUint8(view, 0x32),\n        lCancelStatus: readUint8(view, 0x33),\n        hurtboxCollisionState: readUint8(view, 0x34),\n        selfInducedSpeeds: selfInducedSpeeds,\n        hitlagRemaining: readFloat(view, 0x49),\n        animationIndex: readUint32(view, 0x4d),\n      };\n    case Command.ITEM_UPDATE:\n      return {\n        frame: readInt32(view, 0x1),\n        typeId: readUint16(view, 0x5),\n        state: readUint8(view, 0x7),\n        facingDirection: readFloat(view, 0x8),\n        velocityX: readFloat(view, 0xc),\n        velocityY: readFloat(view, 0x10),\n        positionX: readFloat(view, 0x14),\n        positionY: readFloat(view, 0x18),\n        damageTaken: readUint16(view, 0x1c),\n        expirationTimer: readFloat(view, 0x1e),\n        spawnId: readUint32(view, 0x22),\n        missileType: readUint8(view, 0x26),\n        turnipFace: readUint8(view, 0x27),\n        chargeShotLaunched: readUint8(view, 0x28),\n        chargePower: readUint8(view, 0x29),\n        owner: readInt8(view, 0x2a),\n      };\n    case Command.FRAME_BOOKEND:\n      return {\n        frame: readInt32(view, 0x1),\n        latestFinalizedFrame: readInt32(view, 0x5),\n      };\n    case Command.GAME_END:\n      const placements = [0, 1, 2, 3].map((playerIndex): PlacementType => {\n        const position = readInt8(view, 0x3 + playerIndex);\n        return { playerIndex, position };\n      });\n\n      return {\n        gameEndMethod: readUint8(view, 0x1),\n        lrasInitiatorIndex: readInt8(view, 0x2),\n        placements,\n      };\n    case Command.GECKO_LIST:\n      const codes: GeckoCodeType[] = [];\n      let pos = 1;\n      while (pos < payload.length) {\n        const word1 = readUint32(view, pos) ?? 0;\n        const codetype = (word1 >> 24) & 0xfe;\n        const address = (word1 & 0x01ffffff) + 0x80000000;\n\n        let offset = 8; // Default code length, most codes are this length\n        if (codetype === 0xc0 || codetype === 0xc2) {\n          const lineCount = readUint32(view, pos + 4) ?? 0;\n          offset = 8 + lineCount * 8;\n        } else if (codetype === 0x06) {\n          const byteLen = readUint32(view, pos + 4) ?? 0;\n          offset = 8 + ((byteLen + 7) & 0xfffffff8);\n        } else if (codetype === 0x08) {\n          offset = 16;\n        }\n\n        codes.push({\n          type: codetype,\n          address: address,\n          contents: payload.slice(pos, pos + offset),\n        });\n\n        pos += offset;\n      }\n\n      return {\n        contents: payload.slice(1),\n        codes: codes,\n      };\n    default:\n      return null;\n  }\n}\n\nfunction canReadFromView(view: DataView, offset: number, length: number): boolean {\n  const viewLength = view.byteLength;\n  return offset + length <= viewLength;\n}\n\nfunction readFloat(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getFloat32(offset);\n}\n\nfunction readInt32(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getInt32(offset);\n}\n\nfunction readInt8(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return view.getInt8(offset);\n}\n\nfunction readUint32(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getUint32(offset);\n}\n\nfunction readUint16(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 2)) {\n    return null;\n  }\n\n  return view.getUint16(offset);\n}\n\nfunction readUint8(view: DataView, offset: number, bitmask = 0xff): number | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return view.getUint8(offset) & bitmask;\n}\n\nfunction readBool(view: DataView, offset: number): boolean | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return !!view.getUint8(offset);\n}\n\nexport function getMetadata(slpFile: SlpFileType): MetadataType | null {\n  if (slpFile.metadataLength <= 0) {\n    // This will happen on a severed incomplete file\n    // $FlowFixMe\n    return null;\n  }\n\n  const buffer = new Uint8Array(slpFile.metadataLength);\n\n  readRef(slpFile.ref, buffer, 0, buffer.length, slpFile.metadataPosition);\n\n  let metadata = null;\n  try {\n    metadata = decode(buffer);\n  } catch (ex) {\n    // Do nothing\n    // console.log(ex);\n  }\n\n  // $FlowFixMe\n  return metadata;\n}\n\nexport function getGameEnd(slpFile: SlpFileType): GameEndType | null {\n  const { ref, rawDataPosition, rawDataLength, messageSizes } = slpFile;\n  const gameEndPayloadSize = messageSizes[Command.GAME_END];\n  if (!exists(gameEndPayloadSize) || gameEndPayloadSize <= 0) {\n    return null;\n  }\n\n  // Add one to account for command byte\n  const gameEndSize = gameEndPayloadSize + 1;\n  const gameEndPosition = rawDataPosition + rawDataLength - gameEndSize;\n\n  const buffer = new Uint8Array(gameEndSize);\n  readRef(ref, buffer, 0, buffer.length, gameEndPosition);\n  if (buffer[0] !== Command.GAME_END) {\n    // This isn't even a game end payload\n    return null;\n  }\n\n  const gameEndMessage = parseMessage(Command.GAME_END, buffer);\n  if (!gameEndMessage) {\n    return null;\n  }\n\n  return gameEndMessage as GameEndType;\n}\n\nexport function extractFinalPostFrameUpdates(slpFile: SlpFileType): PostFrameUpdateType[] {\n  const { ref, rawDataPosition, rawDataLength, messageSizes } = slpFile;\n\n  // The following should exist on all replay versions\n  const postFramePayloadSize = messageSizes[Command.POST_FRAME_UPDATE];\n  const gameEndPayloadSize = messageSizes[Command.GAME_END];\n  const frameBookendPayloadSize = messageSizes[Command.FRAME_BOOKEND];\n\n  // Technically this should not be possible\n  if (!exists(postFramePayloadSize)) {\n    return [];\n  }\n\n  const gameEndSize = gameEndPayloadSize ? gameEndPayloadSize + 1 : 0;\n  const postFrameSize = postFramePayloadSize + 1;\n  const frameBookendSize = frameBookendPayloadSize ? frameBookendPayloadSize + 1 : 0;\n\n  let frameNum: number | null = null;\n  let postFramePosition = rawDataPosition + rawDataLength - gameEndSize - frameBookendSize - postFrameSize;\n  const postFrameUpdates: PostFrameUpdateType[] = [];\n  do {\n    const buffer = new Uint8Array(postFrameSize);\n    readRef(ref, buffer, 0, buffer.length, postFramePosition);\n    if (buffer[0] !== Command.POST_FRAME_UPDATE) {\n      break;\n    }\n\n    const postFrameMessage = parseMessage(Command.POST_FRAME_UPDATE, buffer) as PostFrameUpdateType | null;\n    if (!postFrameMessage) {\n      break;\n    }\n\n    if (frameNum === null) {\n      frameNum = postFrameMessage.frame;\n    } else if (frameNum !== postFrameMessage.frame) {\n      // If post frame message is found but the frame doesn't match, it's not part of the final frame\n      break;\n    }\n\n    postFrameUpdates.unshift(postFrameMessage);\n    postFramePosition -= postFrameSize;\n  } while (postFramePosition >= rawDataPosition);\n\n  return postFrameUpdates;\n}\n","import type { WritableOptions } from \"stream\";\nimport { Writable } from \"stream\";\n\nimport { NETWORK_MESSAGE } from \"../console\";\nimport type { EventPayloadTypes } from \"../types\";\nimport { Command } from \"../types\";\nimport { parseMessage } from \"./slpReader\";\n\nexport enum SlpStreamMode {\n  AUTO = \"AUTO\", // Always reading data, but errors on invalid command\n  MANUAL = \"MANUAL\", // Stops parsing inputs after a valid game end command, requires manual restarting\n}\n\nconst defaultSettings = {\n  suppressErrors: false,\n  mode: SlpStreamMode.AUTO,\n};\n\nexport type SlpStreamSettings = typeof defaultSettings;\n\nexport type MessageSizes = Map<Command, number>;\n\nexport interface SlpCommandEventPayload {\n  command: Command;\n  payload: EventPayloadTypes | MessageSizes;\n}\n\nexport interface SlpRawEventPayload {\n  command: Command;\n  payload: Buffer;\n}\n\nexport enum SlpStreamEvent {\n  RAW = \"slp-raw\",\n  COMMAND = \"slp-command\",\n}\n\n/**\n * SlpStream is a writable stream of Slippi data. It passes the data being written in\n * and emits an event based on what kind of Slippi messages were processed.\n *\n * SlpStream emits two events: \"slp-raw\" and \"slp-command\". The \"slp-raw\" event emits the raw buffer\n * bytes whenever it processes each command. You can manually parse this or write it to a\n * file. The \"slp-command\" event returns the parsed payload which you can access the attributes.\n *\n * @class SlpStream\n * @extends {Writable}\n */\nexport class SlpStream extends Writable {\n  private gameEnded = false; // True only if in manual mode and the game has completed\n  private settings: SlpStreamSettings;\n  private payloadSizes: MessageSizes | null = null;\n  private previousBuffer: Uint8Array = Buffer.from([]);\n\n  /**\n   *Creates an instance of SlpStream.\n   * @param {Partial<SlpStreamSettings>} [slpOptions]\n   * @param {WritableOptions} [opts]\n   * @memberof SlpStream\n   */\n  public constructor(slpOptions?: Partial<SlpStreamSettings>, opts?: WritableOptions) {\n    super(opts);\n    this.settings = Object.assign({}, defaultSettings, slpOptions);\n  }\n\n  public restart(): void {\n    this.gameEnded = false;\n    this.payloadSizes = null;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public _write(newData: Buffer, encoding: string, callback: (error?: Error | null, data?: any) => void): void {\n    if (encoding !== \"buffer\") {\n      throw new Error(`Unsupported stream encoding. Expected 'buffer' got '${encoding}'.`);\n    }\n\n    // Join the current data with the old data\n    const data = Uint8Array.from(Buffer.concat([this.previousBuffer, newData]));\n\n    // Clear previous data\n    this.previousBuffer = Buffer.from([]);\n\n    const dataView = new DataView(data.buffer);\n\n    // Iterate through the data\n    let index = 0;\n    while (index < data.length) {\n      // We want to filter out the network messages\n      if (Buffer.from(data.slice(index, index + 5)).toString() === NETWORK_MESSAGE) {\n        index += 5;\n        continue;\n      }\n\n      // Make sure we have enough data to read a full payload\n      const command = dataView.getUint8(index);\n      let payloadSize = 0;\n      if (this.payloadSizes) {\n        payloadSize = this.payloadSizes.get(command) ?? 0;\n      }\n      const remainingLen = data.length - index;\n      if (remainingLen < payloadSize + 1) {\n        // If remaining length is not long enough for full payload, save the remaining\n        // data until we receive more data. The data has been split up.\n        this.previousBuffer = data.slice(index);\n        break;\n      }\n\n      // Only process if the game is still going\n      if (this.settings.mode === SlpStreamMode.MANUAL && this.gameEnded) {\n        break;\n      }\n\n      // Increment by one for the command byte\n      index += 1;\n\n      const payloadPtr = data.slice(index);\n      const payloadDataView = new DataView(data.buffer, index);\n      let payloadLen = 0;\n      try {\n        payloadLen = this._processCommand(command, payloadPtr, payloadDataView);\n      } catch (err) {\n        // Only throw the error if we're not suppressing the errors\n        if (!this.settings.suppressErrors) {\n          throw err;\n        }\n        payloadLen = 0;\n      }\n      index += payloadLen;\n    }\n\n    callback();\n  }\n\n  private _writeCommand(command: Command, entirePayload: Uint8Array, payloadSize: number): Uint8Array {\n    const payloadBuf = entirePayload.slice(0, payloadSize);\n    const bufToWrite = Buffer.concat([Buffer.from([command]), payloadBuf]);\n    // Forward the raw buffer onwards\n    this.emit(SlpStreamEvent.RAW, {\n      command: command,\n      payload: bufToWrite,\n    } as SlpRawEventPayload);\n    return new Uint8Array(bufToWrite);\n  }\n\n  private _processCommand(command: Command, entirePayload: Uint8Array, dataView: DataView): number {\n    // Handle the message size command\n    if (command === Command.MESSAGE_SIZES) {\n      const payloadSize = dataView.getUint8(0);\n      // Set the payload sizes\n      this.payloadSizes = processReceiveCommands(dataView);\n      // Emit the raw command event\n      this._writeCommand(command, entirePayload, payloadSize);\n      this.emit(SlpStreamEvent.COMMAND, {\n        command: command,\n        payload: this.payloadSizes,\n      } as SlpCommandEventPayload);\n      return payloadSize;\n    }\n\n    let payloadSize = 0;\n    if (this.payloadSizes) {\n      payloadSize = this.payloadSizes.get(command) ?? 0;\n    }\n\n    // Fetch the payload and parse it\n    let payload: Uint8Array;\n    let parsedPayload: EventPayloadTypes | null = null;\n    if (payloadSize > 0) {\n      payload = this._writeCommand(command, entirePayload, payloadSize);\n      parsedPayload = parseMessage(command, payload);\n    }\n    if (!parsedPayload) {\n      return payloadSize;\n    }\n\n    switch (command) {\n      case Command.GAME_END:\n        // Stop parsing data until we manually restart the stream\n        if (this.settings.mode === SlpStreamMode.MANUAL) {\n          this.gameEnded = true;\n        }\n        break;\n    }\n\n    this.emit(SlpStreamEvent.COMMAND, {\n      command: command,\n      payload: parsedPayload,\n    } as SlpCommandEventPayload);\n    return payloadSize;\n  }\n}\n\nconst processReceiveCommands = (dataView: DataView): MessageSizes => {\n  const payloadSizes = new Map<Command, number>();\n  const payloadLen = dataView.getUint8(0);\n  for (let i = 1; i < payloadLen; i += 3) {\n    const commandByte = dataView.getUint8(i);\n    const payloadSize = dataView.getUint16(i + 1);\n    payloadSizes.set(commandByte, payloadSize);\n  }\n  return payloadSizes;\n};\n","import { map } from \"lodash\";\n\nexport function toHalfwidth(str: string): string {\n  // Converts a fullwidth character to halfwidth\n  const convertChar = (charCode: number): number => {\n    /**\n     * Standard full width encodings\n     * https://en.wikipedia.org/wiki/Halfwidth_and_Fullwidth_Forms_(Unicode_block)\n     */\n    if (charCode > 0xff00 && charCode < 0xff5f) {\n      return 0x0020 + (charCode - 0xff00);\n    }\n\n    // space:\n    if (charCode === 0x3000) {\n      return 0x0020;\n    }\n\n    /**\n     * Exceptions found in Melee/Japanese keyboards\n     */\n    // single quote: '\n    if (charCode === 0x2019) {\n      return 0x0027;\n    }\n\n    // double quote: \"\n    if (charCode === 0x201d) {\n      return 0x0022;\n    }\n\n    return charCode;\n  };\n\n  const ret = map(str, (char) => convertChar(char.charCodeAt(0)));\n\n  return String.fromCharCode(...ret);\n}\n","import type { WriteStream } from \"fs\";\nimport fs from \"fs\";\nimport { forEach } from \"lodash\";\nimport type { WritableOptions } from \"stream\";\nimport { Writable } from \"stream\";\n\nimport type { GameStartType, PostFrameUpdateType } from \"../types\";\nimport { Command } from \"../types\";\nimport type { SlpCommandEventPayload } from \"./slpStream\";\nimport { SlpStream, SlpStreamEvent, SlpStreamMode } from \"./slpStream\";\n\nconst DEFAULT_NICKNAME = \"unknown\";\n\nexport interface SlpFileMetadata {\n  startTime: Date;\n  lastFrame: number;\n  players: {\n    [playerIndex: number]: {\n      characterUsage: {\n        [internalCharacterId: number]: number;\n      };\n      names: {\n        netplay: string;\n        code: string;\n      };\n    };\n  };\n  consoleNickname?: string;\n}\n\n/**\n * SlpFile is a class that wraps a Writable stream. It handles the writing of the binary\n * header and footer, and also handles the overwriting of the raw data length.\n *\n * @class SlpFile\n * @extends {Writable}\n */\nexport class SlpFile extends Writable {\n  private filePath: string;\n  private metadata: SlpFileMetadata;\n  private fileStream: WriteStream | null = null;\n  private rawDataLength = 0;\n  private slpStream: SlpStream;\n  private usesExternalStream = false;\n\n  /**\n   * Creates an instance of SlpFile.\n   * @param {string} filePath The file location to write to.\n   * @param {WritableOptions} [opts] Options for writing.\n   * @memberof SlpFile\n   */\n  public constructor(filePath: string, slpStream?: SlpStream, opts?: WritableOptions) {\n    super(opts);\n    this.filePath = filePath;\n    this.metadata = {\n      consoleNickname: DEFAULT_NICKNAME,\n      startTime: new Date(),\n      lastFrame: -124,\n      players: {},\n    };\n    this.usesExternalStream = Boolean(slpStream);\n\n    // Create a new SlpStream if one wasn't already provided\n    // This SLP stream represents a single game not multiple, so use manual mode\n    this.slpStream = slpStream ? slpStream : new SlpStream({ mode: SlpStreamMode.MANUAL });\n\n    this._setupListeners();\n    this._initializeNewGame(this.filePath);\n  }\n\n  /**\n   * Get the current file path being written to.\n   *\n   * @returns {string} The location of the current file path\n   * @memberof SlpFile\n   */\n  public path(): string {\n    return this.filePath;\n  }\n\n  /**\n   * Sets the metadata of the Slippi file, such as consoleNickname, lastFrame, and players.\n   * @param metadata The metadata to be written\n   */\n  public setMetadata(metadata: Partial<SlpFileMetadata>): void {\n    this.metadata = Object.assign({}, this.metadata, metadata);\n  }\n\n  public _write(chunk: Uint8Array, encoding: string, callback: (error?: Error | null) => void): void {\n    if (encoding !== \"buffer\") {\n      throw new Error(`Unsupported stream encoding. Expected 'buffer' got '${encoding}'.`);\n    }\n    // Write it to the file\n    if (this.fileStream) {\n      this.fileStream.write(chunk);\n    }\n\n    // Parse the data manually if it's an internal stream\n    if (!this.usesExternalStream) {\n      this.slpStream.write(chunk);\n    }\n\n    // Keep track of the bytes we've written\n    this.rawDataLength += chunk.length;\n    callback();\n  }\n\n  /**\n   * Here we define what to do on each command. We need to populate the metadata field\n   * so we keep track of the latest frame, as well as the number of frames each character has\n   * been used.\n   *\n   * @param data The parsed data from a SlpStream\n   */\n  private _onCommand(data: SlpCommandEventPayload): void {\n    const { command, payload } = data;\n    switch (command) {\n      case Command.GAME_START:\n        const { players } = payload as GameStartType;\n        forEach(players, (player) => {\n          if (player.type === 3) {\n            return;\n          }\n\n          this.metadata.players[player.playerIndex] = {\n            characterUsage: {},\n            names: {\n              netplay: player.displayName,\n              code: player.connectCode,\n            },\n          };\n        });\n        break;\n      case Command.POST_FRAME_UPDATE:\n        // Here we need to update some metadata fields\n        const { frame, playerIndex, isFollower, internalCharacterId } = payload as PostFrameUpdateType;\n        if (isFollower) {\n          // No need to do this for follower\n          break;\n        }\n\n        // Update frame index\n        this.metadata.lastFrame = frame!;\n\n        // Update character usage\n        const prevPlayer = this.metadata.players[playerIndex!];\n        const characterUsage = prevPlayer!.characterUsage;\n        const curCharFrames = characterUsage[internalCharacterId!] || 0;\n        const player = {\n          ...prevPlayer,\n          characterUsage: {\n            ...characterUsage,\n            [internalCharacterId!]: curCharFrames + 1,\n          },\n        };\n        (this.metadata.players as any)[playerIndex!] = player;\n        break;\n    }\n  }\n\n  private _setupListeners(): void {\n    const streamListener = (data: SlpCommandEventPayload): void => {\n      this._onCommand(data);\n    };\n    this.slpStream.on(SlpStreamEvent.COMMAND, streamListener);\n\n    this.on(\"finish\", () => {\n      // Update file with bytes written\n      const fd = fs.openSync(this.filePath, \"r+\");\n      fs.writeSync(fd, createUInt32Buffer(this.rawDataLength), 0, 4, 11);\n      fs.closeSync(fd);\n\n      // Unsubscribe from the stream\n      this.slpStream.removeListener(SlpStreamEvent.COMMAND, streamListener);\n      // Terminate the internal stream\n      if (!this.usesExternalStream) {\n        this.slpStream.end();\n      }\n    });\n  }\n\n  private _initializeNewGame(filePath: string): void {\n    this.fileStream = fs.createWriteStream(filePath, {\n      encoding: \"binary\",\n    });\n\n    const header = Buffer.concat([\n      Buffer.from(\"{U\"),\n      Buffer.from([3]),\n      Buffer.from(\"raw[$U#l\"),\n      Buffer.from([0, 0, 0, 0]),\n    ]);\n    this.fileStream.write(header);\n  }\n\n  public _final(callback: (error?: Error | null) => void): void {\n    let footer = Buffer.concat([Buffer.from(\"U\"), Buffer.from([8]), Buffer.from(\"metadata{\")]);\n\n    // Write game start time\n    const startTimeStr = this.metadata.startTime.toISOString();\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([7]),\n      Buffer.from(\"startAtSU\"),\n      Buffer.from([startTimeStr.length]),\n      Buffer.from(startTimeStr),\n    ]);\n\n    // Write last frame index\n    // TODO: Get last frame\n    const lastFrame = this.metadata.lastFrame;\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([9]),\n      Buffer.from(\"lastFramel\"),\n      createInt32Buffer(lastFrame),\n    ]);\n\n    // write the Console Nickname\n    const consoleNick = this.metadata.consoleNickname || DEFAULT_NICKNAME;\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([11]),\n      Buffer.from(\"consoleNickSU\"),\n      Buffer.from([consoleNick.length]),\n      Buffer.from(consoleNick),\n    ]);\n\n    // Start writting player specific data\n    footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([7]), Buffer.from(\"players{\")]);\n    const players = this.metadata.players;\n    forEach(players, (player, index) => {\n      // Start player obj with index being the player index\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([index.length]), Buffer.from(`${index}{`)]);\n\n      // Start characters key for this player\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([10]), Buffer.from(\"characters{\")]);\n\n      // Write character usage\n      forEach(player.characterUsage, (usage, internalId) => {\n        // Write this character\n        footer = Buffer.concat([\n          footer,\n          Buffer.from(\"U\"),\n          Buffer.from([internalId.length]),\n          Buffer.from(`${internalId}l`),\n          createUInt32Buffer(usage),\n        ]);\n      });\n\n      // Close characters\n      footer = Buffer.concat([footer, Buffer.from(\"}\")]);\n\n      // Start names key for this player\n      footer = Buffer.concat([footer, Buffer.from(\"U\"), Buffer.from([5]), Buffer.from(\"names{\")]);\n\n      // Write display name\n      footer = Buffer.concat([\n        footer,\n        Buffer.from(\"U\"),\n        Buffer.from([7]),\n        Buffer.from(\"netplaySU\"),\n        Buffer.from([player.names.netplay.length]),\n        Buffer.from(`${player.names.netplay}`),\n      ]);\n\n      // Write connect code\n      footer = Buffer.concat([\n        footer,\n        Buffer.from(\"U\"),\n        Buffer.from([4]),\n        Buffer.from(\"codeSU\"),\n        Buffer.from([player.names.code.length]),\n        Buffer.from(`${player.names.code}`),\n      ]);\n\n      // Close names and player\n      footer = Buffer.concat([footer, Buffer.from(\"}}\")]);\n    });\n\n    // Close players\n    footer = Buffer.concat([footer, Buffer.from(\"}\")]);\n\n    // Write played on\n    footer = Buffer.concat([\n      footer,\n      Buffer.from(\"U\"),\n      Buffer.from([8]),\n      Buffer.from(\"playedOnSU\"),\n      Buffer.from([7]),\n      Buffer.from(\"network\"),\n    ]);\n\n    // Close metadata and file\n    footer = Buffer.concat([footer, Buffer.from(\"}}\")]);\n\n    // End the stream\n    if (this.fileStream) {\n      this.fileStream.write(footer, callback);\n    }\n  }\n}\n\nconst createInt32Buffer = (number: number): Buffer => {\n  const buf = Buffer.alloc(4);\n  buf.writeInt32BE(number, 0);\n  return buf;\n};\n\nconst createUInt32Buffer = (number: number): Buffer => {\n  const buf = Buffer.alloc(4);\n  buf.writeUInt32BE(number, 0);\n  return buf;\n};\n","import { format } from \"date-fns\";\nimport path from \"path\";\nimport type { WritableOptions } from \"stream\";\n\nimport { Command } from \"../types\";\nimport { SlpFile } from \"./slpFile\";\nimport type { SlpRawEventPayload, SlpStreamSettings } from \"./slpStream\";\nimport { SlpStream, SlpStreamEvent } from \"./slpStream\";\n\n/**\n * The default function to use for generating new SLP files.\n */\nfunction getNewFilePath(folder: string, date: Date): string {\n  return path.join(folder, `Game_${format(date, \"yyyyMMdd\")}T${format(date, \"HHmmss\")}.slp`);\n}\n\nexport interface SlpFileWriterOptions extends Partial<SlpStreamSettings> {\n  outputFiles: boolean;\n  folderPath: string;\n  consoleNickname: string;\n  newFilename: (folder: string, startTime: Date) => string;\n}\n\nconst defaultSettings: SlpFileWriterOptions = {\n  outputFiles: true,\n  folderPath: \".\",\n  consoleNickname: \"unknown\",\n  newFilename: getNewFilePath,\n};\n\nexport enum SlpFileWriterEvent {\n  NEW_FILE = \"new-file\",\n  FILE_COMPLETE = \"file-complete\",\n}\n\n/**\n * SlpFileWriter lets us not only emit events as an SlpStream but also\n * writes the data that is being passed in to an SLP file. Use this if\n * you want to process Slippi data in real time but also want to be able\n * to write out the data to an SLP file.\n *\n * @export\n * @class SlpFileWriter\n * @extends {SlpStream}\n */\nexport class SlpFileWriter extends SlpStream {\n  private currentFile: SlpFile | null = null;\n  private options: SlpFileWriterOptions;\n\n  /**\n   * Creates an instance of SlpFileWriter.\n   */\n  public constructor(options?: Partial<SlpFileWriterOptions>, opts?: WritableOptions) {\n    super(options, opts);\n    this.options = Object.assign({}, defaultSettings, options);\n    this._setupListeners();\n  }\n\n  private _writePayload(payload: Buffer): void {\n    // Write data to the current file\n    if (this.currentFile) {\n      this.currentFile.write(payload);\n    }\n  }\n\n  private _setupListeners(): void {\n    this.on(SlpStreamEvent.RAW, (data: SlpRawEventPayload) => {\n      const { command, payload } = data;\n      switch (command) {\n        case Command.MESSAGE_SIZES:\n          // Create the new game first before writing the payload\n          this._handleNewGame();\n          this._writePayload(payload);\n          break;\n        case Command.GAME_END:\n          // Write payload first before ending the game\n          this._writePayload(payload);\n          this._handleEndGame();\n          break;\n        default:\n          this._writePayload(payload);\n          break;\n      }\n    });\n  }\n\n  /**\n   * Return the name of the SLP file currently being written or null if\n   * no file is being written to currently.\n   *\n   * @returns {(string | null)}\n   * @memberof SlpFileWriter\n   */\n  public getCurrentFilename(): string | null {\n    if (this.currentFile !== null) {\n      return path.resolve(this.currentFile.path());\n    }\n    return null;\n  }\n\n  /**\n   * Ends the current file being written to.\n   *\n   * @returns {(string | null)}\n   * @memberof SlpFileWriter\n   */\n  public endCurrentFile(): void {\n    this._handleEndGame();\n  }\n\n  /**\n   * Updates the settings to be the desired ones passed in.\n   *\n   * @param {Partial<SlpFileWriterOptions>} settings\n   * @memberof SlpFileWriter\n   */\n  public updateSettings(settings: Partial<SlpFileWriterOptions>): void {\n    this.options = Object.assign({}, this.options, settings);\n  }\n\n  private _handleNewGame(): void {\n    // Only create a new file if we're outputting files\n    if (this.options.outputFiles) {\n      const filePath = this.options.newFilename(this.options.folderPath, new Date());\n      this.currentFile = new SlpFile(filePath, this);\n      // console.log(`Creating new file at: ${filePath}`);\n      this.emit(SlpFileWriterEvent.NEW_FILE, filePath);\n    }\n  }\n\n  private _handleEndGame(): void {\n    // End the stream\n    if (this.currentFile) {\n      // Set the console nickname\n      this.currentFile.setMetadata({\n        consoleNickname: this.options.consoleNickname,\n      });\n      this.currentFile.end();\n\n      // console.log(`Finished writing file: ${this.currentFile.path()}`);\n      this.emit(SlpFileWriterEvent.FILE_COMPLETE, this.currentFile.path());\n\n      // Clear current file\n      this.currentFile = null;\n    }\n  }\n}\n","import { EventEmitter } from \"events\";\nimport { get, keyBy, set } from \"lodash\";\nimport semver from \"semver\";\n\nimport type {\n  EnabledItemType,\n  FrameBookendType,\n  FrameEntryType,\n  FrameStartType,\n  FramesType,\n  GameEndType,\n  GameStartType,\n  GeckoListType,\n  ItemUpdateType,\n  PostFrameUpdateType,\n  PreFrameUpdateType,\n  RollbackFrames,\n} from \"../types\";\nimport { ItemSpawnType } from \"../types\";\nimport { Command, Frames, GameMode } from \"../types\";\nimport { exists } from \"./exists\";\nimport { RollbackCounter } from \"./rollbackCounter\";\n\n// There are 5 bytes of item bitfields that can be enabled\nconst ITEM_SETTINGS_BIT_COUNT = 40;\nexport const MAX_ROLLBACK_FRAMES = 7;\n\nexport enum SlpParserEvent {\n  SETTINGS = \"settings\",\n  END = \"end\",\n  FRAME = \"frame\", // Emitted for every frame\n  FINALIZED_FRAME = \"finalized-frame\", // Emitted for only finalized frames\n  ROLLBACK_FRAME = \"rollback-frame\", // Emitted if a frame is being replaced\n}\n\n// If strict mode is on, we will do strict validation checking\n// which could throw errors on invalid data.\n// Default to false though since probably only real time applications\n// would care about valid data.\nconst defaultSlpParserOptions = {\n  strict: false,\n};\n\nexport type SlpParserOptions = typeof defaultSlpParserOptions;\n\nexport class SlpParser extends EventEmitter {\n  private frames: FramesType = {};\n  private rollbackCounter: RollbackCounter = new RollbackCounter();\n  private settings: GameStartType | null = null;\n  private gameEnd: GameEndType | null = null;\n  private latestFrameIndex: number | null = null;\n  private settingsComplete = false;\n  private lastFinalizedFrame = Frames.FIRST - 1;\n  private options: SlpParserOptions;\n  private geckoList: GeckoListType | null = null;\n\n  public constructor(options?: Partial<SlpParserOptions>) {\n    super();\n    this.options = Object.assign({}, defaultSlpParserOptions, options);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public handleCommand(command: Command, payload: any): void {\n    switch (command) {\n      case Command.GAME_START:\n        this._handleGameStart(payload as GameStartType);\n        break;\n      case Command.FRAME_START:\n        this._handleFrameStart(payload as FrameStartType);\n        break;\n      case Command.POST_FRAME_UPDATE:\n        // We need to handle the post frame update first since that\n        // will finalize the settings object, before we fire the frame update\n        this._handlePostFrameUpdate(payload as PostFrameUpdateType);\n        this._handleFrameUpdate(command, payload as PostFrameUpdateType);\n        break;\n      case Command.PRE_FRAME_UPDATE:\n        this._handleFrameUpdate(command, payload as PreFrameUpdateType);\n        break;\n      case Command.ITEM_UPDATE:\n        this._handleItemUpdate(payload as ItemUpdateType);\n        break;\n      case Command.FRAME_BOOKEND:\n        this._handleFrameBookend(payload as FrameBookendType);\n        break;\n      case Command.GAME_END:\n        this._handleGameEnd(payload as GameEndType);\n        break;\n      case Command.GECKO_LIST:\n        this._handleGeckoList(payload as GeckoListType);\n        break;\n    }\n  }\n\n  /**\n   * Resets the parser state to their default values.\n   */\n  public reset(): void {\n    this.frames = {};\n    this.settings = null;\n    this.gameEnd = null;\n    this.latestFrameIndex = null;\n    this.settingsComplete = false;\n    this.lastFinalizedFrame = Frames.FIRST - 1;\n  }\n\n  public getLatestFrameNumber(): number {\n    return this.latestFrameIndex ?? Frames.FIRST - 1;\n  }\n\n  public getPlayableFrameCount(): number {\n    if (this.latestFrameIndex === null) {\n      return 0;\n    }\n    return this.latestFrameIndex < Frames.FIRST_PLAYABLE ? 0 : this.latestFrameIndex - Frames.FIRST_PLAYABLE;\n  }\n\n  public getLatestFrame(): FrameEntryType | null {\n    // return this.playerFrames[this.latestFrameIndex];\n\n    // TODO: Modify this to check if we actually have all the latest frame data and return that\n    // TODO: If we do. For now I'm just going to take a shortcut\n    const allFrames = this.getFrames();\n    const frameIndex = this.latestFrameIndex !== null ? this.latestFrameIndex : Frames.FIRST;\n    const indexToUse = this.gameEnd ? frameIndex : frameIndex - 1;\n    return get(allFrames, indexToUse) || null;\n  }\n\n  public getSettings(): GameStartType | null {\n    return this.settingsComplete ? this.settings : null;\n  }\n\n  public getItems(): EnabledItemType[] | null {\n    if (this.settings?.itemSpawnBehavior === ItemSpawnType.OFF) {\n      return null;\n    }\n\n    const itemBitfield = this.settings?.enabledItems;\n    if (!exists(itemBitfield)) {\n      return null;\n    }\n\n    const enabledItems: EnabledItemType[] = [];\n\n    // Ideally we would be able to do this with bitshifting instead, but javascript\n    // truncates numbers after 32 bits when doing bitwise operations\n    for (let i = 0; i < ITEM_SETTINGS_BIT_COUNT; i++) {\n      if (Math.floor(itemBitfield / 2 ** i) & 1) {\n        enabledItems.push(2 ** i);\n      }\n    }\n\n    return enabledItems;\n  }\n\n  public getGameEnd(): GameEndType | null {\n    return this.gameEnd;\n  }\n\n  public getFrames(): FramesType {\n    return this.frames;\n  }\n\n  public getRollbackFrames(): RollbackFrames {\n    return {\n      frames: this.rollbackCounter.getFrames(),\n      count: this.rollbackCounter.getCount(),\n      lengths: this.rollbackCounter.getLengths(),\n    };\n  }\n\n  public getFrame(num: number): FrameEntryType | null {\n    return this.frames[num] || null;\n  }\n\n  public getGeckoList(): GeckoListType | null {\n    return this.geckoList;\n  }\n\n  private _handleGeckoList(payload: GeckoListType): void {\n    this.geckoList = payload;\n  }\n\n  private _handleGameEnd(payload: GameEndType): void {\n    // Finalize remaining frames if necessary\n    if (this.latestFrameIndex !== null && this.latestFrameIndex !== this.lastFinalizedFrame) {\n      this._finalizeFrames(this.latestFrameIndex);\n    }\n\n    payload = payload as GameEndType;\n    this.gameEnd = payload;\n    this.emit(SlpParserEvent.END, this.gameEnd);\n  }\n\n  private _handleGameStart(payload: GameStartType): void {\n    this.settings = payload;\n    const players = payload.players;\n    this.settings.players = players.filter((player) => player.type !== 3);\n\n    // Check to see if the file was created after the sheik fix so we know\n    // we don't have to process the first frame of the game for the full settings\n    if (payload.slpVersion && semver.gte(payload.slpVersion, \"1.6.0\")) {\n      this._completeSettings();\n    }\n  }\n\n  private _handleFrameStart(payload: FrameStartType): void {\n    const currentFrameNumber = payload.frame!;\n\n    set(this.frames, [currentFrameNumber, \"start\"], payload);\n  }\n\n  private _handlePostFrameUpdate(payload: PostFrameUpdateType): void {\n    if (this.settingsComplete) {\n      return;\n    }\n\n    // Finish calculating settings\n    if (payload.frame! <= Frames.FIRST) {\n      const playerIndex = payload.playerIndex!;\n      const playersByIndex = keyBy(this.settings!.players, \"playerIndex\");\n\n      switch (payload.internalCharacterId) {\n        case 0x7:\n          playersByIndex[playerIndex]!.characterId = 0x13; // Sheik\n          break;\n        case 0x13:\n          playersByIndex[playerIndex]!.characterId = 0x12; // Zelda\n          break;\n      }\n    }\n    if (payload.frame! > Frames.FIRST) {\n      this._completeSettings();\n    }\n  }\n\n  private _handleFrameUpdate(command: Command, payload: PreFrameUpdateType | PostFrameUpdateType): void {\n    payload = payload as PostFrameUpdateType;\n    const location = command === Command.PRE_FRAME_UPDATE ? \"pre\" : \"post\";\n    const field = payload.isFollower ? \"followers\" : \"players\";\n    const currentFrameNumber = payload.frame!;\n    this.latestFrameIndex = currentFrameNumber;\n    if (location === \"pre\" && !payload.isFollower) {\n      const currentFrame = this.frames[currentFrameNumber];\n      const wasRolledback = this.rollbackCounter.checkIfRollbackFrame(currentFrame, payload.playerIndex!);\n      if (wasRolledback) {\n        // frame is about to be overwritten\n        this.emit(SlpParserEvent.ROLLBACK_FRAME, currentFrame);\n      }\n    }\n    set(this.frames, [currentFrameNumber, field, payload.playerIndex!, location], payload);\n    set(this.frames, [currentFrameNumber, \"frame\"], currentFrameNumber);\n\n    // If file is from before frame bookending, add frame to stats computer here. Does a little\n    // more processing than necessary, but it works\n    const settings = this.getSettings();\n    if (settings && (!settings.slpVersion || semver.lte(settings.slpVersion, \"2.2.0\"))) {\n      this.emit(SlpParserEvent.FRAME, this.frames[currentFrameNumber]);\n      // Finalize the previous frame since no bookending exists\n      this._finalizeFrames(currentFrameNumber - 1);\n    } else {\n      set(this.frames, [currentFrameNumber, \"isTransferComplete\"], false);\n    }\n  }\n\n  private _handleItemUpdate(payload: ItemUpdateType): void {\n    const currentFrameNumber = payload.frame!;\n    const items = this.frames[currentFrameNumber]?.items ?? [];\n    items.push(payload);\n\n    // Set items with newest\n    set(this.frames, [currentFrameNumber, \"items\"], items);\n  }\n\n  private _handleFrameBookend(payload: FrameBookendType): void {\n    const latestFinalizedFrame = payload.latestFinalizedFrame!;\n    const currentFrameNumber = payload.frame!;\n    set(this.frames, [currentFrameNumber, \"isTransferComplete\"], true);\n    // Fire off a normal frame event\n    this.emit(SlpParserEvent.FRAME, this.frames[currentFrameNumber]);\n\n    // Finalize frames if necessary\n    const validLatestFrame = this.settings!.gameMode === GameMode.ONLINE;\n    if (validLatestFrame && latestFinalizedFrame >= Frames.FIRST) {\n      // Ensure valid latestFinalizedFrame\n      if (this.options.strict && latestFinalizedFrame < currentFrameNumber - MAX_ROLLBACK_FRAMES) {\n        throw new Error(`latestFinalizedFrame should be within ${MAX_ROLLBACK_FRAMES} frames of ${currentFrameNumber}`);\n      }\n      this._finalizeFrames(latestFinalizedFrame);\n    } else {\n      // Since we don't have a valid finalized frame, just finalize the frame based on MAX_ROLLBACK_FRAMES\n      this._finalizeFrames(currentFrameNumber - MAX_ROLLBACK_FRAMES);\n    }\n  }\n\n  /**\n   * Fires off the FINALIZED_FRAME event for frames up until a certain number\n   * @param num The frame to finalize until\n   */\n  private _finalizeFrames(num: number): void {\n    while (this.lastFinalizedFrame < num) {\n      const frameToFinalize = this.lastFinalizedFrame + 1;\n      const frame = this.getFrame(frameToFinalize)!;\n\n      // Check that we have all the pre and post frame data for all players if we're in strict mode\n      if (this.options.strict) {\n        for (const player of this.settings!.players) {\n          const playerFrameInfo = frame.players[player.playerIndex];\n          // Allow player frame info to be empty in non 1v1 games since\n          // players which have been defeated will have no frame info.\n          if (this.settings!.players.length > 2 && !playerFrameInfo) {\n            continue;\n          }\n\n          const { pre, post } = playerFrameInfo!;\n          if (!pre || !post) {\n            const preOrPost = pre ? \"pre\" : \"post\";\n            throw new Error(\n              `Could not finalize frame ${frameToFinalize} of ${num}: missing ${preOrPost}-frame update for player ${player.playerIndex}`,\n            );\n          }\n        }\n      }\n\n      // Our frame is complete so finalize the frame\n      this.emit(SlpParserEvent.FINALIZED_FRAME, frame);\n      this.lastFinalizedFrame = frameToFinalize;\n    }\n  }\n\n  private _completeSettings(): void {\n    if (!this.settingsComplete) {\n      this.settingsComplete = true;\n      this.emit(SlpParserEvent.SETTINGS, this.settings);\n    }\n  }\n}\n","import type { FrameEntryType, RollbackFramesType } from \"../types\";\n\nexport class RollbackCounter {\n  private rollbackFrames: RollbackFramesType = {};\n  private rollbackFrameCount = 0;\n  private rollbackPlayerIdx: number | null = null; // for keeping track of rollbacks by following a single player\n  private lastFrameWasRollback = false;\n  private currentRollbackLength = 0;\n  private rollbackLengths: number[] = [];\n\n  public checkIfRollbackFrame(currentFrame: FrameEntryType | undefined, playerIdx: number) {\n    if (this.rollbackPlayerIdx === null) {\n      // we only want to follow a single player to avoid double counting. So we use whoever is on first.\n      this.rollbackPlayerIdx = playerIdx;\n    } else if (this.rollbackPlayerIdx !== playerIdx) {\n      return;\n    }\n\n    if (currentFrame && currentFrame.players) {\n      // frame already exists for currentFrameNumber so we must be rolling back\n      // Note: We detect during PreFrameUpdate, but new versions have a\n      // FrameStart command that has already initialized the frame, so we must\n      // check for player data too.\n      if (this.rollbackFrames[currentFrame.frame]) {\n        this.rollbackFrames[currentFrame.frame]!.push(currentFrame);\n      } else {\n        this.rollbackFrames[currentFrame.frame] = [currentFrame];\n      }\n      this.rollbackFrameCount++;\n      this.currentRollbackLength++;\n      this.lastFrameWasRollback = true;\n    } else if (this.lastFrameWasRollback) {\n      this.rollbackLengths.push(this.currentRollbackLength);\n      this.currentRollbackLength = 0;\n      this.lastFrameWasRollback = false;\n    }\n    return this.lastFrameWasRollback;\n  }\n\n  public getFrames() {\n    return this.rollbackFrames;\n  }\n\n  public getCount() {\n    return this.rollbackFrameCount;\n  }\n\n  public getLengths() {\n    return this.rollbackLengths;\n  }\n}\n","import type { StadiumStatsType, StatOptions, StatsType } from \"./stats\";\nimport { TargetBreakComputer } from \"./stats\";\nimport {\n  ActionsComputer,\n  ComboComputer,\n  ConversionComputer,\n  generateOverallStats,\n  InputComputer,\n  Stats,\n  StockComputer,\n} from \"./stats\";\nimport type {\n  EnabledItemType,\n  EventCallbackFunc,\n  FrameEntryType,\n  FramesType,\n  GameEndType,\n  GameStartType,\n  GeckoListType,\n  MetadataType,\n  PlacementType,\n  PostFrameUpdateType,\n  RollbackFrames,\n} from \"./types\";\nimport { GameEndMethod, GameMode } from \"./types\";\nimport { getWinners } from \"./utils/getWinners\";\nimport { extractDistanceInfoFromFrame } from \"./utils/homeRunDistance\";\nimport { SlpParser, SlpParserEvent } from \"./utils/slpParser\";\nimport type { SlpFileType, SlpReadInput } from \"./utils/slpReader\";\nimport {\n  closeSlpFile,\n  extractFinalPostFrameUpdates,\n  getGameEnd,\n  getMetadata,\n  iterateEvents,\n  openSlpFile,\n  SlpInputSource,\n} from \"./utils/slpReader\";\n\n/**\n * Slippi Game class that wraps a file\n */\nexport class SlippiGame {\n  private input: SlpReadInput;\n  private metadata: MetadataType | null = null;\n  private finalStats: StatsType | null = null;\n  private parser: SlpParser;\n  private readPosition: number | null = null;\n  private actionsComputer: ActionsComputer = new ActionsComputer();\n  private conversionComputer: ConversionComputer = new ConversionComputer();\n  private comboComputer: ComboComputer = new ComboComputer();\n  private stockComputer: StockComputer = new StockComputer();\n  private inputComputer: InputComputer = new InputComputer();\n  private targetBreakComputer: TargetBreakComputer = new TargetBreakComputer();\n  protected statsComputer: Stats;\n\n  public constructor(input: string | Buffer | ArrayBuffer, opts?: StatOptions) {\n    if (typeof input === \"string\") {\n      this.input = {\n        source: SlpInputSource.FILE,\n        filePath: input,\n      };\n    } else if (input instanceof Buffer) {\n      this.input = {\n        source: SlpInputSource.BUFFER,\n        buffer: input,\n      };\n    } else if (input instanceof ArrayBuffer) {\n      this.input = {\n        source: SlpInputSource.BUFFER,\n        buffer: Buffer.from(input),\n      };\n    } else {\n      throw new Error(\"Cannot create SlippiGame with input of that type\");\n    }\n\n    // Set up stats calculation\n    this.statsComputer = new Stats(opts);\n    this.statsComputer.register(\n      this.actionsComputer,\n      this.comboComputer,\n      this.conversionComputer,\n      this.inputComputer,\n      this.stockComputer,\n      this.targetBreakComputer,\n    );\n\n    this.parser = new SlpParser();\n    this.parser.on(SlpParserEvent.SETTINGS, (settings) => {\n      this.statsComputer.setup(settings);\n    });\n\n    // Use finalized frames for stats computation\n    this.parser.on(SlpParserEvent.FINALIZED_FRAME, (frame: FrameEntryType) => {\n      this.statsComputer.addFrame(frame);\n    });\n  }\n\n  private _process(shouldStop: EventCallbackFunc = () => false, file?: SlpFileType): void {\n    if (this.parser.getGameEnd() !== null) {\n      return;\n    }\n    const slpfile = file ?? openSlpFile(this.input);\n    // Generate settings from iterating through file\n    this.readPosition = iterateEvents(\n      slpfile,\n      (command, payload) => {\n        if (!payload) {\n          // If payload is falsy, keep iterating. The parser probably just doesn't know\n          // about this command yet\n          return false;\n        }\n        this.parser.handleCommand(command, payload);\n        return shouldStop(command, payload);\n      },\n      this.readPosition,\n    );\n    if (!file) {\n      closeSlpFile(slpfile);\n    }\n  }\n\n  /**\n   * Gets the game settings, these are the settings that describe the starting state of\n   * the game such as characters, stage, etc.\n   */\n  public getSettings(): GameStartType | null {\n    // Settings is only complete after post-frame update\n    this._process(() => this.parser.getSettings() !== null);\n    return this.parser.getSettings();\n  }\n\n  public getItems(): EnabledItemType[] | null {\n    this._process();\n    return this.parser.getItems();\n  }\n\n  public getLatestFrame(): FrameEntryType | null {\n    this._process();\n    return this.parser.getLatestFrame();\n  }\n\n  public getGameEnd(options: { skipProcessing?: boolean } = {}): GameEndType | null {\n    if (options?.skipProcessing) {\n      // Read game end block directly\n      const slpfile = openSlpFile(this.input);\n      const gameEnd = getGameEnd(slpfile);\n      closeSlpFile(slpfile);\n      return gameEnd;\n    }\n\n    this._process();\n    return this.parser.getGameEnd();\n  }\n\n  public getFrames(): FramesType {\n    this._process();\n    return this.parser.getFrames();\n  }\n\n  public getRollbackFrames(): RollbackFrames {\n    this._process();\n    return this.parser.getRollbackFrames();\n  }\n\n  public getGeckoList(): GeckoListType | null {\n    this._process(() => this.parser.getGeckoList() !== null);\n    return this.parser.getGeckoList();\n  }\n\n  public getStats(): StatsType | null {\n    if (this.finalStats) {\n      return this.finalStats;\n    }\n\n    this._process();\n\n    const settings = this.parser.getSettings();\n    if (!settings) {\n      return null;\n    }\n\n    // Finish processing if we're not up to date\n    this.statsComputer.process();\n    const inputs = this.inputComputer.fetch();\n    const stocks = this.stockComputer.fetch();\n    const conversions = this.conversionComputer.fetch();\n    const playableFrameCount = this.parser.getPlayableFrameCount();\n    const overall = generateOverallStats({ settings, inputs, conversions, playableFrameCount });\n\n    const gameEnd = this.parser.getGameEnd();\n    const gameComplete = gameEnd !== null;\n\n    const stats: StatsType = {\n      lastFrame: this.parser.getLatestFrameNumber(),\n      playableFrameCount,\n      stocks: stocks,\n      conversions: conversions,\n      combos: this.comboComputer.fetch(),\n      actionCounts: this.actionsComputer.fetch(),\n      overall: overall,\n      gameComplete,\n    };\n\n    if (gameComplete) {\n      // If the game is complete, store a cached version of stats because it should not\n      // change anymore. Ideally the statsCompuer.process and fetch functions would simply do no\n      // work in this case instead but currently the conversions fetch function,\n      // generateOverallStats, and maybe more are doing work on every call.\n      this.finalStats = stats;\n    }\n\n    return stats;\n  }\n\n  public getStadiumStats(): StadiumStatsType | null {\n    this._process();\n\n    const settings = this.parser.getSettings();\n    if (!settings) {\n      return null;\n    }\n\n    const latestFrame = this.parser.getLatestFrame();\n    const players = latestFrame?.players;\n\n    if (!players) {\n      return null;\n    }\n\n    this.statsComputer.process();\n\n    switch (settings.gameMode) {\n      case GameMode.TARGET_TEST:\n        return {\n          type: \"target-test\",\n          targetBreaks: this.targetBreakComputer.fetch(),\n        };\n      case GameMode.HOME_RUN_CONTEST:\n        const distanceInfo = extractDistanceInfoFromFrame(settings, latestFrame);\n        if (!distanceInfo) {\n          return null;\n        }\n\n        return {\n          type: \"home-run-contest\",\n          distance: distanceInfo.distance,\n          units: distanceInfo.units,\n        };\n      default:\n        return null;\n    }\n  }\n\n  public getMetadata(): MetadataType | null {\n    if (this.metadata) {\n      return this.metadata;\n    }\n    const slpfile = openSlpFile(this.input);\n    this.metadata = getMetadata(slpfile);\n    closeSlpFile(slpfile);\n    return this.metadata;\n  }\n\n  public getFilePath(): string | null {\n    if (this.input.source !== SlpInputSource.FILE) {\n      return null;\n    }\n\n    return this.input.filePath ?? null;\n  }\n\n  public getWinners(): PlacementType[] {\n    // Read game end block directly\n    const slpfile = openSlpFile(this.input);\n    const gameEnd = getGameEnd(slpfile);\n    this._process(() => this.parser.getSettings() !== null, slpfile);\n    const settings = this.parser.getSettings();\n    if (!gameEnd || !settings) {\n      // Technically using the final post frame updates, it should be possible to compute winners for\n      // replays without a gameEnd message. But I'll leave this here anyway\n      closeSlpFile(slpfile);\n      return [];\n    }\n\n    // If we went to time, let's fetch the post frame updates to compute the winner\n    let finalPostFrameUpdates: PostFrameUpdateType[] = [];\n    if (gameEnd.gameEndMethod === GameEndMethod.TIME) {\n      finalPostFrameUpdates = extractFinalPostFrameUpdates(slpfile);\n    }\n\n    closeSlpFile(slpfile);\n    return getWinners(gameEnd, settings, finalPostFrameUpdates);\n  }\n}\n","import type { FrameEntryType, GameStartType } from \"../types\";\nimport { Language } from \"../types\";\nimport { exists } from \"./exists\";\n\nconst SANDBAG_INTERNAL_ID = 32;\n\nconst FEET_CONVERSION_FACTOR = 0.952462;\nconst METERS_CONVERSION_FACTOR = 1.04167;\n\ntype HomeRunDistanceUnits = \"feet\" | \"meters\";\n\nexport function positionToHomeRunDistance(distance: number, units: HomeRunDistanceUnits = \"feet\"): number {\n  let score = 0;\n  switch (units) {\n    case \"feet\":\n      score = 10 * Math.floor(distance - 70 * FEET_CONVERSION_FACTOR);\n      // convert to float32\n      score = Math.fround(score);\n      score = Math.floor((score / 30.4788) * 10) / 10;\n      break;\n    case \"meters\":\n      score = 10 * Math.floor(distance - 70 * METERS_CONVERSION_FACTOR);\n      // convert to float32\n      score = Math.fround(score);\n      score = Math.floor((score / 100) * 10) / 10;\n      break;\n    default:\n      throw new Error(`Unsupported units: ${units}`);\n  }\n\n  // round to 1 decimal\n  score = Math.round(score * 10) / 10;\n  return Math.max(0, score);\n}\n\nexport function extractDistanceInfoFromFrame(\n  settings: Pick<GameStartType, \"language\">,\n  lastFrame: Pick<FrameEntryType, \"players\">,\n): { distance: number; units: HomeRunDistanceUnits } | null {\n  const sandbagLastFrame = Object.values(lastFrame.players)\n    .filter(exists)\n    .find((playerFrame) => playerFrame.post.internalCharacterId === SANDBAG_INTERNAL_ID);\n\n  if (!sandbagLastFrame) {\n    return null;\n  }\n\n  // Only return the distance in meters if it's a Japanese replay.\n  // Technically we should check if the replay is PAL but we don't yet support\n  // stadium replays in PAL.\n  const units: HomeRunDistanceUnits = settings.language === Language.JAPANESE ? \"meters\" : \"feet\";\n  const distance = positionToHomeRunDistance(sandbagLastFrame.post.positionX ?? 0, units);\n  return {\n    distance,\n    units,\n  };\n}\n","import type { GameEndType, GameStartType, PlacementType, PostFrameUpdateType } from \"../types\";\nimport { GameEndMethod } from \"../types\";\nimport { exists } from \"./exists\";\n\nexport function getWinners(\n  gameEnd: GameEndType,\n  settings: Pick<GameStartType, \"players\" | \"isTeams\">,\n  finalPostFrameUpdates: PostFrameUpdateType[],\n): PlacementType[] {\n  const { placements, gameEndMethod, lrasInitiatorIndex } = gameEnd;\n  const { players, isTeams } = settings;\n\n  if (gameEndMethod === GameEndMethod.NO_CONTEST || gameEndMethod === GameEndMethod.UNRESOLVED) {\n    // The winner is the person who didn't LRAS\n    if (exists(lrasInitiatorIndex) && players.length === 2) {\n      const winnerIndex = players.find(({ playerIndex }) => playerIndex !== lrasInitiatorIndex)?.playerIndex;\n      if (exists(winnerIndex)) {\n        return [\n          {\n            playerIndex: winnerIndex,\n            position: 0,\n          },\n        ];\n      }\n    }\n\n    return [];\n  }\n\n  if (gameEndMethod === GameEndMethod.TIME && players.length === 2) {\n    const nonFollowerUpdates = finalPostFrameUpdates.filter((pfu) => !pfu.isFollower);\n    if (nonFollowerUpdates.length !== players.length) {\n      return [];\n    }\n\n    const p1 = nonFollowerUpdates[0]!;\n    const p2 = nonFollowerUpdates[1]!;\n    if (p1.stocksRemaining! > p2.stocksRemaining!) {\n      return [{ playerIndex: p1.playerIndex!, position: 0 }];\n    } else if (p2.stocksRemaining! > p1.stocksRemaining!) {\n      return [{ playerIndex: p2.playerIndex!, position: 0 }];\n    }\n\n    const p1Health = Math.trunc(p1.percent!);\n    const p2Health = Math.trunc(p2.percent!);\n    if (p1Health < p2Health) {\n      return [{ playerIndex: p1.playerIndex!, position: 0 }];\n    } else if (p2Health < p1Health) {\n      return [{ playerIndex: p2.playerIndex!, position: 0 }];\n    }\n\n    // If stocks and percents were tied, no winner\n    return [];\n  }\n\n  const firstPosition = placements.find((placement) => placement.position === 0);\n  if (!firstPosition) {\n    return [];\n  }\n\n  const winningTeam = players.find(({ playerIndex }) => playerIndex === firstPosition.playerIndex)?.teamId ?? null;\n  if (isTeams && exists(winningTeam)) {\n    return placements.filter((placement) => {\n      const teamId = players.find(({ playerIndex }) => playerIndex === placement.playerIndex)?.teamId ?? null;\n      return teamId === winningTeam;\n    });\n  }\n\n  return [firstPosition];\n}\n","// eslint-disable-next-line\nexport function getDeathDirection(actionStateId: number) {\n  if (actionStateId > 0xa) {\n    return null;\n  }\n\n  switch (actionStateId) {\n    case 0:\n      return \"down\";\n    case 1:\n      return \"left\";\n    case 2:\n      return \"right\";\n    default:\n      return \"up\";\n  }\n}\n","import { format } from \"date-fns\";\n\nimport type { GameStartType } from \"../types\";\nimport { TimerType } from \"../types\";\nimport { exists } from \"./exists\";\n\nexport function frameToGameTimer(\n  frame: number,\n  options: Pick<GameStartType, \"timerType\" | \"startingTimerSeconds\">,\n): string {\n  const { timerType, startingTimerSeconds } = options;\n\n  if (timerType === TimerType.DECREASING) {\n    if (!exists(startingTimerSeconds)) {\n      return \"Unknown\";\n    }\n    const centiseconds = Math.ceil((((60 - (frame % 60)) % 60) * 99) / 59);\n    const date = new Date(0, 0, 0, 0, 0, startingTimerSeconds - frame / 60, centiseconds * 10);\n    return format(date, \"mm:ss.SS\");\n  }\n\n  if (timerType === TimerType.INCREASING) {\n    const centiseconds = Math.floor(((frame % 60) * 99) / 59);\n    const date = new Date(0, 0, 0, 0, 0, frame / 60, centiseconds * 10);\n    return format(date, \"mm:ss.SS\");\n  }\n\n  return \"Infinite\";\n}\n"],"names":["UnknownCharacter","id","name","shortName","colors","generateCharacterInfo","info","getCharacterInfo","externalCharacterId","data","characters","toString","Object","entries","map","parseInt","sort","a","b","characterColor","UnknownMove","getMoveInfo","moveId","moveName","moveNames","UnknownStage","getStageInfo","stageId","stageName","stageNames","Character","Stage","State","Timers","PUNISH_RESET_FRAMES","RECOVERY_RESET_FRAMES","COMBO_STRING_RESET_FRAMES","getSinglesPlayerPermutationsFromSettings","settings","players","length","playerIndex","opponentIndex","didLoseStock","frame","prevFrame","stocksRemaining","isInControl","state","ground","GROUNDED_CONTROL_START","GROUNDED_CONTROL_END","squat","SQUAT_START","SQUAT_END","groundAttack","GROUND_ATTACK_START","GROUND_ATTACK_END","isGrab","GRAB","isTeching","TECH_START","TECH_END","isDown","DOWN_START","DOWN_END","isDamaged","DAMAGE_START","DAMAGE_END","DAMAGE_FALL","JAB_RESET_UP","JAB_RESET_DOWN","isGrabbed","CAPTURE_START","CAPTURE_END","isCommandGrabbed","COMMAND_GRAB_RANGE1_START","COMMAND_GRAB_RANGE1_END","COMMAND_GRAB_RANGE2_START","COMMAND_GRAB_RANGE2_END","BARREL_WAIT","isDead","DYING_START","DYING_END","calcDamageTaken","percent","dashDanceAnimations","DASH","TURN","ActionsComputer","playerPermutations","Array","Map","setup","forEach","indices","set","playerCounts","wavedashCount","wavelandCount","airDodgeCount","dashDanceCount","spotDodgeCount","ledgegrabCount","rollCount","lCancelCount","success","fail","attackCount","jab1","jab2","jab3","jabm","dash","ftilt","utilt","dtilt","fsmash","usmash","dsmash","nair","fair","bair","uair","dair","grabCount","throwCount","up","forward","back","down","groundTechCount","away","in","neutral","wallTechCount","animations","actionFrameCounters","processFrame","this","get","playerFrame","post","opponentFrame","incrementCount","field","condition","current","currentAnimation","actionStateId","push","currentFrameCounter","actionStateCounter","last3Frames","slice","prevAnimation","animation","isEqual","ROLL_BACKWARD","ROLL_FORWARD","SPOT_DODGE","AIR_DODGE","CLIFF_CATCH","isGrabbing","isGrabAction","DASH_GRAB","ATTACK_DASH","ATTACK_JAB1","ATTACK_JAB2","ATTACK_JAB3","ATTACK_JABM","ATTACK_FTILT_START","ATTACK_FTILT_END","isForwardTilt","ATTACK_UTILT","ATTACK_DTILT","ATTACK_FSMASH_START","ATTACK_FSMASH_END","isForwardSmash","ATTACK_USMASH","ATTACK_DSMASH","AERIAL_NAIR","AERIAL_FAIR","AERIAL_BAIR","AERIAL_UAIR","AERIAL_DAIR","internalCharacterId","GNW_JAB1","GNW_JABM","GNW_DTILT","GNW_FSMASH","GNW_NAIR","GNW_BAIR","GNW_UAIR","PEACH_FSMASH1","PEACH_FSMASH2","PEACH_FSMASH3","THROW_UP","THROW_FORWARD","THROW_DOWN","THROW_BACK","facingOpponent","facingDirection","positionX","TECH_MISS_DOWN","TECH_MISS_UP","isMissGroundTech","FORWARD_TECH","BACKWARD_TECH","NEUTRAL_TECH","WALL_TECH","MISSED_WALL_TECH","AERIAL_ATTACK_START","AERIAL_ATTACK_END","isAerialAttack","lCancelStatus","counts","isSpecialLanding","last","LANDING_FALL_SPECIAL","isAcceptablePrevious","isAboveMin","CONTROLLED_JUMP_START","isBelowMax","CONTROLLED_JUMP_END","isWavedashInitiationAnimation","recentFrames","recentAnimations","keyBy","size","ACTION_KNEE_BEND","handleActionWavedash","handleActionCompute","fetch","from","values","val","ComboEvent","Command","GameMode","Language","TimerType","ItemSpawnType","EnabledItemType","GameEndMethod","Frames","JoystickRegion","ComboComputer","EventEmitter","combos","combo","move","resetCounter","lastHitAnimation","event","allFrames","frames","currentFrameNumber","prevFrameNumber","prevPlayerFrame","prevOpponentFrame","oppActionStateId","opntIsDamaged","opntIsGrabbed","opntIsCommandGrabbed","opntDamageTaken","comboStarted","startFrame","endFrame","startPercent","currentPercent","endPercent","moves","didKill","lastHitBy","lastAttackLanded","hitCount","damage","COMBO_EXTEND","COMBO_START","opntIsTeching","opntIsDowned","opntDidLoseStock","opntIsDying","shouldTerminate","COMBO_END","handleComboCompute","emit","ConversionComputer","constructor","conversions","metadata","lastEndFrameByOppIdx","conversion","terminated","openingType","opntInControl","handleConversionCompute","_populateConversionTypes","conversionsToHandle","filter","groupedConversions","groupBy","orderBy","isTrade","lastMove","oppEndFrame","InputComputer","inputCount","joystickInputCount","cstickInputCount","buttonInputCount","triggerInputCount","pre","FIRST_PLAYABLE","newInputsPressed","x","count","bits","countSetBits","physicalButtons","prevAnalogRegion","getJoystickRegion","joystickX","joystickY","currentAnalogRegion","DZ","prevCstickRegion","cStickX","cStickY","currentCstickRegion","physicalLTrigger","physicalRTrigger","handleInputCompute","y","region","NE","SE","SW","NW","N","E","S","W","generateOverallStats","inputs","playableFrameCount","inputsByPlayer","originalConversions","conversionsByPlayer","conv","_conv$moves$","conversionsByPlayerByOpening","mapValues","gameMinutes","player","playerInputs","inputCounts","buttons","triggers","cstick","joystick","total","conversionCount","successfulConversionCount","opponentIndices","opp","isTeams","teamId","totalDamage","killCount","successfulConversions","getRatio","inputsPerMinute","digitalInputsPerMinute","openingsPerKill","damagePerOpening","neutralWinRatio","getOpeningRatio","counterHitRatio","beneficialTradeRatio","getBeneficialTradeRatio","ratio","type","openings","opponentOpenings","flatten","playerTrades","opponentTrades","benefitsPlayer","zip","conversionPair","playerConversion","first","opponentConversion","playerDamage","opponentDamage","defaultOptions","processOnTheFly","Stats","options","lastProcessedFrame","allComputers","assign","v","comp","register","computer","process","i","FIRST","isCompletedFrame","addFrame","StockComputer","stocks","stock","deathAnimation","handleStockCompute","exists","value","TargetBreakComputer","targetBreaks","isTargetTestGame","gameMode","TARGET_TEST","_frames$Frames$FIRST","items","_frames$Frames$FIRST$2","item","typeId","target","spawnId","frameDestroyed","positionY","currentTargets","_frames$currentFrameN2","_frames$currentFrameN3","previousTargets","_frames$prevFrameNumb2","_frames$prevFrameNumb3","currentTargetIds","includes","targetBreak","find","handleTargetBreak","CommunicationType","ConnectionEvent","ConnectionStatus","Ports","CommunicationState","ConsoleCommunication","receiveBuf","Buffer","messages","receive","concat","msgSize","readUInt32BE","ubjsonData","decode","getReceiveBuffer","getMessages","toReturn","genHandshakeOut","cursor","clientToken","isRealtime","clientTokenBuf","writeUInt32BE","message","HANDSHAKE","payload","Uint8Array","buf","encode","optimizeArrays","msg","byteLength","defaultConnectionDetails","consoleNick","gameDataCursor","version","consoleConnectionOptions","autoReconnect","DolphinMessageType","SlpInputSource","SlpStreamMode","toHalfwidth","str","ret","char","convertChar","charCode","charCodeAt","String","fromCharCode","readRef","ref","buffer","offset","position","source","FILE","fs","readSync","fileDescriptor","BUFFER","copy","Error","getLenRef","fstatSync","openSlpFile","input","filePath","fd","openSync","getRef","rawDataPosition","getRawDataPosition","rawDataLength","fileSize","rawDataLen","getRawDataLength","metadataPosition","metadataLength","getMetadataLength","messageSizes","MESSAGE_SIZES","payloadLength","messageSizesBuffer","getMessageSizes","closeSlpFile","file","closeSync","getEnabledItems","view","reduce","acc","byteOffset","index","readUint8","getGameInfoBlock","gameBitfield1","gameBitfield2","gameBitfield3","gameBitfield4","bombRainEnabled","itemSpawnBehavior","readInt8","selfDestructScoreValue","itemSpawnBitfield1","itemSpawnBitfield2","itemSpawnBitfield3","itemSpawnBitfield4","itemSpawnBitfield5","damageRatio","readFloat","iterateEvents","slpFile","callback","startPos","readPosition","stopReadingAt","commandPayloadBuffers","splitMessageBuffer","commandByteBuffer","commandByte","undefined","advanceAmount","SPLIT_MESSAGE","DataView","readUint16","isLastMessage","readBool","internalCommand","appendBuf","mergedBuf","parseMessage","command","GAME_START","getPlayerObject","cfOffset","dashback","readUint32","controllerFix","nametagStart","nametagBuf","nameTagString","iconv","split","shift","nametag","displayNameStart","displayNameBuf","displayNameString","displayName","connectCodeStart","connectCodeBuf","connectCodeString","connectCode","userIdStart","userIdBuf","userIdString","userId","port","characterId","startStocks","teamShade","handicap","staminaMode","Boolean","silentCharacter","lowGravity","invisible","blackStockIcon","metal","startOnAngelPlatform","rumbleEnabled","cpuLevel","offenseRatio","defenseRatio","modelScale","matchIdStart","matchIdBuf","matchIdString","matchId","slpVersion","timerType","inGameMode","friendlyFireEnabled","startingTimerSeconds","enabledItems","scene","language","gameInfoBlock","randomSeed","isPAL","isFrozenPS","matchInfo","gameNumber","tiebreakerNumber","FRAME_START","readInt32","seed","sceneFrameCounter","PRE_FRAME_UPDATE","isFollower","trigger","rawJoystickX","POST_FRAME_UPDATE","selfInducedSpeeds","airX","attackX","attackY","groundX","shieldSize","currentComboCount","miscActionState","isAirborne","lastGroundId","jumpsRemaining","hurtboxCollisionState","hitlagRemaining","animationIndex","ITEM_UPDATE","velocityX","velocityY","damageTaken","expirationTimer","missileType","turnipFace","chargeShotLaunched","chargePower","owner","FRAME_BOOKEND","latestFinalizedFrame","GAME_END","placements","gameEndMethod","lrasInitiatorIndex","GECKO_LIST","codes","pos","word1","codetype","address","contents","canReadFromView","getFloat32","getInt32","getInt8","getUint32","getUint16","bitmask","getUint8","getMetadata","ex","getGameEnd","gameEndPayloadSize","gameEndSize","gameEndPosition","extractFinalPostFrameUpdates","postFramePayloadSize","frameBookendPayloadSize","postFrameSize","frameNum","postFramePosition","postFrameUpdates","postFrameMessage","unshift","defaultSettings","suppressErrors","mode","AUTO","SlpStreamEvent","SlpStream","Writable","slpOptions","opts","gameEnded","payloadSizes","previousBuffer","restart","_write","newData","encoding","dataView","payloadSize","MANUAL","payloadPtr","payloadDataView","payloadLen","_processCommand","err","_writeCommand","entirePayload","payloadBuf","bufToWrite","RAW","processReceiveCommands","COMMAND","parsedPayload","SlpFile","slpStream","fileStream","usesExternalStream","consoleNickname","startTime","Date","lastFrame","_setupListeners","_initializeNewGame","path","setMetadata","chunk","write","_onCommand","characterUsage","names","netplay","code","prevPlayer","curCharFrames","streamListener","on","writeSync","createUInt32Buffer","removeListener","end","createWriteStream","header","_final","footer","startTimeStr","toISOString","createInt32Buffer","usage","internalId","number","alloc","writeInt32BE","outputFiles","folderPath","newFilename","folder","date","join","format","SlpFileWriterEvent","SlpParserEvent","RollbackCounter","rollbackFrames","rollbackFrameCount","rollbackPlayerIdx","lastFrameWasRollback","currentRollbackLength","rollbackLengths","checkIfRollbackFrame","currentFrame","playerIdx","getFrames","getCount","getLengths","defaultSlpParserOptions","strict","SlpParser","rollbackCounter","gameEnd","latestFrameIndex","settingsComplete","lastFinalizedFrame","geckoList","handleCommand","_handleGameStart","_handleFrameStart","_handlePostFrameUpdate","_handleFrameUpdate","_handleItemUpdate","_handleFrameBookend","_handleGameEnd","_handleGeckoList","reset","getLatestFrameNumber","getPlayableFrameCount","getLatestFrame","frameIndex","getSettings","getItems","OFF","itemBitfield","_this$settings2","Math","floor","getRollbackFrames","lengths","getFrame","num","getGeckoList","_finalizeFrames","END","semver","gte","_completeSettings","playersByIndex","location","ROLLBACK_FRAME","lte","FRAME","_this$frames$currentF2","ONLINE","frameToFinalize","playerFrameInfo","FINALIZED_FRAME","SETTINGS","ipAddress","connectionStatus","DISCONNECTED","connDetails","client","connection","shouldReconnect","DEFAULT","getStatus","getDetails","connect","ip","timeout","_connectOnPort","reconnect","inject","net","host","_setStatus","CONNECTING","consoleComms","initialDelay","maxDelay","strategy","failAfter","Infinity","CONNECT","commState","INITIAL","_getInitialCommState","console","log","CONNECTED","LEGACY","_handleReplayData","error","prevDataBuf","rcvData","destroy","ERROR","_processMessage","warn","handshakeMsgOut","setConnectingStatus","RECONNECT_WAIT","disconnect","openingBytes","equals","NORMAL","MESSAGE","KEEP_ALIVE","fakeKeepAlive","REPLAY","readPos","cmp","compare","forcePos","nextPos","nick","nintendontVersion","tokenBuf","DATA","status","STATUS_CHANGE","gameCursor","nickname","peer","enet","Promise","createClient","peers","channels","newPeer","ping","packet","Packet","JSON","stringify","PACKET_FLAG","RELIABLE","send","dataString","parse","dolphin_closed","CONNECT_REPLY","GAME_EVENT","_updateCursor","gameData","START_GAME","END_GAME","next_cursor","finalStats","parser","actionsComputer","conversionComputer","comboComputer","stockComputer","inputComputer","targetBreakComputer","statsComputer","ArrayBuffer","_process","shouldStop","slpfile","skipProcessing","getStats","overall","gameComplete","stats","actionCounts","getStadiumStats","latestFrame","HOME_RUN_CONTEST","distanceInfo","sandbagLastFrame","units","JAPANESE","distance","score","fround","round","max","positionToHomeRunDistance","extractDistanceInfoFromFrame","getFilePath","getWinners","finalPostFrameUpdates","TIME","NO_CONTEST","UNRESOLVED","winnerIndex","_players$find","nonFollowerUpdates","pfu","p1","p2","p1Health","trunc","p2Health","firstPosition","placement","winningTeam","_players$find2","_players$find3","currentFile","_writePayload","_handleNewGame","_handleEndGame","getCurrentFilename","resolve","endCurrentFile","updateSettings","NEW_FILE","FILE_COMPLETE","DECREASING","centiseconds","ceil","INCREASING"],"mappings":"u6EAGA,MASaA,EAAkC,CAC7CC,IAAK,EACLC,KAAM,oBACNC,UAAW,UACXC,OAAQ,CAb4B,YAkBtC,SAASC,EACPJ,EACAK,kBAMKA,EAIE,CACLL,KACAC,KAAMI,EAAKJ,KACXC,mBAAWG,EAAKH,aAAaG,EAAKJ,KAClCE,OAAQ,CAlC0B,sBAkCNE,EAAKF,UAAU,KAPpCJ,CASV,UAQeO,EAAiBC,SACzBC,EAAOC,EAAWF,EAAoBG,mBACrCN,EAAsBG,EAAqBC,EACnD,6EARQG,OAAOC,QAAQH,GACnBI,KAAI,EAAEb,EAAIQ,KAAUJ,EAAsBU,SAASd,EAAI,IAAKQ,KAC5DO,MAAK,CAACC,EAAGC,IAAMD,EAAEhB,GAAKiB,EAAEjB,IAC5B,oDAOqCO,UAClBD,EAAiBC,GAClBL,SAClB,4BAEgCK,UACbD,EAAiBC,GAClBN,IAClB,iCAGqCM,EAA6BW,UAC/CZ,EAAiBC,GACXJ,OAAOe,IA9DK,SAmErC,wsCC9DM,MAAMC,EAAoB,CAC/BnB,IAAK,EACLC,KAAM,eACNC,UAAW,oBAKGkB,EAAYC,SACpBC,EAAWC,EAAUF,EAAOX,mBAC7BY,EAGE,CACLtB,GAAIqB,EACJpB,KAAMqB,EAASrB,KACfC,UAAWoB,EAASpB,WALbiB,CAOV,6EAEgCE,UAClBD,EAAYC,GACbnB,SACb,uBAE2BmB,UACbD,EAAYC,GACbpB,IACb,2vCC7BM,MAAMuB,EAA0B,CACrCxB,IAAK,EACLC,KAAM,0BAKQwB,EAAaC,SACrBC,EAAYC,EAAWF,EAAQhB,mBAChCiB,EAGE,CACL3B,GAAI0B,EACJzB,KAAM0B,GAJCH,CAMV,KCvBWK,EAoCAC,EC0HAC,wEFrIiBL,UACbD,EAAaC,GACdzB,IACd,GC5BW4B,0BAAAA,EAAAA,oBAAAA,4DAEVA,iCACAA,iBACAA,uCACAA,qBACAA,uBACAA,mBACAA,qBACAA,qBACAA,qBACAA,wBACAA,oBACAA,sBACAA,0BACAA,oCACAA,gCACAA,sBACAA,sBACAA,sBACAA,sBACAA,sBACAA,gCACAA,4BACAA,kBACAA,sBACAA,8BACAA,kCACAA,wCACAA,4CACAA,kCACAA,gCACAA,0BACAA,oBAGUC,sBAAAA,EAAAA,gBAAAA,gEAEVA,yCACAA,qCACAA,mCACAA,2BACAA,2BACAA,mCACAA,qBACAA,8BACAA,wCACAA,oCACAA,8BACAA,sCACAA,0CACAA,sCACAA,oCACAA,4BACAA,4CACAA,gDACAA,sBACAA,kCACAA,4BACAA,0CACAA,wBACAA,8BACAA,8BACAA,8CACAA,4CACAA,kCACAA,8CACAA,8CACAA,gEACAA,wDACAA,0DACAA,oDACAA,8CACAA,0CACAA,4DACAA,8CACAA,gDACAA,4CACAA,8CACAA,8CACAA,gDACAA,4CACAA,8CACAA,8CACAA,kDACAA,wDACAA,8CACAA,8CACAA,8CACAA,8CACAA,gEACAA,0CACAA,sDACAA,gDACAA,8CACAA,4CACAA,wCACAA,+BACAA,yCACAA,mCACAA,iCACAA,iCACAA,+BACAA,mCACAA,mCACAA,iCACAA,iDACAA,qCACAA,qCACAA,yCACAA,yCACAA,iDACAA,uCACAA,2CACAA,+BACAA,yCACAA,uDACAA,6CACAA,6CACAA,iDACAA,+CACAA,+CACAA,6CACAA,iDACAA,iDACAA,+CACAA,uDACAA,6CACAA,6CACAA,iDACAA,+CACAA,+CACAA,+DACAA,uCACAA,iDACAA,+CACAA,qDACAA,2CACAA,2CACAA,+CACAA,6CACAA,6CACAA,2CACAA,+CACAA,+CACAA,+DACAA,mCACAA,2CACAA,iDACAA,qDACAA,mDACAA,mDACAA,uDACAA,2DACAA,yDACAA,yDACAA,uDACAA,2DACAA,yDACAA,qDACAA,yDACAA,uDACAA,uDACAA,+DACAA,mEACAA,iEACAA,iEACAA,+DACAA,+DACAA,2CCXUC,sBAAAA,EAAAA,gBAAAA,qDAGVA,gCACAA,uCACAA,mCACAA,mCACAA,+BACAA,wDACAA,oDACAA,kCACAA,8BACAA,iCACAA,6BACAA,iCACAA,6BACAA,iCACAA,8BACAA,sDACAA,kDACAA,kDACAA,8CACAA,kDACAA,8CACAA,gDACAA,4CACAA,kDACAA,8CAGAA,qCACAA,uCACAA,iCACAA,+B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"}