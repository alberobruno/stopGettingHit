{"version":3,"file":"slpReader.esm.js","sources":["../../src/utils/slpReader.ts"],"sourcesContent":["import { decode } from \"@shelacek/ubjson\";\nimport fs from \"fs\";\nimport iconv from \"iconv-lite\";\nimport { mapValues } from \"lodash\";\n\nimport type { EventCallbackFunc, EventPayloadTypes, MetadataType, PlayerType, SelfInducedSpeedsType } from \"../types\";\nimport { Command } from \"../types\";\nimport { toHalfwidth } from \"./fullwidth\";\n\nexport enum SlpInputSource {\n  BUFFER = \"buffer\",\n  FILE = \"file\",\n}\n\nexport interface SlpReadInput {\n  source: SlpInputSource;\n  filePath?: string;\n  buffer?: Buffer;\n}\n\nexport type SlpRefType = SlpFileSourceRef | SlpBufferSourceRef;\n\nexport interface SlpFileType {\n  ref: SlpRefType;\n  rawDataPosition: number;\n  rawDataLength: number;\n  metadataPosition: number;\n  metadataLength: number;\n  messageSizes: {\n    [command: number]: number;\n  };\n}\n\nexport interface SlpFileSourceRef {\n  source: SlpInputSource;\n  fileDescriptor: number;\n}\n\nexport interface SlpBufferSourceRef {\n  source: SlpInputSource;\n  buffer: Buffer;\n}\n\nfunction getRef(input: SlpReadInput): SlpRefType {\n  switch (input.source) {\n    case SlpInputSource.FILE:\n      if (!input.filePath) {\n        throw new Error(\"File source requires a file path\");\n      }\n      const fd = fs.openSync(input.filePath, \"r\");\n      return {\n        source: input.source,\n        fileDescriptor: fd,\n      } as SlpFileSourceRef;\n    case SlpInputSource.BUFFER:\n      return {\n        source: input.source,\n        buffer: input.buffer,\n      } as SlpBufferSourceRef;\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\nfunction readRef(ref: SlpRefType, buffer: Uint8Array, offset: number, length: number, position: number): number {\n  switch (ref.source) {\n    case SlpInputSource.FILE:\n      return fs.readSync((ref as SlpFileSourceRef).fileDescriptor, buffer, offset, length, position);\n    case SlpInputSource.BUFFER:\n      return (ref as SlpBufferSourceRef).buffer.copy(buffer, offset, position, position + length);\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\nfunction getLenRef(ref: SlpRefType): number {\n  switch (ref.source) {\n    case SlpInputSource.FILE:\n      const fileStats = fs.fstatSync((ref as SlpFileSourceRef).fileDescriptor);\n      return fileStats.size;\n    case SlpInputSource.BUFFER:\n      return (ref as SlpBufferSourceRef).buffer.length;\n    default:\n      throw new Error(\"Source type not supported\");\n  }\n}\n\n/**\n * Opens a file at path\n */\nexport function openSlpFile(input: SlpReadInput): SlpFileType {\n  const ref = getRef(input);\n\n  const rawDataPosition = getRawDataPosition(ref);\n  const rawDataLength = getRawDataLength(ref, rawDataPosition);\n  const metadataPosition = rawDataPosition + rawDataLength + 10; // remove metadata string\n  const metadataLength = getMetadataLength(ref, metadataPosition);\n  const messageSizes = getMessageSizes(ref, rawDataPosition);\n\n  return {\n    ref,\n    rawDataPosition,\n    rawDataLength,\n    metadataPosition,\n    metadataLength,\n    messageSizes,\n  };\n}\n\nexport function closeSlpFile(file: SlpFileType): void {\n  switch (file.ref.source) {\n    case SlpInputSource.FILE:\n      fs.closeSync((file.ref as SlpFileSourceRef).fileDescriptor);\n      break;\n  }\n}\n\n// This function gets the position where the raw data starts\nfunction getRawDataPosition(ref: SlpRefType): number {\n  const buffer = new Uint8Array(1);\n  readRef(ref, buffer, 0, buffer.length, 0);\n\n  if (buffer[0] === 0x36) {\n    return 0;\n  }\n\n  if (buffer[0] !== \"{\".charCodeAt(0)) {\n    return 0; // return error?\n  }\n\n  return 15;\n}\n\nfunction getRawDataLength(ref: SlpRefType, position: number): number {\n  const fileSize = getLenRef(ref);\n  if (position === 0) {\n    return fileSize;\n  }\n\n  const buffer = new Uint8Array(4);\n  readRef(ref, buffer, 0, buffer.length, position - 4);\n\n  const rawDataLen = (buffer[0]! << 24) | (buffer[1]! << 16) | (buffer[2]! << 8) | buffer[3]!;\n  if (rawDataLen > 0) {\n    // If this method manages to read a number, it's probably trustworthy\n    return rawDataLen;\n  }\n\n  // If the above does not return a valid data length,\n  // return a file size based on file length. This enables\n  // some support for severed files\n  return fileSize - position;\n}\n\nfunction getMetadataLength(ref: SlpRefType, position: number): number {\n  const len = getLenRef(ref);\n  return len - position - 1;\n}\n\nfunction getMessageSizes(\n  ref: SlpRefType,\n  position: number,\n): {\n  [command: number]: number;\n} {\n  const messageSizes: {\n    [command: number]: number;\n  } = {};\n  // Support old file format\n  if (position === 0) {\n    messageSizes[0x36] = 0x140;\n    messageSizes[0x37] = 0x6;\n    messageSizes[0x38] = 0x46;\n    messageSizes[0x39] = 0x1;\n    return messageSizes;\n  }\n\n  const buffer = new Uint8Array(2);\n  readRef(ref, buffer, 0, buffer.length, position);\n  if (buffer[0] !== Command.MESSAGE_SIZES) {\n    return {};\n  }\n\n  const payloadLength = buffer[1] as number;\n  (messageSizes[0x35] as any) = payloadLength;\n\n  const messageSizesBuffer = new Uint8Array(payloadLength - 1);\n  readRef(ref, messageSizesBuffer, 0, messageSizesBuffer.length, position + 2);\n  for (let i = 0; i < payloadLength - 1; i += 3) {\n    const command = messageSizesBuffer[i] as number;\n\n    // Get size of command\n    (messageSizes[command] as any) = (messageSizesBuffer[i + 1]! << 8) | messageSizesBuffer[i + 2]!;\n  }\n\n  return messageSizes;\n}\n\n/**\n * Iterates through slp events and parses payloads\n */\nexport function iterateEvents(\n  slpFile: SlpFileType,\n  callback: EventCallbackFunc,\n  startPos: number | null = null,\n): number {\n  const ref = slpFile.ref;\n\n  let readPosition = startPos !== null && startPos > 0 ? startPos : slpFile.rawDataPosition;\n  const stopReadingAt = slpFile.rawDataPosition + slpFile.rawDataLength;\n\n  // Generate read buffers for each\n  const commandPayloadBuffers = mapValues(slpFile.messageSizes, (size) => new Uint8Array(size + 1));\n\n  const commandByteBuffer = new Uint8Array(1);\n  while (readPosition < stopReadingAt) {\n    readRef(ref, commandByteBuffer, 0, 1, readPosition);\n    const commandByte = commandByteBuffer[0] as number;\n    const buffer = commandPayloadBuffers[commandByte];\n    if (buffer === undefined) {\n      // If we don't have an entry for this command, return false to indicate failed read\n      return readPosition;\n    }\n\n    if (buffer.length > stopReadingAt - readPosition) {\n      return readPosition;\n    }\n\n    readRef(ref, buffer, 0, buffer.length, readPosition);\n    const parsedPayload = parseMessage(commandByte, buffer);\n    const shouldStop = callback(commandByte, parsedPayload);\n    if (shouldStop) {\n      break;\n    }\n\n    readPosition += buffer.length;\n  }\n\n  return readPosition;\n}\n\nexport function parseMessage(command: Command, payload: Uint8Array): EventPayloadTypes | null {\n  const view = new DataView(payload.buffer);\n  switch (command) {\n    case Command.GAME_START:\n      const getPlayerObject = (playerIndex: number): PlayerType => {\n        // Controller Fix stuff\n        const cfOffset = playerIndex * 0x8;\n        const dashback = readUint32(view, 0x141 + cfOffset);\n        const shieldDrop = readUint32(view, 0x145 + cfOffset);\n        let controllerFix = \"None\";\n        if (dashback !== shieldDrop) {\n          controllerFix = \"Mixed\";\n        } else if (dashback === 1) {\n          controllerFix = \"UCF\";\n        } else if (dashback === 2) {\n          controllerFix = \"Dween\";\n        }\n\n        // Nametag stuff\n        const nametagLength = 0x10;\n        const nametagOffset = playerIndex * nametagLength;\n        const nametagStart = 0x161 + nametagOffset;\n        const nametagBuf = payload.slice(nametagStart, nametagStart + nametagLength);\n        const nameTagString = iconv\n          .decode(nametagBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const nametag = nameTagString ? toHalfwidth(nameTagString) : \"\";\n\n        // Display name\n        const displayNameLength = 0x1f;\n        const displayNameOffset = playerIndex * displayNameLength;\n        const displayNameStart = 0x1a5 + displayNameOffset;\n        const displayNameBuf = payload.slice(displayNameStart, displayNameStart + displayNameLength);\n        const displayNameString = iconv\n          .decode(displayNameBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const displayName = displayNameString ? toHalfwidth(displayNameString) : \"\";\n\n        // Connect code\n        const connectCodeLength = 0xa;\n        const connectCodeOffset = playerIndex * connectCodeLength;\n        const connectCodeStart = 0x221 + connectCodeOffset;\n        const connectCodeBuf = payload.slice(connectCodeStart, connectCodeStart + connectCodeLength);\n        const connectCodeString = iconv\n          .decode(connectCodeBuf as Buffer, \"Shift_JIS\")\n          .split(\"\\0\")\n          .shift();\n        const connectCode = connectCodeString ? toHalfwidth(connectCodeString) : \"\";\n\n        const userIdLength = 0x1d;\n        const userIdOffset = playerIndex * userIdLength;\n        const userIdStart = 0x249 + userIdOffset;\n        const userIdBuf = payload.slice(userIdStart, userIdStart + userIdLength);\n        const userIdString = iconv\n          .decode(userIdBuf as Buffer, \"utf8\")\n          .split(\"\\0\")\n          .shift();\n        const userId = userIdString ?? \"\";\n\n        const offset = playerIndex * 0x24;\n        return {\n          playerIndex,\n          port: playerIndex + 1,\n          characterId: readUint8(view, 0x65 + offset),\n          characterColor: readUint8(view, 0x68 + offset),\n          startStocks: readUint8(view, 0x67 + offset),\n          type: readUint8(view, 0x66 + offset),\n          teamId: readUint8(view, 0x6e + offset),\n          controllerFix,\n          nametag,\n          displayName,\n          connectCode,\n          userId,\n        };\n      };\n      return {\n        slpVersion: `${readUint8(view, 0x1)}.${readUint8(view, 0x2)}.${readUint8(view, 0x3)}`,\n        isTeams: readBool(view, 0xd),\n        isPAL: readBool(view, 0x1a1),\n        stageId: readUint16(view, 0x13),\n        players: [0, 1, 2, 3].map(getPlayerObject),\n        scene: readUint8(view, 0x1a3),\n        gameMode: readUint8(view, 0x1a4),\n      };\n    case Command.PRE_FRAME_UPDATE:\n      return {\n        frame: readInt32(view, 0x1),\n        playerIndex: readUint8(view, 0x5),\n        isFollower: readBool(view, 0x6),\n        seed: readUint32(view, 0x7),\n        actionStateId: readUint16(view, 0xb),\n        positionX: readFloat(view, 0xd),\n        positionY: readFloat(view, 0x11),\n        facingDirection: readFloat(view, 0x15),\n        joystickX: readFloat(view, 0x19),\n        joystickY: readFloat(view, 0x1d),\n        cStickX: readFloat(view, 0x21),\n        cStickY: readFloat(view, 0x25),\n        trigger: readFloat(view, 0x29),\n        buttons: readUint32(view, 0x2d),\n        physicalButtons: readUint16(view, 0x31),\n        physicalLTrigger: readFloat(view, 0x33),\n        physicalRTrigger: readFloat(view, 0x37),\n        percent: readFloat(view, 0x3c),\n      };\n    case Command.POST_FRAME_UPDATE:\n      const selfInducedSpeeds: SelfInducedSpeedsType = {\n        airX: readFloat(view, 0x35),\n        y: readFloat(view, 0x39),\n        attackX: readFloat(view, 0x3d),\n        attackY: readFloat(view, 0x41),\n        groundX: readFloat(view, 0x45),\n      };\n      return {\n        frame: readInt32(view, 0x1),\n        playerIndex: readUint8(view, 0x5),\n        isFollower: readBool(view, 0x6),\n        internalCharacterId: readUint8(view, 0x7),\n        actionStateId: readUint16(view, 0x8),\n        positionX: readFloat(view, 0xa),\n        positionY: readFloat(view, 0xe),\n        facingDirection: readFloat(view, 0x12),\n        percent: readFloat(view, 0x16),\n        shieldSize: readFloat(view, 0x1a),\n        lastAttackLanded: readUint8(view, 0x1e),\n        currentComboCount: readUint8(view, 0x1f),\n        lastHitBy: readUint8(view, 0x20),\n        stocksRemaining: readUint8(view, 0x21),\n        actionStateCounter: readFloat(view, 0x22),\n        miscActionState: readFloat(view, 0x2b),\n        isAirborne: readBool(view, 0x2f),\n        lastGroundId: readUint16(view, 0x30),\n        jumpsRemaining: readUint8(view, 0x32),\n        lCancelStatus: readUint8(view, 0x33),\n        hurtboxCollisionState: readUint8(view, 0x34),\n        selfInducedSpeeds: selfInducedSpeeds,\n      };\n    case Command.ITEM_UPDATE:\n      return {\n        frame: readInt32(view, 0x1),\n        typeId: readUint16(view, 0x5),\n        state: readUint8(view, 0x7),\n        facingDirection: readFloat(view, 0x8),\n        velocityX: readFloat(view, 0xc),\n        velocityY: readFloat(view, 0x10),\n        positionX: readFloat(view, 0x14),\n        positionY: readFloat(view, 0x18),\n        damageTaken: readUint16(view, 0x1c),\n        expirationTimer: readFloat(view, 0x1e),\n        spawnId: readUint32(view, 0x22),\n        missileType: readUint8(view, 0x26),\n        turnipFace: readUint8(view, 0x27),\n        chargeShotLaunched: readUint8(view, 0x28),\n        chargePower: readUint8(view, 0x29),\n        owner: readInt8(view, 0x2a),\n      };\n    case Command.FRAME_BOOKEND:\n      return {\n        frame: readInt32(view, 0x1),\n        latestFinalizedFrame: readInt32(view, 0x5),\n      };\n    case Command.GAME_END:\n      return {\n        gameEndMethod: readUint8(view, 0x1),\n        lrasInitiatorIndex: readInt8(view, 0x2),\n      };\n    default:\n      return null;\n  }\n}\n\nfunction canReadFromView(view: DataView, offset: number, length: number): boolean {\n  const viewLength = view.byteLength;\n  return offset + length <= viewLength;\n}\n\nfunction readFloat(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getFloat32(offset);\n}\n\nfunction readInt32(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getInt32(offset);\n}\n\nfunction readInt8(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return view.getInt8(offset);\n}\n\nfunction readUint32(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 4)) {\n    return null;\n  }\n\n  return view.getUint32(offset);\n}\n\nfunction readUint16(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 2)) {\n    return null;\n  }\n\n  return view.getUint16(offset);\n}\n\nfunction readUint8(view: DataView, offset: number): number | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return view.getUint8(offset);\n}\n\nfunction readBool(view: DataView, offset: number): boolean | null {\n  if (!canReadFromView(view, offset, 1)) {\n    return null;\n  }\n\n  return !!view.getUint8(offset);\n}\n\nexport function getMetadata(slpFile: SlpFileType): MetadataType | null {\n  if (slpFile.metadataLength <= 0) {\n    // This will happen on a severed incomplete file\n    // $FlowFixMe\n    return null;\n  }\n\n  const buffer = new Uint8Array(slpFile.metadataLength);\n\n  readRef(slpFile.ref, buffer, 0, buffer.length, slpFile.metadataPosition);\n\n  let metadata = null;\n  try {\n    metadata = decode(buffer);\n  } catch (ex) {\n    // Do nothing\n    // console.log(ex);\n  }\n\n  // $FlowFixMe\n  return metadata;\n}\n"],"names":["SlpInputSource","getRef","input","source","FILE","filePath","Error","fd","fs","openSync","fileDescriptor","BUFFER","buffer","readRef","ref","offset","length","position","readSync","copy","getLenRef","fileStats","fstatSync","size","openSlpFile","rawDataPosition","getRawDataPosition","rawDataLength","getRawDataLength","metadataPosition","metadataLength","getMetadataLength","messageSizes","getMessageSizes","closeSlpFile","file","closeSync","Uint8Array","charCodeAt","fileSize","rawDataLen","len","Command","MESSAGE_SIZES","payloadLength","messageSizesBuffer","i","command","iterateEvents","slpFile","callback","startPos","readPosition","stopReadingAt","commandPayloadBuffers","mapValues","commandByteBuffer","commandByte","undefined","parsedPayload","parseMessage","shouldStop","payload","view","DataView","GAME_START","getPlayerObject","playerIndex","cfOffset","dashback","readUint32","shieldDrop","controllerFix","nametagLength","nametagOffset","nametagStart","nametagBuf","slice","nameTagString","iconv","decode","split","shift","nametag","toHalfwidth","displayNameLength","displayNameOffset","displayNameStart","displayNameBuf","displayNameString","displayName","connectCodeLength","connectCodeOffset","connectCodeStart","connectCodeBuf","connectCodeString","connectCode","userIdLength","userIdOffset","userIdStart","userIdBuf","userIdString","userId","port","characterId","readUint8","characterColor","startStocks","type","teamId","slpVersion","isTeams","readBool","isPAL","stageId","readUint16","players","map","scene","gameMode","PRE_FRAME_UPDATE","frame","readInt32","isFollower","seed","actionStateId","positionX","readFloat","positionY","facingDirection","joystickX","joystickY","cStickX","cStickY","trigger","buttons","physicalButtons","physicalLTrigger","physicalRTrigger","percent","POST_FRAME_UPDATE","selfInducedSpeeds","airX","y","attackX","attackY","groundX","internalCharacterId","shieldSize","lastAttackLanded","currentComboCount","lastHitBy","stocksRemaining","actionStateCounter","miscActionState","isAirborne","lastGroundId","jumpsRemaining","lCancelStatus","hurtboxCollisionState","ITEM_UPDATE","typeId","state","velocityX","velocityY","damageTaken","expirationTimer","spawnId","missileType","turnipFace","chargeShotLaunched","chargePower","owner","readInt8","FRAME_BOOKEND","latestFinalizedFrame","GAME_END","gameEndMethod","lrasInitiatorIndex","canReadFromView","viewLength","byteLength","getFloat32","getInt32","getInt8","getUint32","getUint16","getUint8","getMetadata","metadata","ex"],"mappings":"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"}